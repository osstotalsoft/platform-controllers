// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// HelmRelease is the Schema for the helmreleases API
type HelmRelease struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// HelmReleaseSpec defines the desired state of a Helm release.
	Spec HelmReleaseSpecPtrOutput `pulumi:"spec"`
	// HelmReleaseStatus defines the observed state of a HelmRelease.
	Status HelmReleaseStatusPtrOutput `pulumi:"status"`
}

// NewHelmRelease registers a new resource with the given unique name, arguments, and options.
func NewHelmRelease(ctx *pulumi.Context,
	name string, args *HelmReleaseArgs, opts ...pulumi.ResourceOption) (*HelmRelease, error) {
	if args == nil {
		args = &HelmReleaseArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("helm.toolkit.fluxcd.io/v2beta1")
	args.Kind = pulumi.StringPtr("HelmRelease")
	if args.Spec != nil {
		args.Spec = args.Spec.ToHelmReleaseSpecPtrOutput().ApplyT(func(v *HelmReleaseSpec) *HelmReleaseSpec { return v.Defaults() }).(HelmReleaseSpecPtrOutput)
	}
	var resource HelmRelease
	err := ctx.RegisterResource("kubernetes:helm.toolkit.fluxcd.io/v2beta1:HelmRelease", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHelmRelease gets an existing HelmRelease resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHelmRelease(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HelmReleaseState, opts ...pulumi.ResourceOption) (*HelmRelease, error) {
	var resource HelmRelease
	err := ctx.ReadResource("kubernetes:helm.toolkit.fluxcd.io/v2beta1:HelmRelease", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HelmRelease resources.
type helmReleaseState struct {
}

type HelmReleaseState struct {
}

func (HelmReleaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*helmReleaseState)(nil)).Elem()
}

type helmReleaseArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// HelmReleaseSpec defines the desired state of a Helm release.
	Spec *HelmReleaseSpec `pulumi:"spec"`
	// HelmReleaseStatus defines the observed state of a HelmRelease.
	Status *HelmReleaseStatus `pulumi:"status"`
}

// The set of arguments for constructing a HelmRelease resource.
type HelmReleaseArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// HelmReleaseSpec defines the desired state of a Helm release.
	Spec HelmReleaseSpecPtrInput
	// HelmReleaseStatus defines the observed state of a HelmRelease.
	Status HelmReleaseStatusPtrInput
}

func (HelmReleaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*helmReleaseArgs)(nil)).Elem()
}

type HelmReleaseInput interface {
	pulumi.Input

	ToHelmReleaseOutput() HelmReleaseOutput
	ToHelmReleaseOutputWithContext(ctx context.Context) HelmReleaseOutput
}

func (*HelmRelease) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRelease)(nil)).Elem()
}

func (i *HelmRelease) ToHelmReleaseOutput() HelmReleaseOutput {
	return i.ToHelmReleaseOutputWithContext(context.Background())
}

func (i *HelmRelease) ToHelmReleaseOutputWithContext(ctx context.Context) HelmReleaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseOutput)
}

type HelmReleaseOutput struct{ *pulumi.OutputState }

func (HelmReleaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRelease)(nil)).Elem()
}

func (o HelmReleaseOutput) ToHelmReleaseOutput() HelmReleaseOutput {
	return o
}

func (o HelmReleaseOutput) ToHelmReleaseOutputWithContext(ctx context.Context) HelmReleaseOutput {
	return o
}

func (o HelmReleaseOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRelease) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o HelmReleaseOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRelease) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o HelmReleaseOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *HelmRelease) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// HelmReleaseSpec defines the desired state of a Helm release.
func (o HelmReleaseOutput) Spec() HelmReleaseSpecPtrOutput {
	return o.ApplyT(func(v *HelmRelease) HelmReleaseSpecPtrOutput { return v.Spec }).(HelmReleaseSpecPtrOutput)
}

// HelmReleaseStatus defines the observed state of a HelmRelease.
func (o HelmReleaseOutput) Status() HelmReleaseStatusPtrOutput {
	return o.ApplyT(func(v *HelmRelease) HelmReleaseStatusPtrOutput { return v.Status }).(HelmReleaseStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseInput)(nil)).Elem(), &HelmRelease{})
	pulumi.RegisterOutputType(HelmReleaseOutput{})
}
