// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// HelmRelease is the Schema for the helmreleases API
type HelmReleaseType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// HelmReleaseSpec defines the desired state of a Helm release.
	Spec *HelmReleaseSpec `pulumi:"spec"`
	// HelmReleaseStatus defines the observed state of a HelmRelease.
	Status *HelmReleaseStatus `pulumi:"status"`
}

// Defaults sets the appropriate defaults for HelmReleaseType
func (val *HelmReleaseType) Defaults() *HelmReleaseType {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Spec = tmp.Spec.Defaults()

	return &tmp
}

type HelmReleaseMetadata struct {
}

// HelmReleaseSpec defines the desired state of a Helm release.
type HelmReleaseSpec struct {
	// Chart defines the template of the v1beta2.HelmChart that should be created for this HelmRelease.
	Chart HelmReleaseSpecChart `pulumi:"chart"`
	// DependsOn may contain a meta.NamespacedObjectReference slice with references to HelmRelease resources that must be ready before this HelmRelease can be reconciled.
	DependsOn []HelmReleaseSpecDependson `pulumi:"dependsOn"`
	// Install holds the configuration for Helm install actions for this HelmRelease.
	Install *HelmReleaseSpecInstall `pulumi:"install"`
	// Interval at which to reconcile the Helm release.
	Interval string `pulumi:"interval"`
	// KubeConfig for reconciling the HelmRelease on a remote cluster. When used in combination with HelmReleaseSpec.ServiceAccountName, forces the controller to act on behalf of that Service Account at the target cluster. If the --default-service-account flag is set, its value will be used as a controller level fallback for when HelmReleaseSpec.ServiceAccountName is empty.
	KubeConfig *HelmReleaseSpecKubeconfig `pulumi:"kubeConfig"`
	// MaxHistory is the number of revisions saved by Helm for this HelmRelease. Use '0' for an unlimited number of revisions; defaults to '10'.
	MaxHistory *int `pulumi:"maxHistory"`
	// PostRenderers holds an array of Helm PostRenderers, which will be applied in order of their definition.
	PostRenderers []HelmReleaseSpecPostrenderers `pulumi:"postRenderers"`
	// ReleaseName used for the Helm release. Defaults to a composition of '[TargetNamespace-]Name'.
	ReleaseName *string `pulumi:"releaseName"`
	// Rollback holds the configuration for Helm rollback actions for this HelmRelease.
	Rollback *HelmReleaseSpecRollback `pulumi:"rollback"`
	// The name of the Kubernetes service account to impersonate when reconciling this HelmRelease.
	ServiceAccountName *string `pulumi:"serviceAccountName"`
	// StorageNamespace used for the Helm storage. Defaults to the namespace of the HelmRelease.
	StorageNamespace *string `pulumi:"storageNamespace"`
	// Suspend tells the controller to suspend reconciliation for this HelmRelease, it does not apply to already started reconciliations. Defaults to false.
	Suspend *bool `pulumi:"suspend"`
	// TargetNamespace to target when performing operations for the HelmRelease. Defaults to the namespace of the HelmRelease.
	TargetNamespace *string `pulumi:"targetNamespace"`
	// Test holds the configuration for Helm test actions for this HelmRelease.
	Test *HelmReleaseSpecTest `pulumi:"test"`
	// Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm action. Defaults to '5m0s'.
	Timeout *string `pulumi:"timeout"`
	// Uninstall holds the configuration for Helm uninstall actions for this HelmRelease.
	Uninstall *HelmReleaseSpecUninstall `pulumi:"uninstall"`
	// Upgrade holds the configuration for Helm upgrade actions for this HelmRelease.
	Upgrade *HelmReleaseSpecUpgrade `pulumi:"upgrade"`
	// Values holds the values for this Helm release.
	Values map[string]interface{} `pulumi:"values"`
	// ValuesFrom holds references to resources containing Helm values for this HelmRelease, and information about how they should be merged.
	ValuesFrom []HelmReleaseSpecValuesfrom `pulumi:"valuesFrom"`
}

// Defaults sets the appropriate defaults for HelmReleaseSpec
func (val *HelmReleaseSpec) Defaults() *HelmReleaseSpec {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Chart = *tmp.Chart.Defaults()

	return &tmp
}

// HelmReleaseSpecInput is an input type that accepts HelmReleaseSpecArgs and HelmReleaseSpecOutput values.
// You can construct a concrete instance of `HelmReleaseSpecInput` via:
//
//          HelmReleaseSpecArgs{...}
type HelmReleaseSpecInput interface {
	pulumi.Input

	ToHelmReleaseSpecOutput() HelmReleaseSpecOutput
	ToHelmReleaseSpecOutputWithContext(context.Context) HelmReleaseSpecOutput
}

// HelmReleaseSpec defines the desired state of a Helm release.
type HelmReleaseSpecArgs struct {
	// Chart defines the template of the v1beta2.HelmChart that should be created for this HelmRelease.
	Chart HelmReleaseSpecChartInput `pulumi:"chart"`
	// DependsOn may contain a meta.NamespacedObjectReference slice with references to HelmRelease resources that must be ready before this HelmRelease can be reconciled.
	DependsOn HelmReleaseSpecDependsonArrayInput `pulumi:"dependsOn"`
	// Install holds the configuration for Helm install actions for this HelmRelease.
	Install HelmReleaseSpecInstallPtrInput `pulumi:"install"`
	// Interval at which to reconcile the Helm release.
	Interval pulumi.StringInput `pulumi:"interval"`
	// KubeConfig for reconciling the HelmRelease on a remote cluster. When used in combination with HelmReleaseSpec.ServiceAccountName, forces the controller to act on behalf of that Service Account at the target cluster. If the --default-service-account flag is set, its value will be used as a controller level fallback for when HelmReleaseSpec.ServiceAccountName is empty.
	KubeConfig HelmReleaseSpecKubeconfigPtrInput `pulumi:"kubeConfig"`
	// MaxHistory is the number of revisions saved by Helm for this HelmRelease. Use '0' for an unlimited number of revisions; defaults to '10'.
	MaxHistory pulumi.IntPtrInput `pulumi:"maxHistory"`
	// PostRenderers holds an array of Helm PostRenderers, which will be applied in order of their definition.
	PostRenderers HelmReleaseSpecPostrenderersArrayInput `pulumi:"postRenderers"`
	// ReleaseName used for the Helm release. Defaults to a composition of '[TargetNamespace-]Name'.
	ReleaseName pulumi.StringPtrInput `pulumi:"releaseName"`
	// Rollback holds the configuration for Helm rollback actions for this HelmRelease.
	Rollback HelmReleaseSpecRollbackPtrInput `pulumi:"rollback"`
	// The name of the Kubernetes service account to impersonate when reconciling this HelmRelease.
	ServiceAccountName pulumi.StringPtrInput `pulumi:"serviceAccountName"`
	// StorageNamespace used for the Helm storage. Defaults to the namespace of the HelmRelease.
	StorageNamespace pulumi.StringPtrInput `pulumi:"storageNamespace"`
	// Suspend tells the controller to suspend reconciliation for this HelmRelease, it does not apply to already started reconciliations. Defaults to false.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// TargetNamespace to target when performing operations for the HelmRelease. Defaults to the namespace of the HelmRelease.
	TargetNamespace pulumi.StringPtrInput `pulumi:"targetNamespace"`
	// Test holds the configuration for Helm test actions for this HelmRelease.
	Test HelmReleaseSpecTestPtrInput `pulumi:"test"`
	// Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm action. Defaults to '5m0s'.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// Uninstall holds the configuration for Helm uninstall actions for this HelmRelease.
	Uninstall HelmReleaseSpecUninstallPtrInput `pulumi:"uninstall"`
	// Upgrade holds the configuration for Helm upgrade actions for this HelmRelease.
	Upgrade HelmReleaseSpecUpgradePtrInput `pulumi:"upgrade"`
	// Values holds the values for this Helm release.
	Values pulumi.MapInput `pulumi:"values"`
	// ValuesFrom holds references to resources containing Helm values for this HelmRelease, and information about how they should be merged.
	ValuesFrom HelmReleaseSpecValuesfromArrayInput `pulumi:"valuesFrom"`
}

// Defaults sets the appropriate defaults for HelmReleaseSpecArgs
func (val *HelmReleaseSpecArgs) Defaults() *HelmReleaseSpecArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (HelmReleaseSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpec)(nil)).Elem()
}

func (i HelmReleaseSpecArgs) ToHelmReleaseSpecOutput() HelmReleaseSpecOutput {
	return i.ToHelmReleaseSpecOutputWithContext(context.Background())
}

func (i HelmReleaseSpecArgs) ToHelmReleaseSpecOutputWithContext(ctx context.Context) HelmReleaseSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecOutput)
}

func (i HelmReleaseSpecArgs) ToHelmReleaseSpecPtrOutput() HelmReleaseSpecPtrOutput {
	return i.ToHelmReleaseSpecPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecArgs) ToHelmReleaseSpecPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecOutput).ToHelmReleaseSpecPtrOutputWithContext(ctx)
}

// HelmReleaseSpecPtrInput is an input type that accepts HelmReleaseSpecArgs, HelmReleaseSpecPtr and HelmReleaseSpecPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPtrInput` via:
//
//          HelmReleaseSpecArgs{...}
//
//  or:
//
//          nil
type HelmReleaseSpecPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecPtrOutput() HelmReleaseSpecPtrOutput
	ToHelmReleaseSpecPtrOutputWithContext(context.Context) HelmReleaseSpecPtrOutput
}

type helmReleaseSpecPtrType HelmReleaseSpecArgs

func HelmReleaseSpecPtr(v *HelmReleaseSpecArgs) HelmReleaseSpecPtrInput {
	return (*helmReleaseSpecPtrType)(v)
}

func (*helmReleaseSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpec)(nil)).Elem()
}

func (i *helmReleaseSpecPtrType) ToHelmReleaseSpecPtrOutput() HelmReleaseSpecPtrOutput {
	return i.ToHelmReleaseSpecPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecPtrType) ToHelmReleaseSpecPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPtrOutput)
}

// HelmReleaseSpec defines the desired state of a Helm release.
type HelmReleaseSpecOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpec)(nil)).Elem()
}

func (o HelmReleaseSpecOutput) ToHelmReleaseSpecOutput() HelmReleaseSpecOutput {
	return o
}

func (o HelmReleaseSpecOutput) ToHelmReleaseSpecOutputWithContext(ctx context.Context) HelmReleaseSpecOutput {
	return o
}

func (o HelmReleaseSpecOutput) ToHelmReleaseSpecPtrOutput() HelmReleaseSpecPtrOutput {
	return o.ToHelmReleaseSpecPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecOutput) ToHelmReleaseSpecPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpec) *HelmReleaseSpec {
		return &v
	}).(HelmReleaseSpecPtrOutput)
}

// Chart defines the template of the v1beta2.HelmChart that should be created for this HelmRelease.
func (o HelmReleaseSpecOutput) Chart() HelmReleaseSpecChartOutput {
	return o.ApplyT(func(v HelmReleaseSpec) HelmReleaseSpecChart { return v.Chart }).(HelmReleaseSpecChartOutput)
}

// DependsOn may contain a meta.NamespacedObjectReference slice with references to HelmRelease resources that must be ready before this HelmRelease can be reconciled.
func (o HelmReleaseSpecOutput) DependsOn() HelmReleaseSpecDependsonArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpec) []HelmReleaseSpecDependson { return v.DependsOn }).(HelmReleaseSpecDependsonArrayOutput)
}

// Install holds the configuration for Helm install actions for this HelmRelease.
func (o HelmReleaseSpecOutput) Install() HelmReleaseSpecInstallPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *HelmReleaseSpecInstall { return v.Install }).(HelmReleaseSpecInstallPtrOutput)
}

// Interval at which to reconcile the Helm release.
func (o HelmReleaseSpecOutput) Interval() pulumi.StringOutput {
	return o.ApplyT(func(v HelmReleaseSpec) string { return v.Interval }).(pulumi.StringOutput)
}

// KubeConfig for reconciling the HelmRelease on a remote cluster. When used in combination with HelmReleaseSpec.ServiceAccountName, forces the controller to act on behalf of that Service Account at the target cluster. If the --default-service-account flag is set, its value will be used as a controller level fallback for when HelmReleaseSpec.ServiceAccountName is empty.
func (o HelmReleaseSpecOutput) KubeConfig() HelmReleaseSpecKubeconfigPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *HelmReleaseSpecKubeconfig { return v.KubeConfig }).(HelmReleaseSpecKubeconfigPtrOutput)
}

// MaxHistory is the number of revisions saved by Helm for this HelmRelease. Use '0' for an unlimited number of revisions; defaults to '10'.
func (o HelmReleaseSpecOutput) MaxHistory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *int { return v.MaxHistory }).(pulumi.IntPtrOutput)
}

// PostRenderers holds an array of Helm PostRenderers, which will be applied in order of their definition.
func (o HelmReleaseSpecOutput) PostRenderers() HelmReleaseSpecPostrenderersArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpec) []HelmReleaseSpecPostrenderers { return v.PostRenderers }).(HelmReleaseSpecPostrenderersArrayOutput)
}

// ReleaseName used for the Helm release. Defaults to a composition of '[TargetNamespace-]Name'.
func (o HelmReleaseSpecOutput) ReleaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *string { return v.ReleaseName }).(pulumi.StringPtrOutput)
}

// Rollback holds the configuration for Helm rollback actions for this HelmRelease.
func (o HelmReleaseSpecOutput) Rollback() HelmReleaseSpecRollbackPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *HelmReleaseSpecRollback { return v.Rollback }).(HelmReleaseSpecRollbackPtrOutput)
}

// The name of the Kubernetes service account to impersonate when reconciling this HelmRelease.
func (o HelmReleaseSpecOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

// StorageNamespace used for the Helm storage. Defaults to the namespace of the HelmRelease.
func (o HelmReleaseSpecOutput) StorageNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *string { return v.StorageNamespace }).(pulumi.StringPtrOutput)
}

// Suspend tells the controller to suspend reconciliation for this HelmRelease, it does not apply to already started reconciliations. Defaults to false.
func (o HelmReleaseSpecOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// TargetNamespace to target when performing operations for the HelmRelease. Defaults to the namespace of the HelmRelease.
func (o HelmReleaseSpecOutput) TargetNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *string { return v.TargetNamespace }).(pulumi.StringPtrOutput)
}

// Test holds the configuration for Helm test actions for this HelmRelease.
func (o HelmReleaseSpecOutput) Test() HelmReleaseSpecTestPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *HelmReleaseSpecTest { return v.Test }).(HelmReleaseSpecTestPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm action. Defaults to '5m0s'.
func (o HelmReleaseSpecOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Uninstall holds the configuration for Helm uninstall actions for this HelmRelease.
func (o HelmReleaseSpecOutput) Uninstall() HelmReleaseSpecUninstallPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *HelmReleaseSpecUninstall { return v.Uninstall }).(HelmReleaseSpecUninstallPtrOutput)
}

// Upgrade holds the configuration for Helm upgrade actions for this HelmRelease.
func (o HelmReleaseSpecOutput) Upgrade() HelmReleaseSpecUpgradePtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *HelmReleaseSpecUpgrade { return v.Upgrade }).(HelmReleaseSpecUpgradePtrOutput)
}

// Values holds the values for this Helm release.
func (o HelmReleaseSpecOutput) Values() pulumi.MapOutput {
	return o.ApplyT(func(v HelmReleaseSpec) map[string]interface{} { return v.Values }).(pulumi.MapOutput)
}

// ValuesFrom holds references to resources containing Helm values for this HelmRelease, and information about how they should be merged.
func (o HelmReleaseSpecOutput) ValuesFrom() HelmReleaseSpecValuesfromArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpec) []HelmReleaseSpecValuesfrom { return v.ValuesFrom }).(HelmReleaseSpecValuesfromArrayOutput)
}

type HelmReleaseSpecPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpec)(nil)).Elem()
}

func (o HelmReleaseSpecPtrOutput) ToHelmReleaseSpecPtrOutput() HelmReleaseSpecPtrOutput {
	return o
}

func (o HelmReleaseSpecPtrOutput) ToHelmReleaseSpecPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPtrOutput {
	return o
}

func (o HelmReleaseSpecPtrOutput) Elem() HelmReleaseSpecOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) HelmReleaseSpec {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpec
		return ret
	}).(HelmReleaseSpecOutput)
}

// Chart defines the template of the v1beta2.HelmChart that should be created for this HelmRelease.
func (o HelmReleaseSpecPtrOutput) Chart() HelmReleaseSpecChartPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *HelmReleaseSpecChart {
		if v == nil {
			return nil
		}
		return &v.Chart
	}).(HelmReleaseSpecChartPtrOutput)
}

// DependsOn may contain a meta.NamespacedObjectReference slice with references to HelmRelease resources that must be ready before this HelmRelease can be reconciled.
func (o HelmReleaseSpecPtrOutput) DependsOn() HelmReleaseSpecDependsonArrayOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) []HelmReleaseSpecDependson {
		if v == nil {
			return nil
		}
		return v.DependsOn
	}).(HelmReleaseSpecDependsonArrayOutput)
}

// Install holds the configuration for Helm install actions for this HelmRelease.
func (o HelmReleaseSpecPtrOutput) Install() HelmReleaseSpecInstallPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *HelmReleaseSpecInstall {
		if v == nil {
			return nil
		}
		return v.Install
	}).(HelmReleaseSpecInstallPtrOutput)
}

// Interval at which to reconcile the Helm release.
func (o HelmReleaseSpecPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Interval
	}).(pulumi.StringPtrOutput)
}

// KubeConfig for reconciling the HelmRelease on a remote cluster. When used in combination with HelmReleaseSpec.ServiceAccountName, forces the controller to act on behalf of that Service Account at the target cluster. If the --default-service-account flag is set, its value will be used as a controller level fallback for when HelmReleaseSpec.ServiceAccountName is empty.
func (o HelmReleaseSpecPtrOutput) KubeConfig() HelmReleaseSpecKubeconfigPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *HelmReleaseSpecKubeconfig {
		if v == nil {
			return nil
		}
		return v.KubeConfig
	}).(HelmReleaseSpecKubeconfigPtrOutput)
}

// MaxHistory is the number of revisions saved by Helm for this HelmRelease. Use '0' for an unlimited number of revisions; defaults to '10'.
func (o HelmReleaseSpecPtrOutput) MaxHistory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *int {
		if v == nil {
			return nil
		}
		return v.MaxHistory
	}).(pulumi.IntPtrOutput)
}

// PostRenderers holds an array of Helm PostRenderers, which will be applied in order of their definition.
func (o HelmReleaseSpecPtrOutput) PostRenderers() HelmReleaseSpecPostrenderersArrayOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) []HelmReleaseSpecPostrenderers {
		if v == nil {
			return nil
		}
		return v.PostRenderers
	}).(HelmReleaseSpecPostrenderersArrayOutput)
}

// ReleaseName used for the Helm release. Defaults to a composition of '[TargetNamespace-]Name'.
func (o HelmReleaseSpecPtrOutput) ReleaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *string {
		if v == nil {
			return nil
		}
		return v.ReleaseName
	}).(pulumi.StringPtrOutput)
}

// Rollback holds the configuration for Helm rollback actions for this HelmRelease.
func (o HelmReleaseSpecPtrOutput) Rollback() HelmReleaseSpecRollbackPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *HelmReleaseSpecRollback {
		if v == nil {
			return nil
		}
		return v.Rollback
	}).(HelmReleaseSpecRollbackPtrOutput)
}

// The name of the Kubernetes service account to impersonate when reconciling this HelmRelease.
func (o HelmReleaseSpecPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

// StorageNamespace used for the Helm storage. Defaults to the namespace of the HelmRelease.
func (o HelmReleaseSpecPtrOutput) StorageNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *string {
		if v == nil {
			return nil
		}
		return v.StorageNamespace
	}).(pulumi.StringPtrOutput)
}

// Suspend tells the controller to suspend reconciliation for this HelmRelease, it does not apply to already started reconciliations. Defaults to false.
func (o HelmReleaseSpecPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// TargetNamespace to target when performing operations for the HelmRelease. Defaults to the namespace of the HelmRelease.
func (o HelmReleaseSpecPtrOutput) TargetNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *string {
		if v == nil {
			return nil
		}
		return v.TargetNamespace
	}).(pulumi.StringPtrOutput)
}

// Test holds the configuration for Helm test actions for this HelmRelease.
func (o HelmReleaseSpecPtrOutput) Test() HelmReleaseSpecTestPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *HelmReleaseSpecTest {
		if v == nil {
			return nil
		}
		return v.Test
	}).(HelmReleaseSpecTestPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm action. Defaults to '5m0s'.
func (o HelmReleaseSpecPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Uninstall holds the configuration for Helm uninstall actions for this HelmRelease.
func (o HelmReleaseSpecPtrOutput) Uninstall() HelmReleaseSpecUninstallPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *HelmReleaseSpecUninstall {
		if v == nil {
			return nil
		}
		return v.Uninstall
	}).(HelmReleaseSpecUninstallPtrOutput)
}

// Upgrade holds the configuration for Helm upgrade actions for this HelmRelease.
func (o HelmReleaseSpecPtrOutput) Upgrade() HelmReleaseSpecUpgradePtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *HelmReleaseSpecUpgrade {
		if v == nil {
			return nil
		}
		return v.Upgrade
	}).(HelmReleaseSpecUpgradePtrOutput)
}

// Values holds the values for this Helm release.
func (o HelmReleaseSpecPtrOutput) Values() pulumi.MapOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.MapOutput)
}

// ValuesFrom holds references to resources containing Helm values for this HelmRelease, and information about how they should be merged.
func (o HelmReleaseSpecPtrOutput) ValuesFrom() HelmReleaseSpecValuesfromArrayOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) []HelmReleaseSpecValuesfrom {
		if v == nil {
			return nil
		}
		return v.ValuesFrom
	}).(HelmReleaseSpecValuesfromArrayOutput)
}

// Chart defines the template of the v1beta2.HelmChart that should be created for this HelmRelease.
type HelmReleaseSpecChart struct {
	// Spec holds the template for the v1beta2.HelmChartSpec for this HelmRelease.
	Spec HelmReleaseSpecChartSpec `pulumi:"spec"`
}

// Defaults sets the appropriate defaults for HelmReleaseSpecChart
func (val *HelmReleaseSpecChart) Defaults() *HelmReleaseSpecChart {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Spec = *tmp.Spec.Defaults()

	return &tmp
}

// HelmReleaseSpecChartInput is an input type that accepts HelmReleaseSpecChartArgs and HelmReleaseSpecChartOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartInput` via:
//
//          HelmReleaseSpecChartArgs{...}
type HelmReleaseSpecChartInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartOutput() HelmReleaseSpecChartOutput
	ToHelmReleaseSpecChartOutputWithContext(context.Context) HelmReleaseSpecChartOutput
}

// Chart defines the template of the v1beta2.HelmChart that should be created for this HelmRelease.
type HelmReleaseSpecChartArgs struct {
	// Spec holds the template for the v1beta2.HelmChartSpec for this HelmRelease.
	Spec HelmReleaseSpecChartSpecInput `pulumi:"spec"`
}

// Defaults sets the appropriate defaults for HelmReleaseSpecChartArgs
func (val *HelmReleaseSpecChartArgs) Defaults() *HelmReleaseSpecChartArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (HelmReleaseSpecChartArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChart)(nil)).Elem()
}

func (i HelmReleaseSpecChartArgs) ToHelmReleaseSpecChartOutput() HelmReleaseSpecChartOutput {
	return i.ToHelmReleaseSpecChartOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartArgs) ToHelmReleaseSpecChartOutputWithContext(ctx context.Context) HelmReleaseSpecChartOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartOutput)
}

func (i HelmReleaseSpecChartArgs) ToHelmReleaseSpecChartPtrOutput() HelmReleaseSpecChartPtrOutput {
	return i.ToHelmReleaseSpecChartPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartArgs) ToHelmReleaseSpecChartPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartOutput).ToHelmReleaseSpecChartPtrOutputWithContext(ctx)
}

// HelmReleaseSpecChartPtrInput is an input type that accepts HelmReleaseSpecChartArgs, HelmReleaseSpecChartPtr and HelmReleaseSpecChartPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartPtrInput` via:
//
//          HelmReleaseSpecChartArgs{...}
//
//  or:
//
//          nil
type HelmReleaseSpecChartPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartPtrOutput() HelmReleaseSpecChartPtrOutput
	ToHelmReleaseSpecChartPtrOutputWithContext(context.Context) HelmReleaseSpecChartPtrOutput
}

type helmReleaseSpecChartPtrType HelmReleaseSpecChartArgs

func HelmReleaseSpecChartPtr(v *HelmReleaseSpecChartArgs) HelmReleaseSpecChartPtrInput {
	return (*helmReleaseSpecChartPtrType)(v)
}

func (*helmReleaseSpecChartPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChart)(nil)).Elem()
}

func (i *helmReleaseSpecChartPtrType) ToHelmReleaseSpecChartPtrOutput() HelmReleaseSpecChartPtrOutput {
	return i.ToHelmReleaseSpecChartPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecChartPtrType) ToHelmReleaseSpecChartPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartPtrOutput)
}

// Chart defines the template of the v1beta2.HelmChart that should be created for this HelmRelease.
type HelmReleaseSpecChartOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChart)(nil)).Elem()
}

func (o HelmReleaseSpecChartOutput) ToHelmReleaseSpecChartOutput() HelmReleaseSpecChartOutput {
	return o
}

func (o HelmReleaseSpecChartOutput) ToHelmReleaseSpecChartOutputWithContext(ctx context.Context) HelmReleaseSpecChartOutput {
	return o
}

func (o HelmReleaseSpecChartOutput) ToHelmReleaseSpecChartPtrOutput() HelmReleaseSpecChartPtrOutput {
	return o.ToHelmReleaseSpecChartPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecChartOutput) ToHelmReleaseSpecChartPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecChart) *HelmReleaseSpecChart {
		return &v
	}).(HelmReleaseSpecChartPtrOutput)
}

// Spec holds the template for the v1beta2.HelmChartSpec for this HelmRelease.
func (o HelmReleaseSpecChartOutput) Spec() HelmReleaseSpecChartSpecOutput {
	return o.ApplyT(func(v HelmReleaseSpecChart) HelmReleaseSpecChartSpec { return v.Spec }).(HelmReleaseSpecChartSpecOutput)
}

type HelmReleaseSpecChartPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChart)(nil)).Elem()
}

func (o HelmReleaseSpecChartPtrOutput) ToHelmReleaseSpecChartPtrOutput() HelmReleaseSpecChartPtrOutput {
	return o
}

func (o HelmReleaseSpecChartPtrOutput) ToHelmReleaseSpecChartPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartPtrOutput {
	return o
}

func (o HelmReleaseSpecChartPtrOutput) Elem() HelmReleaseSpecChartOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChart) HelmReleaseSpecChart {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecChart
		return ret
	}).(HelmReleaseSpecChartOutput)
}

// Spec holds the template for the v1beta2.HelmChartSpec for this HelmRelease.
func (o HelmReleaseSpecChartPtrOutput) Spec() HelmReleaseSpecChartSpecPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChart) *HelmReleaseSpecChartSpec {
		if v == nil {
			return nil
		}
		return &v.Spec
	}).(HelmReleaseSpecChartSpecPtrOutput)
}

// Spec holds the template for the v1beta2.HelmChartSpec for this HelmRelease.
type HelmReleaseSpecChartSpec struct {
	// The name or path the Helm chart is available at in the SourceRef.
	Chart string `pulumi:"chart"`
	// Interval at which to check the v1beta2.Source for updates. Defaults to 'HelmReleaseSpec.Interval'.
	Interval *string `pulumi:"interval"`
	// Determines what enables the creation of a new artifact. Valid values are ('ChartVersion', 'Revision'). See the documentation of the values for an explanation on their behavior. Defaults to ChartVersion when omitted.
	ReconcileStrategy *string `pulumi:"reconcileStrategy"`
	// The name and namespace of the v1beta2.Source the chart is available at.
	SourceRef HelmReleaseSpecChartSpecSourceref `pulumi:"sourceRef"`
	// Alternative values file to use as the default chart values, expected to be a relative path in the SourceRef. Deprecated in favor of ValuesFiles, for backwards compatibility the file defined here is merged before the ValuesFiles items. Ignored when omitted.
	ValuesFile *string `pulumi:"valuesFile"`
	// Alternative list of values files to use as the chart values (values.yaml is not included by default), expected to be a relative path in the SourceRef. Values files are merged in the order of this list with the last file overriding the first. Ignored when omitted.
	ValuesFiles []string `pulumi:"valuesFiles"`
	// Version semver expression, ignored for charts from v1beta2.GitRepository and v1beta2.Bucket sources. Defaults to latest when omitted.
	Version *string `pulumi:"version"`
}

// Defaults sets the appropriate defaults for HelmReleaseSpecChartSpec
func (val *HelmReleaseSpecChartSpec) Defaults() *HelmReleaseSpecChartSpec {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.ReconcileStrategy) {
		reconcileStrategy_ := "ChartVersion"
		tmp.ReconcileStrategy = &reconcileStrategy_
	}
	if isZero(tmp.Version) {
		version_ := "*"
		tmp.Version = &version_
	}
	return &tmp
}

// HelmReleaseSpecChartSpecInput is an input type that accepts HelmReleaseSpecChartSpecArgs and HelmReleaseSpecChartSpecOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartSpecInput` via:
//
//          HelmReleaseSpecChartSpecArgs{...}
type HelmReleaseSpecChartSpecInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartSpecOutput() HelmReleaseSpecChartSpecOutput
	ToHelmReleaseSpecChartSpecOutputWithContext(context.Context) HelmReleaseSpecChartSpecOutput
}

// Spec holds the template for the v1beta2.HelmChartSpec for this HelmRelease.
type HelmReleaseSpecChartSpecArgs struct {
	// The name or path the Helm chart is available at in the SourceRef.
	Chart pulumi.StringInput `pulumi:"chart"`
	// Interval at which to check the v1beta2.Source for updates. Defaults to 'HelmReleaseSpec.Interval'.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// Determines what enables the creation of a new artifact. Valid values are ('ChartVersion', 'Revision'). See the documentation of the values for an explanation on their behavior. Defaults to ChartVersion when omitted.
	ReconcileStrategy pulumi.StringPtrInput `pulumi:"reconcileStrategy"`
	// The name and namespace of the v1beta2.Source the chart is available at.
	SourceRef HelmReleaseSpecChartSpecSourcerefInput `pulumi:"sourceRef"`
	// Alternative values file to use as the default chart values, expected to be a relative path in the SourceRef. Deprecated in favor of ValuesFiles, for backwards compatibility the file defined here is merged before the ValuesFiles items. Ignored when omitted.
	ValuesFile pulumi.StringPtrInput `pulumi:"valuesFile"`
	// Alternative list of values files to use as the chart values (values.yaml is not included by default), expected to be a relative path in the SourceRef. Values files are merged in the order of this list with the last file overriding the first. Ignored when omitted.
	ValuesFiles pulumi.StringArrayInput `pulumi:"valuesFiles"`
	// Version semver expression, ignored for charts from v1beta2.GitRepository and v1beta2.Bucket sources. Defaults to latest when omitted.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

// Defaults sets the appropriate defaults for HelmReleaseSpecChartSpecArgs
func (val *HelmReleaseSpecChartSpecArgs) Defaults() *HelmReleaseSpecChartSpecArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.ReconcileStrategy) {
		tmp.ReconcileStrategy = pulumi.StringPtr("ChartVersion")
	}
	if isZero(tmp.Version) {
		tmp.Version = pulumi.StringPtr("*")
	}
	return &tmp
}
func (HelmReleaseSpecChartSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartSpec)(nil)).Elem()
}

func (i HelmReleaseSpecChartSpecArgs) ToHelmReleaseSpecChartSpecOutput() HelmReleaseSpecChartSpecOutput {
	return i.ToHelmReleaseSpecChartSpecOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartSpecArgs) ToHelmReleaseSpecChartSpecOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecOutput)
}

func (i HelmReleaseSpecChartSpecArgs) ToHelmReleaseSpecChartSpecPtrOutput() HelmReleaseSpecChartSpecPtrOutput {
	return i.ToHelmReleaseSpecChartSpecPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartSpecArgs) ToHelmReleaseSpecChartSpecPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecOutput).ToHelmReleaseSpecChartSpecPtrOutputWithContext(ctx)
}

// HelmReleaseSpecChartSpecPtrInput is an input type that accepts HelmReleaseSpecChartSpecArgs, HelmReleaseSpecChartSpecPtr and HelmReleaseSpecChartSpecPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartSpecPtrInput` via:
//
//          HelmReleaseSpecChartSpecArgs{...}
//
//  or:
//
//          nil
type HelmReleaseSpecChartSpecPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartSpecPtrOutput() HelmReleaseSpecChartSpecPtrOutput
	ToHelmReleaseSpecChartSpecPtrOutputWithContext(context.Context) HelmReleaseSpecChartSpecPtrOutput
}

type helmReleaseSpecChartSpecPtrType HelmReleaseSpecChartSpecArgs

func HelmReleaseSpecChartSpecPtr(v *HelmReleaseSpecChartSpecArgs) HelmReleaseSpecChartSpecPtrInput {
	return (*helmReleaseSpecChartSpecPtrType)(v)
}

func (*helmReleaseSpecChartSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartSpec)(nil)).Elem()
}

func (i *helmReleaseSpecChartSpecPtrType) ToHelmReleaseSpecChartSpecPtrOutput() HelmReleaseSpecChartSpecPtrOutput {
	return i.ToHelmReleaseSpecChartSpecPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecChartSpecPtrType) ToHelmReleaseSpecChartSpecPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecPtrOutput)
}

// Spec holds the template for the v1beta2.HelmChartSpec for this HelmRelease.
type HelmReleaseSpecChartSpecOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartSpec)(nil)).Elem()
}

func (o HelmReleaseSpecChartSpecOutput) ToHelmReleaseSpecChartSpecOutput() HelmReleaseSpecChartSpecOutput {
	return o
}

func (o HelmReleaseSpecChartSpecOutput) ToHelmReleaseSpecChartSpecOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecOutput {
	return o
}

func (o HelmReleaseSpecChartSpecOutput) ToHelmReleaseSpecChartSpecPtrOutput() HelmReleaseSpecChartSpecPtrOutput {
	return o.ToHelmReleaseSpecChartSpecPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecChartSpecOutput) ToHelmReleaseSpecChartSpecPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecChartSpec) *HelmReleaseSpecChartSpec {
		return &v
	}).(HelmReleaseSpecChartSpecPtrOutput)
}

// The name or path the Helm chart is available at in the SourceRef.
func (o HelmReleaseSpecChartSpecOutput) Chart() pulumi.StringOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpec) string { return v.Chart }).(pulumi.StringOutput)
}

// Interval at which to check the v1beta2.Source for updates. Defaults to 'HelmReleaseSpec.Interval'.
func (o HelmReleaseSpecChartSpecOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpec) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// Determines what enables the creation of a new artifact. Valid values are ('ChartVersion', 'Revision'). See the documentation of the values for an explanation on their behavior. Defaults to ChartVersion when omitted.
func (o HelmReleaseSpecChartSpecOutput) ReconcileStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpec) *string { return v.ReconcileStrategy }).(pulumi.StringPtrOutput)
}

// The name and namespace of the v1beta2.Source the chart is available at.
func (o HelmReleaseSpecChartSpecOutput) SourceRef() HelmReleaseSpecChartSpecSourcerefOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpec) HelmReleaseSpecChartSpecSourceref { return v.SourceRef }).(HelmReleaseSpecChartSpecSourcerefOutput)
}

// Alternative values file to use as the default chart values, expected to be a relative path in the SourceRef. Deprecated in favor of ValuesFiles, for backwards compatibility the file defined here is merged before the ValuesFiles items. Ignored when omitted.
func (o HelmReleaseSpecChartSpecOutput) ValuesFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpec) *string { return v.ValuesFile }).(pulumi.StringPtrOutput)
}

// Alternative list of values files to use as the chart values (values.yaml is not included by default), expected to be a relative path in the SourceRef. Values files are merged in the order of this list with the last file overriding the first. Ignored when omitted.
func (o HelmReleaseSpecChartSpecOutput) ValuesFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpec) []string { return v.ValuesFiles }).(pulumi.StringArrayOutput)
}

// Version semver expression, ignored for charts from v1beta2.GitRepository and v1beta2.Bucket sources. Defaults to latest when omitted.
func (o HelmReleaseSpecChartSpecOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpec) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecChartSpecPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartSpec)(nil)).Elem()
}

func (o HelmReleaseSpecChartSpecPtrOutput) ToHelmReleaseSpecChartSpecPtrOutput() HelmReleaseSpecChartSpecPtrOutput {
	return o
}

func (o HelmReleaseSpecChartSpecPtrOutput) ToHelmReleaseSpecChartSpecPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecPtrOutput {
	return o
}

func (o HelmReleaseSpecChartSpecPtrOutput) Elem() HelmReleaseSpecChartSpecOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpec) HelmReleaseSpecChartSpec {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecChartSpec
		return ret
	}).(HelmReleaseSpecChartSpecOutput)
}

// The name or path the Helm chart is available at in the SourceRef.
func (o HelmReleaseSpecChartSpecPtrOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Chart
	}).(pulumi.StringPtrOutput)
}

// Interval at which to check the v1beta2.Source for updates. Defaults to 'HelmReleaseSpec.Interval'.
func (o HelmReleaseSpecChartSpecPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpec) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Determines what enables the creation of a new artifact. Valid values are ('ChartVersion', 'Revision'). See the documentation of the values for an explanation on their behavior. Defaults to ChartVersion when omitted.
func (o HelmReleaseSpecChartSpecPtrOutput) ReconcileStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpec) *string {
		if v == nil {
			return nil
		}
		return v.ReconcileStrategy
	}).(pulumi.StringPtrOutput)
}

// The name and namespace of the v1beta2.Source the chart is available at.
func (o HelmReleaseSpecChartSpecPtrOutput) SourceRef() HelmReleaseSpecChartSpecSourcerefPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpec) *HelmReleaseSpecChartSpecSourceref {
		if v == nil {
			return nil
		}
		return &v.SourceRef
	}).(HelmReleaseSpecChartSpecSourcerefPtrOutput)
}

// Alternative values file to use as the default chart values, expected to be a relative path in the SourceRef. Deprecated in favor of ValuesFiles, for backwards compatibility the file defined here is merged before the ValuesFiles items. Ignored when omitted.
func (o HelmReleaseSpecChartSpecPtrOutput) ValuesFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpec) *string {
		if v == nil {
			return nil
		}
		return v.ValuesFile
	}).(pulumi.StringPtrOutput)
}

// Alternative list of values files to use as the chart values (values.yaml is not included by default), expected to be a relative path in the SourceRef. Values files are merged in the order of this list with the last file overriding the first. Ignored when omitted.
func (o HelmReleaseSpecChartSpecPtrOutput) ValuesFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpec) []string {
		if v == nil {
			return nil
		}
		return v.ValuesFiles
	}).(pulumi.StringArrayOutput)
}

// Version semver expression, ignored for charts from v1beta2.GitRepository and v1beta2.Bucket sources. Defaults to latest when omitted.
func (o HelmReleaseSpecChartSpecPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpec) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// The name and namespace of the v1beta2.Source the chart is available at.
type HelmReleaseSpecChartSpecSourceref struct {
	// APIVersion of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind of the referent.
	Kind *string `pulumi:"kind"`
	// Name of the referent.
	Name string `pulumi:"name"`
	// Namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// HelmReleaseSpecChartSpecSourcerefInput is an input type that accepts HelmReleaseSpecChartSpecSourcerefArgs and HelmReleaseSpecChartSpecSourcerefOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartSpecSourcerefInput` via:
//
//          HelmReleaseSpecChartSpecSourcerefArgs{...}
type HelmReleaseSpecChartSpecSourcerefInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartSpecSourcerefOutput() HelmReleaseSpecChartSpecSourcerefOutput
	ToHelmReleaseSpecChartSpecSourcerefOutputWithContext(context.Context) HelmReleaseSpecChartSpecSourcerefOutput
}

// The name and namespace of the v1beta2.Source the chart is available at.
type HelmReleaseSpecChartSpecSourcerefArgs struct {
	// APIVersion of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind of the referent.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent.
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (HelmReleaseSpecChartSpecSourcerefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartSpecSourceref)(nil)).Elem()
}

func (i HelmReleaseSpecChartSpecSourcerefArgs) ToHelmReleaseSpecChartSpecSourcerefOutput() HelmReleaseSpecChartSpecSourcerefOutput {
	return i.ToHelmReleaseSpecChartSpecSourcerefOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartSpecSourcerefArgs) ToHelmReleaseSpecChartSpecSourcerefOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecSourcerefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecSourcerefOutput)
}

func (i HelmReleaseSpecChartSpecSourcerefArgs) ToHelmReleaseSpecChartSpecSourcerefPtrOutput() HelmReleaseSpecChartSpecSourcerefPtrOutput {
	return i.ToHelmReleaseSpecChartSpecSourcerefPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartSpecSourcerefArgs) ToHelmReleaseSpecChartSpecSourcerefPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecSourcerefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecSourcerefOutput).ToHelmReleaseSpecChartSpecSourcerefPtrOutputWithContext(ctx)
}

// HelmReleaseSpecChartSpecSourcerefPtrInput is an input type that accepts HelmReleaseSpecChartSpecSourcerefArgs, HelmReleaseSpecChartSpecSourcerefPtr and HelmReleaseSpecChartSpecSourcerefPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartSpecSourcerefPtrInput` via:
//
//          HelmReleaseSpecChartSpecSourcerefArgs{...}
//
//  or:
//
//          nil
type HelmReleaseSpecChartSpecSourcerefPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartSpecSourcerefPtrOutput() HelmReleaseSpecChartSpecSourcerefPtrOutput
	ToHelmReleaseSpecChartSpecSourcerefPtrOutputWithContext(context.Context) HelmReleaseSpecChartSpecSourcerefPtrOutput
}

type helmReleaseSpecChartSpecSourcerefPtrType HelmReleaseSpecChartSpecSourcerefArgs

func HelmReleaseSpecChartSpecSourcerefPtr(v *HelmReleaseSpecChartSpecSourcerefArgs) HelmReleaseSpecChartSpecSourcerefPtrInput {
	return (*helmReleaseSpecChartSpecSourcerefPtrType)(v)
}

func (*helmReleaseSpecChartSpecSourcerefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartSpecSourceref)(nil)).Elem()
}

func (i *helmReleaseSpecChartSpecSourcerefPtrType) ToHelmReleaseSpecChartSpecSourcerefPtrOutput() HelmReleaseSpecChartSpecSourcerefPtrOutput {
	return i.ToHelmReleaseSpecChartSpecSourcerefPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecChartSpecSourcerefPtrType) ToHelmReleaseSpecChartSpecSourcerefPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecSourcerefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecSourcerefPtrOutput)
}

// The name and namespace of the v1beta2.Source the chart is available at.
type HelmReleaseSpecChartSpecSourcerefOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartSpecSourcerefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartSpecSourceref)(nil)).Elem()
}

func (o HelmReleaseSpecChartSpecSourcerefOutput) ToHelmReleaseSpecChartSpecSourcerefOutput() HelmReleaseSpecChartSpecSourcerefOutput {
	return o
}

func (o HelmReleaseSpecChartSpecSourcerefOutput) ToHelmReleaseSpecChartSpecSourcerefOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecSourcerefOutput {
	return o
}

func (o HelmReleaseSpecChartSpecSourcerefOutput) ToHelmReleaseSpecChartSpecSourcerefPtrOutput() HelmReleaseSpecChartSpecSourcerefPtrOutput {
	return o.ToHelmReleaseSpecChartSpecSourcerefPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecChartSpecSourcerefOutput) ToHelmReleaseSpecChartSpecSourcerefPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecSourcerefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecChartSpecSourceref) *HelmReleaseSpecChartSpecSourceref {
		return &v
	}).(HelmReleaseSpecChartSpecSourcerefPtrOutput)
}

// APIVersion of the referent.
func (o HelmReleaseSpecChartSpecSourcerefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpecSourceref) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind of the referent.
func (o HelmReleaseSpecChartSpecSourcerefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpecSourceref) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent.
func (o HelmReleaseSpecChartSpecSourcerefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpecSourceref) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace of the referent.
func (o HelmReleaseSpecChartSpecSourcerefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpecSourceref) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecChartSpecSourcerefPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartSpecSourcerefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartSpecSourceref)(nil)).Elem()
}

func (o HelmReleaseSpecChartSpecSourcerefPtrOutput) ToHelmReleaseSpecChartSpecSourcerefPtrOutput() HelmReleaseSpecChartSpecSourcerefPtrOutput {
	return o
}

func (o HelmReleaseSpecChartSpecSourcerefPtrOutput) ToHelmReleaseSpecChartSpecSourcerefPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecSourcerefPtrOutput {
	return o
}

func (o HelmReleaseSpecChartSpecSourcerefPtrOutput) Elem() HelmReleaseSpecChartSpecSourcerefOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecSourceref) HelmReleaseSpecChartSpecSourceref {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecChartSpecSourceref
		return ret
	}).(HelmReleaseSpecChartSpecSourcerefOutput)
}

// APIVersion of the referent.
func (o HelmReleaseSpecChartSpecSourcerefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecSourceref) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent.
func (o HelmReleaseSpecChartSpecSourcerefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecSourceref) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
func (o HelmReleaseSpecChartSpecSourcerefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecSourceref) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent.
func (o HelmReleaseSpecChartSpecSourcerefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecSourceref) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// NamespacedObjectReference contains enough information to locate the referenced Kubernetes resource object in any namespace.
type HelmReleaseSpecDependson struct {
	// Name of the referent.
	Name string `pulumi:"name"`
	// Namespace of the referent, when not specified it acts as LocalObjectReference.
	Namespace *string `pulumi:"namespace"`
}

// HelmReleaseSpecDependsonInput is an input type that accepts HelmReleaseSpecDependsonArgs and HelmReleaseSpecDependsonOutput values.
// You can construct a concrete instance of `HelmReleaseSpecDependsonInput` via:
//
//          HelmReleaseSpecDependsonArgs{...}
type HelmReleaseSpecDependsonInput interface {
	pulumi.Input

	ToHelmReleaseSpecDependsonOutput() HelmReleaseSpecDependsonOutput
	ToHelmReleaseSpecDependsonOutputWithContext(context.Context) HelmReleaseSpecDependsonOutput
}

// NamespacedObjectReference contains enough information to locate the referenced Kubernetes resource object in any namespace.
type HelmReleaseSpecDependsonArgs struct {
	// Name of the referent.
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace of the referent, when not specified it acts as LocalObjectReference.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (HelmReleaseSpecDependsonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecDependson)(nil)).Elem()
}

func (i HelmReleaseSpecDependsonArgs) ToHelmReleaseSpecDependsonOutput() HelmReleaseSpecDependsonOutput {
	return i.ToHelmReleaseSpecDependsonOutputWithContext(context.Background())
}

func (i HelmReleaseSpecDependsonArgs) ToHelmReleaseSpecDependsonOutputWithContext(ctx context.Context) HelmReleaseSpecDependsonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecDependsonOutput)
}

// HelmReleaseSpecDependsonArrayInput is an input type that accepts HelmReleaseSpecDependsonArray and HelmReleaseSpecDependsonArrayOutput values.
// You can construct a concrete instance of `HelmReleaseSpecDependsonArrayInput` via:
//
//          HelmReleaseSpecDependsonArray{ HelmReleaseSpecDependsonArgs{...} }
type HelmReleaseSpecDependsonArrayInput interface {
	pulumi.Input

	ToHelmReleaseSpecDependsonArrayOutput() HelmReleaseSpecDependsonArrayOutput
	ToHelmReleaseSpecDependsonArrayOutputWithContext(context.Context) HelmReleaseSpecDependsonArrayOutput
}

type HelmReleaseSpecDependsonArray []HelmReleaseSpecDependsonInput

func (HelmReleaseSpecDependsonArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecDependson)(nil)).Elem()
}

func (i HelmReleaseSpecDependsonArray) ToHelmReleaseSpecDependsonArrayOutput() HelmReleaseSpecDependsonArrayOutput {
	return i.ToHelmReleaseSpecDependsonArrayOutputWithContext(context.Background())
}

func (i HelmReleaseSpecDependsonArray) ToHelmReleaseSpecDependsonArrayOutputWithContext(ctx context.Context) HelmReleaseSpecDependsonArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecDependsonArrayOutput)
}

// NamespacedObjectReference contains enough information to locate the referenced Kubernetes resource object in any namespace.
type HelmReleaseSpecDependsonOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecDependsonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecDependson)(nil)).Elem()
}

func (o HelmReleaseSpecDependsonOutput) ToHelmReleaseSpecDependsonOutput() HelmReleaseSpecDependsonOutput {
	return o
}

func (o HelmReleaseSpecDependsonOutput) ToHelmReleaseSpecDependsonOutputWithContext(ctx context.Context) HelmReleaseSpecDependsonOutput {
	return o
}

// Name of the referent.
func (o HelmReleaseSpecDependsonOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HelmReleaseSpecDependson) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace of the referent, when not specified it acts as LocalObjectReference.
func (o HelmReleaseSpecDependsonOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecDependson) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecDependsonArrayOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecDependsonArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecDependson)(nil)).Elem()
}

func (o HelmReleaseSpecDependsonArrayOutput) ToHelmReleaseSpecDependsonArrayOutput() HelmReleaseSpecDependsonArrayOutput {
	return o
}

func (o HelmReleaseSpecDependsonArrayOutput) ToHelmReleaseSpecDependsonArrayOutputWithContext(ctx context.Context) HelmReleaseSpecDependsonArrayOutput {
	return o
}

func (o HelmReleaseSpecDependsonArrayOutput) Index(i pulumi.IntInput) HelmReleaseSpecDependsonOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmReleaseSpecDependson {
		return vs[0].([]HelmReleaseSpecDependson)[vs[1].(int)]
	}).(HelmReleaseSpecDependsonOutput)
}

// Install holds the configuration for Helm install actions for this HelmRelease.
type HelmReleaseSpecInstall struct {
	// CRDs upgrade CRDs from the Helm Chart's crds directory according to the CRD upgrade policy provided here. Valid values are `Skip`, `Create` or `CreateReplace`. Default is `Create` and if omitted CRDs are installed but not updated.
	//  Skip: do neither install nor replace (update) any CRDs.
	//  Create: new CRDs are created, existing CRDs are neither updated nor deleted.
	//  CreateReplace: new CRDs are created, existing CRDs are updated (replaced) but not deleted.
	//  By default, CRDs are applied (installed) during Helm install action. With this option users can opt-in to CRD replace existing CRDs on Helm install actions, which is not (yet) natively supported by Helm. https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
	Crds *string `pulumi:"crds"`
	// CreateNamespace tells the Helm install action to create the HelmReleaseSpec.TargetNamespace if it does not exist yet. On uninstall, the namespace will not be garbage collected.
	CreateNamespace *bool `pulumi:"createNamespace"`
	// DisableHooks prevents hooks from running during the Helm install action.
	DisableHooks *bool `pulumi:"disableHooks"`
	// DisableOpenAPIValidation prevents the Helm install action from validating rendered templates against the Kubernetes OpenAPI Schema.
	DisableOpenAPIValidation *bool `pulumi:"disableOpenAPIValidation"`
	// DisableWait disables the waiting for resources to be ready after a Helm install has been performed.
	DisableWait *bool `pulumi:"disableWait"`
	// DisableWaitForJobs disables waiting for jobs to complete after a Helm install has been performed.
	DisableWaitForJobs *bool `pulumi:"disableWaitForJobs"`
	// Remediation holds the remediation configuration for when the Helm install action for the HelmRelease fails. The default is to not perform any action.
	Remediation *HelmReleaseSpecInstallRemediation `pulumi:"remediation"`
	// Replace tells the Helm install action to re-use the 'ReleaseName', but only if that name is a deleted release which remains in the history.
	Replace *bool `pulumi:"replace"`
	// SkipCRDs tells the Helm install action to not install any CRDs. By default, CRDs are installed if not already present.
	//  Deprecated use CRD policy (`crds`) attribute with value `Skip` instead.
	SkipCRDs *bool `pulumi:"skipCRDs"`
	// Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm install action. Defaults to 'HelmReleaseSpec.Timeout'.
	Timeout *string `pulumi:"timeout"`
}

// HelmReleaseSpecInstallInput is an input type that accepts HelmReleaseSpecInstallArgs and HelmReleaseSpecInstallOutput values.
// You can construct a concrete instance of `HelmReleaseSpecInstallInput` via:
//
//          HelmReleaseSpecInstallArgs{...}
type HelmReleaseSpecInstallInput interface {
	pulumi.Input

	ToHelmReleaseSpecInstallOutput() HelmReleaseSpecInstallOutput
	ToHelmReleaseSpecInstallOutputWithContext(context.Context) HelmReleaseSpecInstallOutput
}

// Install holds the configuration for Helm install actions for this HelmRelease.
type HelmReleaseSpecInstallArgs struct {
	// CRDs upgrade CRDs from the Helm Chart's crds directory according to the CRD upgrade policy provided here. Valid values are `Skip`, `Create` or `CreateReplace`. Default is `Create` and if omitted CRDs are installed but not updated.
	//  Skip: do neither install nor replace (update) any CRDs.
	//  Create: new CRDs are created, existing CRDs are neither updated nor deleted.
	//  CreateReplace: new CRDs are created, existing CRDs are updated (replaced) but not deleted.
	//  By default, CRDs are applied (installed) during Helm install action. With this option users can opt-in to CRD replace existing CRDs on Helm install actions, which is not (yet) natively supported by Helm. https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
	Crds pulumi.StringPtrInput `pulumi:"crds"`
	// CreateNamespace tells the Helm install action to create the HelmReleaseSpec.TargetNamespace if it does not exist yet. On uninstall, the namespace will not be garbage collected.
	CreateNamespace pulumi.BoolPtrInput `pulumi:"createNamespace"`
	// DisableHooks prevents hooks from running during the Helm install action.
	DisableHooks pulumi.BoolPtrInput `pulumi:"disableHooks"`
	// DisableOpenAPIValidation prevents the Helm install action from validating rendered templates against the Kubernetes OpenAPI Schema.
	DisableOpenAPIValidation pulumi.BoolPtrInput `pulumi:"disableOpenAPIValidation"`
	// DisableWait disables the waiting for resources to be ready after a Helm install has been performed.
	DisableWait pulumi.BoolPtrInput `pulumi:"disableWait"`
	// DisableWaitForJobs disables waiting for jobs to complete after a Helm install has been performed.
	DisableWaitForJobs pulumi.BoolPtrInput `pulumi:"disableWaitForJobs"`
	// Remediation holds the remediation configuration for when the Helm install action for the HelmRelease fails. The default is to not perform any action.
	Remediation HelmReleaseSpecInstallRemediationPtrInput `pulumi:"remediation"`
	// Replace tells the Helm install action to re-use the 'ReleaseName', but only if that name is a deleted release which remains in the history.
	Replace pulumi.BoolPtrInput `pulumi:"replace"`
	// SkipCRDs tells the Helm install action to not install any CRDs. By default, CRDs are installed if not already present.
	//  Deprecated use CRD policy (`crds`) attribute with value `Skip` instead.
	SkipCRDs pulumi.BoolPtrInput `pulumi:"skipCRDs"`
	// Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm install action. Defaults to 'HelmReleaseSpec.Timeout'.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (HelmReleaseSpecInstallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecInstall)(nil)).Elem()
}

func (i HelmReleaseSpecInstallArgs) ToHelmReleaseSpecInstallOutput() HelmReleaseSpecInstallOutput {
	return i.ToHelmReleaseSpecInstallOutputWithContext(context.Background())
}

func (i HelmReleaseSpecInstallArgs) ToHelmReleaseSpecInstallOutputWithContext(ctx context.Context) HelmReleaseSpecInstallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecInstallOutput)
}

func (i HelmReleaseSpecInstallArgs) ToHelmReleaseSpecInstallPtrOutput() HelmReleaseSpecInstallPtrOutput {
	return i.ToHelmReleaseSpecInstallPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecInstallArgs) ToHelmReleaseSpecInstallPtrOutputWithContext(ctx context.Context) HelmReleaseSpecInstallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecInstallOutput).ToHelmReleaseSpecInstallPtrOutputWithContext(ctx)
}

// HelmReleaseSpecInstallPtrInput is an input type that accepts HelmReleaseSpecInstallArgs, HelmReleaseSpecInstallPtr and HelmReleaseSpecInstallPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecInstallPtrInput` via:
//
//          HelmReleaseSpecInstallArgs{...}
//
//  or:
//
//          nil
type HelmReleaseSpecInstallPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecInstallPtrOutput() HelmReleaseSpecInstallPtrOutput
	ToHelmReleaseSpecInstallPtrOutputWithContext(context.Context) HelmReleaseSpecInstallPtrOutput
}

type helmReleaseSpecInstallPtrType HelmReleaseSpecInstallArgs

func HelmReleaseSpecInstallPtr(v *HelmReleaseSpecInstallArgs) HelmReleaseSpecInstallPtrInput {
	return (*helmReleaseSpecInstallPtrType)(v)
}

func (*helmReleaseSpecInstallPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecInstall)(nil)).Elem()
}

func (i *helmReleaseSpecInstallPtrType) ToHelmReleaseSpecInstallPtrOutput() HelmReleaseSpecInstallPtrOutput {
	return i.ToHelmReleaseSpecInstallPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecInstallPtrType) ToHelmReleaseSpecInstallPtrOutputWithContext(ctx context.Context) HelmReleaseSpecInstallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecInstallPtrOutput)
}

// Install holds the configuration for Helm install actions for this HelmRelease.
type HelmReleaseSpecInstallOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecInstallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecInstall)(nil)).Elem()
}

func (o HelmReleaseSpecInstallOutput) ToHelmReleaseSpecInstallOutput() HelmReleaseSpecInstallOutput {
	return o
}

func (o HelmReleaseSpecInstallOutput) ToHelmReleaseSpecInstallOutputWithContext(ctx context.Context) HelmReleaseSpecInstallOutput {
	return o
}

func (o HelmReleaseSpecInstallOutput) ToHelmReleaseSpecInstallPtrOutput() HelmReleaseSpecInstallPtrOutput {
	return o.ToHelmReleaseSpecInstallPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecInstallOutput) ToHelmReleaseSpecInstallPtrOutputWithContext(ctx context.Context) HelmReleaseSpecInstallPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecInstall) *HelmReleaseSpecInstall {
		return &v
	}).(HelmReleaseSpecInstallPtrOutput)
}

// CRDs upgrade CRDs from the Helm Chart's crds directory according to the CRD upgrade policy provided here. Valid values are `Skip`, `Create` or `CreateReplace`. Default is `Create` and if omitted CRDs are installed but not updated.
//  Skip: do neither install nor replace (update) any CRDs.
//  Create: new CRDs are created, existing CRDs are neither updated nor deleted.
//  CreateReplace: new CRDs are created, existing CRDs are updated (replaced) but not deleted.
//  By default, CRDs are applied (installed) during Helm install action. With this option users can opt-in to CRD replace existing CRDs on Helm install actions, which is not (yet) natively supported by Helm. https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
func (o HelmReleaseSpecInstallOutput) Crds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstall) *string { return v.Crds }).(pulumi.StringPtrOutput)
}

// CreateNamespace tells the Helm install action to create the HelmReleaseSpec.TargetNamespace if it does not exist yet. On uninstall, the namespace will not be garbage collected.
func (o HelmReleaseSpecInstallOutput) CreateNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstall) *bool { return v.CreateNamespace }).(pulumi.BoolPtrOutput)
}

// DisableHooks prevents hooks from running during the Helm install action.
func (o HelmReleaseSpecInstallOutput) DisableHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstall) *bool { return v.DisableHooks }).(pulumi.BoolPtrOutput)
}

// DisableOpenAPIValidation prevents the Helm install action from validating rendered templates against the Kubernetes OpenAPI Schema.
func (o HelmReleaseSpecInstallOutput) DisableOpenAPIValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstall) *bool { return v.DisableOpenAPIValidation }).(pulumi.BoolPtrOutput)
}

// DisableWait disables the waiting for resources to be ready after a Helm install has been performed.
func (o HelmReleaseSpecInstallOutput) DisableWait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstall) *bool { return v.DisableWait }).(pulumi.BoolPtrOutput)
}

// DisableWaitForJobs disables waiting for jobs to complete after a Helm install has been performed.
func (o HelmReleaseSpecInstallOutput) DisableWaitForJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstall) *bool { return v.DisableWaitForJobs }).(pulumi.BoolPtrOutput)
}

// Remediation holds the remediation configuration for when the Helm install action for the HelmRelease fails. The default is to not perform any action.
func (o HelmReleaseSpecInstallOutput) Remediation() HelmReleaseSpecInstallRemediationPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstall) *HelmReleaseSpecInstallRemediation { return v.Remediation }).(HelmReleaseSpecInstallRemediationPtrOutput)
}

// Replace tells the Helm install action to re-use the 'ReleaseName', but only if that name is a deleted release which remains in the history.
func (o HelmReleaseSpecInstallOutput) Replace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstall) *bool { return v.Replace }).(pulumi.BoolPtrOutput)
}

// SkipCRDs tells the Helm install action to not install any CRDs. By default, CRDs are installed if not already present.
//  Deprecated use CRD policy (`crds`) attribute with value `Skip` instead.
func (o HelmReleaseSpecInstallOutput) SkipCRDs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstall) *bool { return v.SkipCRDs }).(pulumi.BoolPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm install action. Defaults to 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecInstallOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstall) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecInstallPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecInstallPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecInstall)(nil)).Elem()
}

func (o HelmReleaseSpecInstallPtrOutput) ToHelmReleaseSpecInstallPtrOutput() HelmReleaseSpecInstallPtrOutput {
	return o
}

func (o HelmReleaseSpecInstallPtrOutput) ToHelmReleaseSpecInstallPtrOutputWithContext(ctx context.Context) HelmReleaseSpecInstallPtrOutput {
	return o
}

func (o HelmReleaseSpecInstallPtrOutput) Elem() HelmReleaseSpecInstallOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstall) HelmReleaseSpecInstall {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecInstall
		return ret
	}).(HelmReleaseSpecInstallOutput)
}

// CRDs upgrade CRDs from the Helm Chart's crds directory according to the CRD upgrade policy provided here. Valid values are `Skip`, `Create` or `CreateReplace`. Default is `Create` and if omitted CRDs are installed but not updated.
//  Skip: do neither install nor replace (update) any CRDs.
//  Create: new CRDs are created, existing CRDs are neither updated nor deleted.
//  CreateReplace: new CRDs are created, existing CRDs are updated (replaced) but not deleted.
//  By default, CRDs are applied (installed) during Helm install action. With this option users can opt-in to CRD replace existing CRDs on Helm install actions, which is not (yet) natively supported by Helm. https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
func (o HelmReleaseSpecInstallPtrOutput) Crds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstall) *string {
		if v == nil {
			return nil
		}
		return v.Crds
	}).(pulumi.StringPtrOutput)
}

// CreateNamespace tells the Helm install action to create the HelmReleaseSpec.TargetNamespace if it does not exist yet. On uninstall, the namespace will not be garbage collected.
func (o HelmReleaseSpecInstallPtrOutput) CreateNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstall) *bool {
		if v == nil {
			return nil
		}
		return v.CreateNamespace
	}).(pulumi.BoolPtrOutput)
}

// DisableHooks prevents hooks from running during the Helm install action.
func (o HelmReleaseSpecInstallPtrOutput) DisableHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstall) *bool {
		if v == nil {
			return nil
		}
		return v.DisableHooks
	}).(pulumi.BoolPtrOutput)
}

// DisableOpenAPIValidation prevents the Helm install action from validating rendered templates against the Kubernetes OpenAPI Schema.
func (o HelmReleaseSpecInstallPtrOutput) DisableOpenAPIValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstall) *bool {
		if v == nil {
			return nil
		}
		return v.DisableOpenAPIValidation
	}).(pulumi.BoolPtrOutput)
}

// DisableWait disables the waiting for resources to be ready after a Helm install has been performed.
func (o HelmReleaseSpecInstallPtrOutput) DisableWait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstall) *bool {
		if v == nil {
			return nil
		}
		return v.DisableWait
	}).(pulumi.BoolPtrOutput)
}

// DisableWaitForJobs disables waiting for jobs to complete after a Helm install has been performed.
func (o HelmReleaseSpecInstallPtrOutput) DisableWaitForJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstall) *bool {
		if v == nil {
			return nil
		}
		return v.DisableWaitForJobs
	}).(pulumi.BoolPtrOutput)
}

// Remediation holds the remediation configuration for when the Helm install action for the HelmRelease fails. The default is to not perform any action.
func (o HelmReleaseSpecInstallPtrOutput) Remediation() HelmReleaseSpecInstallRemediationPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstall) *HelmReleaseSpecInstallRemediation {
		if v == nil {
			return nil
		}
		return v.Remediation
	}).(HelmReleaseSpecInstallRemediationPtrOutput)
}

// Replace tells the Helm install action to re-use the 'ReleaseName', but only if that name is a deleted release which remains in the history.
func (o HelmReleaseSpecInstallPtrOutput) Replace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstall) *bool {
		if v == nil {
			return nil
		}
		return v.Replace
	}).(pulumi.BoolPtrOutput)
}

// SkipCRDs tells the Helm install action to not install any CRDs. By default, CRDs are installed if not already present.
//  Deprecated use CRD policy (`crds`) attribute with value `Skip` instead.
func (o HelmReleaseSpecInstallPtrOutput) SkipCRDs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstall) *bool {
		if v == nil {
			return nil
		}
		return v.SkipCRDs
	}).(pulumi.BoolPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm install action. Defaults to 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecInstallPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstall) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Remediation holds the remediation configuration for when the Helm install action for the HelmRelease fails. The default is to not perform any action.
type HelmReleaseSpecInstallRemediation struct {
	// IgnoreTestFailures tells the controller to skip remediation when the Helm tests are run after an install action but fail. Defaults to 'Test.IgnoreFailures'.
	IgnoreTestFailures *bool `pulumi:"ignoreTestFailures"`
	// RemediateLastFailure tells the controller to remediate the last failure, when no retries remain. Defaults to 'false'.
	RemediateLastFailure *bool `pulumi:"remediateLastFailure"`
	// Retries is the number of retries that should be attempted on failures before bailing. Remediation, using an uninstall, is performed between each attempt. Defaults to '0', a negative integer equals to unlimited retries.
	Retries *int `pulumi:"retries"`
}

// HelmReleaseSpecInstallRemediationInput is an input type that accepts HelmReleaseSpecInstallRemediationArgs and HelmReleaseSpecInstallRemediationOutput values.
// You can construct a concrete instance of `HelmReleaseSpecInstallRemediationInput` via:
//
//          HelmReleaseSpecInstallRemediationArgs{...}
type HelmReleaseSpecInstallRemediationInput interface {
	pulumi.Input

	ToHelmReleaseSpecInstallRemediationOutput() HelmReleaseSpecInstallRemediationOutput
	ToHelmReleaseSpecInstallRemediationOutputWithContext(context.Context) HelmReleaseSpecInstallRemediationOutput
}

// Remediation holds the remediation configuration for when the Helm install action for the HelmRelease fails. The default is to not perform any action.
type HelmReleaseSpecInstallRemediationArgs struct {
	// IgnoreTestFailures tells the controller to skip remediation when the Helm tests are run after an install action but fail. Defaults to 'Test.IgnoreFailures'.
	IgnoreTestFailures pulumi.BoolPtrInput `pulumi:"ignoreTestFailures"`
	// RemediateLastFailure tells the controller to remediate the last failure, when no retries remain. Defaults to 'false'.
	RemediateLastFailure pulumi.BoolPtrInput `pulumi:"remediateLastFailure"`
	// Retries is the number of retries that should be attempted on failures before bailing. Remediation, using an uninstall, is performed between each attempt. Defaults to '0', a negative integer equals to unlimited retries.
	Retries pulumi.IntPtrInput `pulumi:"retries"`
}

func (HelmReleaseSpecInstallRemediationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecInstallRemediation)(nil)).Elem()
}

func (i HelmReleaseSpecInstallRemediationArgs) ToHelmReleaseSpecInstallRemediationOutput() HelmReleaseSpecInstallRemediationOutput {
	return i.ToHelmReleaseSpecInstallRemediationOutputWithContext(context.Background())
}

func (i HelmReleaseSpecInstallRemediationArgs) ToHelmReleaseSpecInstallRemediationOutputWithContext(ctx context.Context) HelmReleaseSpecInstallRemediationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecInstallRemediationOutput)
}

func (i HelmReleaseSpecInstallRemediationArgs) ToHelmReleaseSpecInstallRemediationPtrOutput() HelmReleaseSpecInstallRemediationPtrOutput {
	return i.ToHelmReleaseSpecInstallRemediationPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecInstallRemediationArgs) ToHelmReleaseSpecInstallRemediationPtrOutputWithContext(ctx context.Context) HelmReleaseSpecInstallRemediationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecInstallRemediationOutput).ToHelmReleaseSpecInstallRemediationPtrOutputWithContext(ctx)
}

// HelmReleaseSpecInstallRemediationPtrInput is an input type that accepts HelmReleaseSpecInstallRemediationArgs, HelmReleaseSpecInstallRemediationPtr and HelmReleaseSpecInstallRemediationPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecInstallRemediationPtrInput` via:
//
//          HelmReleaseSpecInstallRemediationArgs{...}
//
//  or:
//
//          nil
type HelmReleaseSpecInstallRemediationPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecInstallRemediationPtrOutput() HelmReleaseSpecInstallRemediationPtrOutput
	ToHelmReleaseSpecInstallRemediationPtrOutputWithContext(context.Context) HelmReleaseSpecInstallRemediationPtrOutput
}

type helmReleaseSpecInstallRemediationPtrType HelmReleaseSpecInstallRemediationArgs

func HelmReleaseSpecInstallRemediationPtr(v *HelmReleaseSpecInstallRemediationArgs) HelmReleaseSpecInstallRemediationPtrInput {
	return (*helmReleaseSpecInstallRemediationPtrType)(v)
}

func (*helmReleaseSpecInstallRemediationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecInstallRemediation)(nil)).Elem()
}

func (i *helmReleaseSpecInstallRemediationPtrType) ToHelmReleaseSpecInstallRemediationPtrOutput() HelmReleaseSpecInstallRemediationPtrOutput {
	return i.ToHelmReleaseSpecInstallRemediationPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecInstallRemediationPtrType) ToHelmReleaseSpecInstallRemediationPtrOutputWithContext(ctx context.Context) HelmReleaseSpecInstallRemediationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecInstallRemediationPtrOutput)
}

// Remediation holds the remediation configuration for when the Helm install action for the HelmRelease fails. The default is to not perform any action.
type HelmReleaseSpecInstallRemediationOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecInstallRemediationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecInstallRemediation)(nil)).Elem()
}

func (o HelmReleaseSpecInstallRemediationOutput) ToHelmReleaseSpecInstallRemediationOutput() HelmReleaseSpecInstallRemediationOutput {
	return o
}

func (o HelmReleaseSpecInstallRemediationOutput) ToHelmReleaseSpecInstallRemediationOutputWithContext(ctx context.Context) HelmReleaseSpecInstallRemediationOutput {
	return o
}

func (o HelmReleaseSpecInstallRemediationOutput) ToHelmReleaseSpecInstallRemediationPtrOutput() HelmReleaseSpecInstallRemediationPtrOutput {
	return o.ToHelmReleaseSpecInstallRemediationPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecInstallRemediationOutput) ToHelmReleaseSpecInstallRemediationPtrOutputWithContext(ctx context.Context) HelmReleaseSpecInstallRemediationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecInstallRemediation) *HelmReleaseSpecInstallRemediation {
		return &v
	}).(HelmReleaseSpecInstallRemediationPtrOutput)
}

// IgnoreTestFailures tells the controller to skip remediation when the Helm tests are run after an install action but fail. Defaults to 'Test.IgnoreFailures'.
func (o HelmReleaseSpecInstallRemediationOutput) IgnoreTestFailures() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstallRemediation) *bool { return v.IgnoreTestFailures }).(pulumi.BoolPtrOutput)
}

// RemediateLastFailure tells the controller to remediate the last failure, when no retries remain. Defaults to 'false'.
func (o HelmReleaseSpecInstallRemediationOutput) RemediateLastFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstallRemediation) *bool { return v.RemediateLastFailure }).(pulumi.BoolPtrOutput)
}

// Retries is the number of retries that should be attempted on failures before bailing. Remediation, using an uninstall, is performed between each attempt. Defaults to '0', a negative integer equals to unlimited retries.
func (o HelmReleaseSpecInstallRemediationOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstallRemediation) *int { return v.Retries }).(pulumi.IntPtrOutput)
}

type HelmReleaseSpecInstallRemediationPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecInstallRemediationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecInstallRemediation)(nil)).Elem()
}

func (o HelmReleaseSpecInstallRemediationPtrOutput) ToHelmReleaseSpecInstallRemediationPtrOutput() HelmReleaseSpecInstallRemediationPtrOutput {
	return o
}

func (o HelmReleaseSpecInstallRemediationPtrOutput) ToHelmReleaseSpecInstallRemediationPtrOutputWithContext(ctx context.Context) HelmReleaseSpecInstallRemediationPtrOutput {
	return o
}

func (o HelmReleaseSpecInstallRemediationPtrOutput) Elem() HelmReleaseSpecInstallRemediationOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstallRemediation) HelmReleaseSpecInstallRemediation {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecInstallRemediation
		return ret
	}).(HelmReleaseSpecInstallRemediationOutput)
}

// IgnoreTestFailures tells the controller to skip remediation when the Helm tests are run after an install action but fail. Defaults to 'Test.IgnoreFailures'.
func (o HelmReleaseSpecInstallRemediationPtrOutput) IgnoreTestFailures() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstallRemediation) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreTestFailures
	}).(pulumi.BoolPtrOutput)
}

// RemediateLastFailure tells the controller to remediate the last failure, when no retries remain. Defaults to 'false'.
func (o HelmReleaseSpecInstallRemediationPtrOutput) RemediateLastFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstallRemediation) *bool {
		if v == nil {
			return nil
		}
		return v.RemediateLastFailure
	}).(pulumi.BoolPtrOutput)
}

// Retries is the number of retries that should be attempted on failures before bailing. Remediation, using an uninstall, is performed between each attempt. Defaults to '0', a negative integer equals to unlimited retries.
func (o HelmReleaseSpecInstallRemediationPtrOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstallRemediation) *int {
		if v == nil {
			return nil
		}
		return v.Retries
	}).(pulumi.IntPtrOutput)
}

// KubeConfig for reconciling the HelmRelease on a remote cluster. When used in combination with HelmReleaseSpec.ServiceAccountName, forces the controller to act on behalf of that Service Account at the target cluster. If the --default-service-account flag is set, its value will be used as a controller level fallback for when HelmReleaseSpec.ServiceAccountName is empty.
type HelmReleaseSpecKubeconfig struct {
	// SecretRef holds the name to a secret that contains a key with the kubeconfig file as the value. If no key is specified the key will default to 'value'. The secret must be in the same namespace as the HelmRelease. It is recommended that the kubeconfig is self-contained, and the secret is regularly updated if credentials such as a cloud-access-token expire. Cloud specific `cmd-path` auth helpers will not function without adding binaries and credentials to the Pod that is responsible for reconciling the HelmRelease.
	SecretRef *HelmReleaseSpecKubeconfigSecretref `pulumi:"secretRef"`
}

// HelmReleaseSpecKubeconfigInput is an input type that accepts HelmReleaseSpecKubeconfigArgs and HelmReleaseSpecKubeconfigOutput values.
// You can construct a concrete instance of `HelmReleaseSpecKubeconfigInput` via:
//
//          HelmReleaseSpecKubeconfigArgs{...}
type HelmReleaseSpecKubeconfigInput interface {
	pulumi.Input

	ToHelmReleaseSpecKubeconfigOutput() HelmReleaseSpecKubeconfigOutput
	ToHelmReleaseSpecKubeconfigOutputWithContext(context.Context) HelmReleaseSpecKubeconfigOutput
}

// KubeConfig for reconciling the HelmRelease on a remote cluster. When used in combination with HelmReleaseSpec.ServiceAccountName, forces the controller to act on behalf of that Service Account at the target cluster. If the --default-service-account flag is set, its value will be used as a controller level fallback for when HelmReleaseSpec.ServiceAccountName is empty.
type HelmReleaseSpecKubeconfigArgs struct {
	// SecretRef holds the name to a secret that contains a key with the kubeconfig file as the value. If no key is specified the key will default to 'value'. The secret must be in the same namespace as the HelmRelease. It is recommended that the kubeconfig is self-contained, and the secret is regularly updated if credentials such as a cloud-access-token expire. Cloud specific `cmd-path` auth helpers will not function without adding binaries and credentials to the Pod that is responsible for reconciling the HelmRelease.
	SecretRef HelmReleaseSpecKubeconfigSecretrefPtrInput `pulumi:"secretRef"`
}

func (HelmReleaseSpecKubeconfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecKubeconfig)(nil)).Elem()
}

func (i HelmReleaseSpecKubeconfigArgs) ToHelmReleaseSpecKubeconfigOutput() HelmReleaseSpecKubeconfigOutput {
	return i.ToHelmReleaseSpecKubeconfigOutputWithContext(context.Background())
}

func (i HelmReleaseSpecKubeconfigArgs) ToHelmReleaseSpecKubeconfigOutputWithContext(ctx context.Context) HelmReleaseSpecKubeconfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecKubeconfigOutput)
}

func (i HelmReleaseSpecKubeconfigArgs) ToHelmReleaseSpecKubeconfigPtrOutput() HelmReleaseSpecKubeconfigPtrOutput {
	return i.ToHelmReleaseSpecKubeconfigPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecKubeconfigArgs) ToHelmReleaseSpecKubeconfigPtrOutputWithContext(ctx context.Context) HelmReleaseSpecKubeconfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecKubeconfigOutput).ToHelmReleaseSpecKubeconfigPtrOutputWithContext(ctx)
}

// HelmReleaseSpecKubeconfigPtrInput is an input type that accepts HelmReleaseSpecKubeconfigArgs, HelmReleaseSpecKubeconfigPtr and HelmReleaseSpecKubeconfigPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecKubeconfigPtrInput` via:
//
//          HelmReleaseSpecKubeconfigArgs{...}
//
//  or:
//
//          nil
type HelmReleaseSpecKubeconfigPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecKubeconfigPtrOutput() HelmReleaseSpecKubeconfigPtrOutput
	ToHelmReleaseSpecKubeconfigPtrOutputWithContext(context.Context) HelmReleaseSpecKubeconfigPtrOutput
}

type helmReleaseSpecKubeconfigPtrType HelmReleaseSpecKubeconfigArgs

func HelmReleaseSpecKubeconfigPtr(v *HelmReleaseSpecKubeconfigArgs) HelmReleaseSpecKubeconfigPtrInput {
	return (*helmReleaseSpecKubeconfigPtrType)(v)
}

func (*helmReleaseSpecKubeconfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecKubeconfig)(nil)).Elem()
}

func (i *helmReleaseSpecKubeconfigPtrType) ToHelmReleaseSpecKubeconfigPtrOutput() HelmReleaseSpecKubeconfigPtrOutput {
	return i.ToHelmReleaseSpecKubeconfigPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecKubeconfigPtrType) ToHelmReleaseSpecKubeconfigPtrOutputWithContext(ctx context.Context) HelmReleaseSpecKubeconfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecKubeconfigPtrOutput)
}

// KubeConfig for reconciling the HelmRelease on a remote cluster. When used in combination with HelmReleaseSpec.ServiceAccountName, forces the controller to act on behalf of that Service Account at the target cluster. If the --default-service-account flag is set, its value will be used as a controller level fallback for when HelmReleaseSpec.ServiceAccountName is empty.
type HelmReleaseSpecKubeconfigOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecKubeconfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecKubeconfig)(nil)).Elem()
}

func (o HelmReleaseSpecKubeconfigOutput) ToHelmReleaseSpecKubeconfigOutput() HelmReleaseSpecKubeconfigOutput {
	return o
}

func (o HelmReleaseSpecKubeconfigOutput) ToHelmReleaseSpecKubeconfigOutputWithContext(ctx context.Context) HelmReleaseSpecKubeconfigOutput {
	return o
}

func (o HelmReleaseSpecKubeconfigOutput) ToHelmReleaseSpecKubeconfigPtrOutput() HelmReleaseSpecKubeconfigPtrOutput {
	return o.ToHelmReleaseSpecKubeconfigPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecKubeconfigOutput) ToHelmReleaseSpecKubeconfigPtrOutputWithContext(ctx context.Context) HelmReleaseSpecKubeconfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecKubeconfig) *HelmReleaseSpecKubeconfig {
		return &v
	}).(HelmReleaseSpecKubeconfigPtrOutput)
}

// SecretRef holds the name to a secret that contains a key with the kubeconfig file as the value. If no key is specified the key will default to 'value'. The secret must be in the same namespace as the HelmRelease. It is recommended that the kubeconfig is self-contained, and the secret is regularly updated if credentials such as a cloud-access-token expire. Cloud specific `cmd-path` auth helpers will not function without adding binaries and credentials to the Pod that is responsible for reconciling the HelmRelease.
func (o HelmReleaseSpecKubeconfigOutput) SecretRef() HelmReleaseSpecKubeconfigSecretrefPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecKubeconfig) *HelmReleaseSpecKubeconfigSecretref { return v.SecretRef }).(HelmReleaseSpecKubeconfigSecretrefPtrOutput)
}

type HelmReleaseSpecKubeconfigPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecKubeconfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecKubeconfig)(nil)).Elem()
}

func (o HelmReleaseSpecKubeconfigPtrOutput) ToHelmReleaseSpecKubeconfigPtrOutput() HelmReleaseSpecKubeconfigPtrOutput {
	return o
}

func (o HelmReleaseSpecKubeconfigPtrOutput) ToHelmReleaseSpecKubeconfigPtrOutputWithContext(ctx context.Context) HelmReleaseSpecKubeconfigPtrOutput {
	return o
}

func (o HelmReleaseSpecKubeconfigPtrOutput) Elem() HelmReleaseSpecKubeconfigOutput {
	return o.ApplyT(func(v *HelmReleaseSpecKubeconfig) HelmReleaseSpecKubeconfig {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecKubeconfig
		return ret
	}).(HelmReleaseSpecKubeconfigOutput)
}

// SecretRef holds the name to a secret that contains a key with the kubeconfig file as the value. If no key is specified the key will default to 'value'. The secret must be in the same namespace as the HelmRelease. It is recommended that the kubeconfig is self-contained, and the secret is regularly updated if credentials such as a cloud-access-token expire. Cloud specific `cmd-path` auth helpers will not function without adding binaries and credentials to the Pod that is responsible for reconciling the HelmRelease.
func (o HelmReleaseSpecKubeconfigPtrOutput) SecretRef() HelmReleaseSpecKubeconfigSecretrefPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecKubeconfig) *HelmReleaseSpecKubeconfigSecretref {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(HelmReleaseSpecKubeconfigSecretrefPtrOutput)
}

// SecretRef holds the name to a secret that contains a key with the kubeconfig file as the value. If no key is specified the key will default to 'value'. The secret must be in the same namespace as the HelmRelease. It is recommended that the kubeconfig is self-contained, and the secret is regularly updated if credentials such as a cloud-access-token expire. Cloud specific `cmd-path` auth helpers will not function without adding binaries and credentials to the Pod that is responsible for reconciling the HelmRelease.
type HelmReleaseSpecKubeconfigSecretref struct {
	// Key in the Secret, when not specified an implementation-specific default key is used.
	Key *string `pulumi:"key"`
	// Name of the Secret.
	Name string `pulumi:"name"`
}

// HelmReleaseSpecKubeconfigSecretrefInput is an input type that accepts HelmReleaseSpecKubeconfigSecretrefArgs and HelmReleaseSpecKubeconfigSecretrefOutput values.
// You can construct a concrete instance of `HelmReleaseSpecKubeconfigSecretrefInput` via:
//
//          HelmReleaseSpecKubeconfigSecretrefArgs{...}
type HelmReleaseSpecKubeconfigSecretrefInput interface {
	pulumi.Input

	ToHelmReleaseSpecKubeconfigSecretrefOutput() HelmReleaseSpecKubeconfigSecretrefOutput
	ToHelmReleaseSpecKubeconfigSecretrefOutputWithContext(context.Context) HelmReleaseSpecKubeconfigSecretrefOutput
}

// SecretRef holds the name to a secret that contains a key with the kubeconfig file as the value. If no key is specified the key will default to 'value'. The secret must be in the same namespace as the HelmRelease. It is recommended that the kubeconfig is self-contained, and the secret is regularly updated if credentials such as a cloud-access-token expire. Cloud specific `cmd-path` auth helpers will not function without adding binaries and credentials to the Pod that is responsible for reconciling the HelmRelease.
type HelmReleaseSpecKubeconfigSecretrefArgs struct {
	// Key in the Secret, when not specified an implementation-specific default key is used.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Name of the Secret.
	Name pulumi.StringInput `pulumi:"name"`
}

func (HelmReleaseSpecKubeconfigSecretrefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecKubeconfigSecretref)(nil)).Elem()
}

func (i HelmReleaseSpecKubeconfigSecretrefArgs) ToHelmReleaseSpecKubeconfigSecretrefOutput() HelmReleaseSpecKubeconfigSecretrefOutput {
	return i.ToHelmReleaseSpecKubeconfigSecretrefOutputWithContext(context.Background())
}

func (i HelmReleaseSpecKubeconfigSecretrefArgs) ToHelmReleaseSpecKubeconfigSecretrefOutputWithContext(ctx context.Context) HelmReleaseSpecKubeconfigSecretrefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecKubeconfigSecretrefOutput)
}

func (i HelmReleaseSpecKubeconfigSecretrefArgs) ToHelmReleaseSpecKubeconfigSecretrefPtrOutput() HelmReleaseSpecKubeconfigSecretrefPtrOutput {
	return i.ToHelmReleaseSpecKubeconfigSecretrefPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecKubeconfigSecretrefArgs) ToHelmReleaseSpecKubeconfigSecretrefPtrOutputWithContext(ctx context.Context) HelmReleaseSpecKubeconfigSecretrefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecKubeconfigSecretrefOutput).ToHelmReleaseSpecKubeconfigSecretrefPtrOutputWithContext(ctx)
}

// HelmReleaseSpecKubeconfigSecretrefPtrInput is an input type that accepts HelmReleaseSpecKubeconfigSecretrefArgs, HelmReleaseSpecKubeconfigSecretrefPtr and HelmReleaseSpecKubeconfigSecretrefPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecKubeconfigSecretrefPtrInput` via:
//
//          HelmReleaseSpecKubeconfigSecretrefArgs{...}
//
//  or:
//
//          nil
type HelmReleaseSpecKubeconfigSecretrefPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecKubeconfigSecretrefPtrOutput() HelmReleaseSpecKubeconfigSecretrefPtrOutput
	ToHelmReleaseSpecKubeconfigSecretrefPtrOutputWithContext(context.Context) HelmReleaseSpecKubeconfigSecretrefPtrOutput
}

type helmReleaseSpecKubeconfigSecretrefPtrType HelmReleaseSpecKubeconfigSecretrefArgs

func HelmReleaseSpecKubeconfigSecretrefPtr(v *HelmReleaseSpecKubeconfigSecretrefArgs) HelmReleaseSpecKubeconfigSecretrefPtrInput {
	return (*helmReleaseSpecKubeconfigSecretrefPtrType)(v)
}

func (*helmReleaseSpecKubeconfigSecretrefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecKubeconfigSecretref)(nil)).Elem()
}

func (i *helmReleaseSpecKubeconfigSecretrefPtrType) ToHelmReleaseSpecKubeconfigSecretrefPtrOutput() HelmReleaseSpecKubeconfigSecretrefPtrOutput {
	return i.ToHelmReleaseSpecKubeconfigSecretrefPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecKubeconfigSecretrefPtrType) ToHelmReleaseSpecKubeconfigSecretrefPtrOutputWithContext(ctx context.Context) HelmReleaseSpecKubeconfigSecretrefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecKubeconfigSecretrefPtrOutput)
}

// SecretRef holds the name to a secret that contains a key with the kubeconfig file as the value. If no key is specified the key will default to 'value'. The secret must be in the same namespace as the HelmRelease. It is recommended that the kubeconfig is self-contained, and the secret is regularly updated if credentials such as a cloud-access-token expire. Cloud specific `cmd-path` auth helpers will not function without adding binaries and credentials to the Pod that is responsible for reconciling the HelmRelease.
type HelmReleaseSpecKubeconfigSecretrefOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecKubeconfigSecretrefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecKubeconfigSecretref)(nil)).Elem()
}

func (o HelmReleaseSpecKubeconfigSecretrefOutput) ToHelmReleaseSpecKubeconfigSecretrefOutput() HelmReleaseSpecKubeconfigSecretrefOutput {
	return o
}

func (o HelmReleaseSpecKubeconfigSecretrefOutput) ToHelmReleaseSpecKubeconfigSecretrefOutputWithContext(ctx context.Context) HelmReleaseSpecKubeconfigSecretrefOutput {
	return o
}

func (o HelmReleaseSpecKubeconfigSecretrefOutput) ToHelmReleaseSpecKubeconfigSecretrefPtrOutput() HelmReleaseSpecKubeconfigSecretrefPtrOutput {
	return o.ToHelmReleaseSpecKubeconfigSecretrefPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecKubeconfigSecretrefOutput) ToHelmReleaseSpecKubeconfigSecretrefPtrOutputWithContext(ctx context.Context) HelmReleaseSpecKubeconfigSecretrefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecKubeconfigSecretref) *HelmReleaseSpecKubeconfigSecretref {
		return &v
	}).(HelmReleaseSpecKubeconfigSecretrefPtrOutput)
}

// Key in the Secret, when not specified an implementation-specific default key is used.
func (o HelmReleaseSpecKubeconfigSecretrefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecKubeconfigSecretref) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Name of the Secret.
func (o HelmReleaseSpecKubeconfigSecretrefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HelmReleaseSpecKubeconfigSecretref) string { return v.Name }).(pulumi.StringOutput)
}

type HelmReleaseSpecKubeconfigSecretrefPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecKubeconfigSecretrefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecKubeconfigSecretref)(nil)).Elem()
}

func (o HelmReleaseSpecKubeconfigSecretrefPtrOutput) ToHelmReleaseSpecKubeconfigSecretrefPtrOutput() HelmReleaseSpecKubeconfigSecretrefPtrOutput {
	return o
}

func (o HelmReleaseSpecKubeconfigSecretrefPtrOutput) ToHelmReleaseSpecKubeconfigSecretrefPtrOutputWithContext(ctx context.Context) HelmReleaseSpecKubeconfigSecretrefPtrOutput {
	return o
}

func (o HelmReleaseSpecKubeconfigSecretrefPtrOutput) Elem() HelmReleaseSpecKubeconfigSecretrefOutput {
	return o.ApplyT(func(v *HelmReleaseSpecKubeconfigSecretref) HelmReleaseSpecKubeconfigSecretref {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecKubeconfigSecretref
		return ret
	}).(HelmReleaseSpecKubeconfigSecretrefOutput)
}

// Key in the Secret, when not specified an implementation-specific default key is used.
func (o HelmReleaseSpecKubeconfigSecretrefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecKubeconfigSecretref) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the Secret.
func (o HelmReleaseSpecKubeconfigSecretrefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecKubeconfigSecretref) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// PostRenderer contains a Helm PostRenderer specification.
type HelmReleaseSpecPostrenderers struct {
	// Kustomization to apply as PostRenderer.
	Kustomize *HelmReleaseSpecPostrenderersKustomize `pulumi:"kustomize"`
}

// HelmReleaseSpecPostrenderersInput is an input type that accepts HelmReleaseSpecPostrenderersArgs and HelmReleaseSpecPostrenderersOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostrenderersInput` via:
//
//          HelmReleaseSpecPostrenderersArgs{...}
type HelmReleaseSpecPostrenderersInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostrenderersOutput() HelmReleaseSpecPostrenderersOutput
	ToHelmReleaseSpecPostrenderersOutputWithContext(context.Context) HelmReleaseSpecPostrenderersOutput
}

// PostRenderer contains a Helm PostRenderer specification.
type HelmReleaseSpecPostrenderersArgs struct {
	// Kustomization to apply as PostRenderer.
	Kustomize HelmReleaseSpecPostrenderersKustomizePtrInput `pulumi:"kustomize"`
}

func (HelmReleaseSpecPostrenderersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostrenderers)(nil)).Elem()
}

func (i HelmReleaseSpecPostrenderersArgs) ToHelmReleaseSpecPostrenderersOutput() HelmReleaseSpecPostrenderersOutput {
	return i.ToHelmReleaseSpecPostrenderersOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostrenderersArgs) ToHelmReleaseSpecPostrenderersOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostrenderersOutput)
}

// HelmReleaseSpecPostrenderersArrayInput is an input type that accepts HelmReleaseSpecPostrenderersArray and HelmReleaseSpecPostrenderersArrayOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostrenderersArrayInput` via:
//
//          HelmReleaseSpecPostrenderersArray{ HelmReleaseSpecPostrenderersArgs{...} }
type HelmReleaseSpecPostrenderersArrayInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostrenderersArrayOutput() HelmReleaseSpecPostrenderersArrayOutput
	ToHelmReleaseSpecPostrenderersArrayOutputWithContext(context.Context) HelmReleaseSpecPostrenderersArrayOutput
}

type HelmReleaseSpecPostrenderersArray []HelmReleaseSpecPostrenderersInput

func (HelmReleaseSpecPostrenderersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecPostrenderers)(nil)).Elem()
}

func (i HelmReleaseSpecPostrenderersArray) ToHelmReleaseSpecPostrenderersArrayOutput() HelmReleaseSpecPostrenderersArrayOutput {
	return i.ToHelmReleaseSpecPostrenderersArrayOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostrenderersArray) ToHelmReleaseSpecPostrenderersArrayOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostrenderersArrayOutput)
}

// PostRenderer contains a Helm PostRenderer specification.
type HelmReleaseSpecPostrenderersOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostrenderersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostrenderers)(nil)).Elem()
}

func (o HelmReleaseSpecPostrenderersOutput) ToHelmReleaseSpecPostrenderersOutput() HelmReleaseSpecPostrenderersOutput {
	return o
}

func (o HelmReleaseSpecPostrenderersOutput) ToHelmReleaseSpecPostrenderersOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersOutput {
	return o
}

// Kustomization to apply as PostRenderer.
func (o HelmReleaseSpecPostrenderersOutput) Kustomize() HelmReleaseSpecPostrenderersKustomizePtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderers) *HelmReleaseSpecPostrenderersKustomize { return v.Kustomize }).(HelmReleaseSpecPostrenderersKustomizePtrOutput)
}

type HelmReleaseSpecPostrenderersArrayOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostrenderersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecPostrenderers)(nil)).Elem()
}

func (o HelmReleaseSpecPostrenderersArrayOutput) ToHelmReleaseSpecPostrenderersArrayOutput() HelmReleaseSpecPostrenderersArrayOutput {
	return o
}

func (o HelmReleaseSpecPostrenderersArrayOutput) ToHelmReleaseSpecPostrenderersArrayOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersArrayOutput {
	return o
}

func (o HelmReleaseSpecPostrenderersArrayOutput) Index(i pulumi.IntInput) HelmReleaseSpecPostrenderersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmReleaseSpecPostrenderers {
		return vs[0].([]HelmReleaseSpecPostrenderers)[vs[1].(int)]
	}).(HelmReleaseSpecPostrenderersOutput)
}

// Kustomization to apply as PostRenderer.
type HelmReleaseSpecPostrenderersKustomize struct {
	// Images is a list of (image name, new name, new tag or digest) for changing image names, tags or digests. This can also be achieved with a patch, but this operator is simpler to specify.
	Images []HelmReleaseSpecPostrenderersKustomizeImages `pulumi:"images"`
	// Strategic merge and JSON patches, defined as inline YAML objects, capable of targeting objects based on kind, label and annotation selectors.
	Patches []HelmReleaseSpecPostrenderersKustomizePatches `pulumi:"patches"`
	// JSON 6902 patches, defined as inline YAML objects.
	PatchesJson6902 []HelmReleaseSpecPostrenderersKustomizePatchesjson6902 `pulumi:"patchesJson6902"`
	// Strategic merge patches, defined as inline YAML objects.
	PatchesStrategicMerge []map[string]interface{} `pulumi:"patchesStrategicMerge"`
}

// HelmReleaseSpecPostrenderersKustomizeInput is an input type that accepts HelmReleaseSpecPostrenderersKustomizeArgs and HelmReleaseSpecPostrenderersKustomizeOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostrenderersKustomizeInput` via:
//
//          HelmReleaseSpecPostrenderersKustomizeArgs{...}
type HelmReleaseSpecPostrenderersKustomizeInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostrenderersKustomizeOutput() HelmReleaseSpecPostrenderersKustomizeOutput
	ToHelmReleaseSpecPostrenderersKustomizeOutputWithContext(context.Context) HelmReleaseSpecPostrenderersKustomizeOutput
}

// Kustomization to apply as PostRenderer.
type HelmReleaseSpecPostrenderersKustomizeArgs struct {
	// Images is a list of (image name, new name, new tag or digest) for changing image names, tags or digests. This can also be achieved with a patch, but this operator is simpler to specify.
	Images HelmReleaseSpecPostrenderersKustomizeImagesArrayInput `pulumi:"images"`
	// Strategic merge and JSON patches, defined as inline YAML objects, capable of targeting objects based on kind, label and annotation selectors.
	Patches HelmReleaseSpecPostrenderersKustomizePatchesArrayInput `pulumi:"patches"`
	// JSON 6902 patches, defined as inline YAML objects.
	PatchesJson6902 HelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayInput `pulumi:"patchesJson6902"`
	// Strategic merge patches, defined as inline YAML objects.
	PatchesStrategicMerge pulumi.MapArrayInput `pulumi:"patchesStrategicMerge"`
}

func (HelmReleaseSpecPostrenderersKustomizeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostrenderersKustomize)(nil)).Elem()
}

func (i HelmReleaseSpecPostrenderersKustomizeArgs) ToHelmReleaseSpecPostrenderersKustomizeOutput() HelmReleaseSpecPostrenderersKustomizeOutput {
	return i.ToHelmReleaseSpecPostrenderersKustomizeOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostrenderersKustomizeArgs) ToHelmReleaseSpecPostrenderersKustomizeOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostrenderersKustomizeOutput)
}

func (i HelmReleaseSpecPostrenderersKustomizeArgs) ToHelmReleaseSpecPostrenderersKustomizePtrOutput() HelmReleaseSpecPostrenderersKustomizePtrOutput {
	return i.ToHelmReleaseSpecPostrenderersKustomizePtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostrenderersKustomizeArgs) ToHelmReleaseSpecPostrenderersKustomizePtrOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostrenderersKustomizeOutput).ToHelmReleaseSpecPostrenderersKustomizePtrOutputWithContext(ctx)
}

// HelmReleaseSpecPostrenderersKustomizePtrInput is an input type that accepts HelmReleaseSpecPostrenderersKustomizeArgs, HelmReleaseSpecPostrenderersKustomizePtr and HelmReleaseSpecPostrenderersKustomizePtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostrenderersKustomizePtrInput` via:
//
//          HelmReleaseSpecPostrenderersKustomizeArgs{...}
//
//  or:
//
//          nil
type HelmReleaseSpecPostrenderersKustomizePtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostrenderersKustomizePtrOutput() HelmReleaseSpecPostrenderersKustomizePtrOutput
	ToHelmReleaseSpecPostrenderersKustomizePtrOutputWithContext(context.Context) HelmReleaseSpecPostrenderersKustomizePtrOutput
}

type helmReleaseSpecPostrenderersKustomizePtrType HelmReleaseSpecPostrenderersKustomizeArgs

func HelmReleaseSpecPostrenderersKustomizePtr(v *HelmReleaseSpecPostrenderersKustomizeArgs) HelmReleaseSpecPostrenderersKustomizePtrInput {
	return (*helmReleaseSpecPostrenderersKustomizePtrType)(v)
}

func (*helmReleaseSpecPostrenderersKustomizePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecPostrenderersKustomize)(nil)).Elem()
}

func (i *helmReleaseSpecPostrenderersKustomizePtrType) ToHelmReleaseSpecPostrenderersKustomizePtrOutput() HelmReleaseSpecPostrenderersKustomizePtrOutput {
	return i.ToHelmReleaseSpecPostrenderersKustomizePtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecPostrenderersKustomizePtrType) ToHelmReleaseSpecPostrenderersKustomizePtrOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostrenderersKustomizePtrOutput)
}

// Kustomization to apply as PostRenderer.
type HelmReleaseSpecPostrenderersKustomizeOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostrenderersKustomizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostrenderersKustomize)(nil)).Elem()
}

func (o HelmReleaseSpecPostrenderersKustomizeOutput) ToHelmReleaseSpecPostrenderersKustomizeOutput() HelmReleaseSpecPostrenderersKustomizeOutput {
	return o
}

func (o HelmReleaseSpecPostrenderersKustomizeOutput) ToHelmReleaseSpecPostrenderersKustomizeOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizeOutput {
	return o
}

func (o HelmReleaseSpecPostrenderersKustomizeOutput) ToHelmReleaseSpecPostrenderersKustomizePtrOutput() HelmReleaseSpecPostrenderersKustomizePtrOutput {
	return o.ToHelmReleaseSpecPostrenderersKustomizePtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecPostrenderersKustomizeOutput) ToHelmReleaseSpecPostrenderersKustomizePtrOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecPostrenderersKustomize) *HelmReleaseSpecPostrenderersKustomize {
		return &v
	}).(HelmReleaseSpecPostrenderersKustomizePtrOutput)
}

// Images is a list of (image name, new name, new tag or digest) for changing image names, tags or digests. This can also be achieved with a patch, but this operator is simpler to specify.
func (o HelmReleaseSpecPostrenderersKustomizeOutput) Images() HelmReleaseSpecPostrenderersKustomizeImagesArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomize) []HelmReleaseSpecPostrenderersKustomizeImages {
		return v.Images
	}).(HelmReleaseSpecPostrenderersKustomizeImagesArrayOutput)
}

// Strategic merge and JSON patches, defined as inline YAML objects, capable of targeting objects based on kind, label and annotation selectors.
func (o HelmReleaseSpecPostrenderersKustomizeOutput) Patches() HelmReleaseSpecPostrenderersKustomizePatchesArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomize) []HelmReleaseSpecPostrenderersKustomizePatches {
		return v.Patches
	}).(HelmReleaseSpecPostrenderersKustomizePatchesArrayOutput)
}

// JSON 6902 patches, defined as inline YAML objects.
func (o HelmReleaseSpecPostrenderersKustomizeOutput) PatchesJson6902() HelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomize) []HelmReleaseSpecPostrenderersKustomizePatchesjson6902 {
		return v.PatchesJson6902
	}).(HelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayOutput)
}

// Strategic merge patches, defined as inline YAML objects.
func (o HelmReleaseSpecPostrenderersKustomizeOutput) PatchesStrategicMerge() pulumi.MapArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomize) []map[string]interface{} { return v.PatchesStrategicMerge }).(pulumi.MapArrayOutput)
}

type HelmReleaseSpecPostrenderersKustomizePtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostrenderersKustomizePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecPostrenderersKustomize)(nil)).Elem()
}

func (o HelmReleaseSpecPostrenderersKustomizePtrOutput) ToHelmReleaseSpecPostrenderersKustomizePtrOutput() HelmReleaseSpecPostrenderersKustomizePtrOutput {
	return o
}

func (o HelmReleaseSpecPostrenderersKustomizePtrOutput) ToHelmReleaseSpecPostrenderersKustomizePtrOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizePtrOutput {
	return o
}

func (o HelmReleaseSpecPostrenderersKustomizePtrOutput) Elem() HelmReleaseSpecPostrenderersKustomizeOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostrenderersKustomize) HelmReleaseSpecPostrenderersKustomize {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecPostrenderersKustomize
		return ret
	}).(HelmReleaseSpecPostrenderersKustomizeOutput)
}

// Images is a list of (image name, new name, new tag or digest) for changing image names, tags or digests. This can also be achieved with a patch, but this operator is simpler to specify.
func (o HelmReleaseSpecPostrenderersKustomizePtrOutput) Images() HelmReleaseSpecPostrenderersKustomizeImagesArrayOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostrenderersKustomize) []HelmReleaseSpecPostrenderersKustomizeImages {
		if v == nil {
			return nil
		}
		return v.Images
	}).(HelmReleaseSpecPostrenderersKustomizeImagesArrayOutput)
}

// Strategic merge and JSON patches, defined as inline YAML objects, capable of targeting objects based on kind, label and annotation selectors.
func (o HelmReleaseSpecPostrenderersKustomizePtrOutput) Patches() HelmReleaseSpecPostrenderersKustomizePatchesArrayOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostrenderersKustomize) []HelmReleaseSpecPostrenderersKustomizePatches {
		if v == nil {
			return nil
		}
		return v.Patches
	}).(HelmReleaseSpecPostrenderersKustomizePatchesArrayOutput)
}

// JSON 6902 patches, defined as inline YAML objects.
func (o HelmReleaseSpecPostrenderersKustomizePtrOutput) PatchesJson6902() HelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostrenderersKustomize) []HelmReleaseSpecPostrenderersKustomizePatchesjson6902 {
		if v == nil {
			return nil
		}
		return v.PatchesJson6902
	}).(HelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayOutput)
}

// Strategic merge patches, defined as inline YAML objects.
func (o HelmReleaseSpecPostrenderersKustomizePtrOutput) PatchesStrategicMerge() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostrenderersKustomize) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.PatchesStrategicMerge
	}).(pulumi.MapArrayOutput)
}

// Image contains an image name, a new name, a new tag or digest, which will replace the original name and tag.
type HelmReleaseSpecPostrenderersKustomizeImages struct {
	// Digest is the value used to replace the original image tag. If digest is present NewTag value is ignored.
	Digest *string `pulumi:"digest"`
	// Name is a tag-less image name.
	Name string `pulumi:"name"`
	// NewName is the value used to replace the original name.
	NewName *string `pulumi:"newName"`
	// NewTag is the value used to replace the original tag.
	NewTag *string `pulumi:"newTag"`
}

// HelmReleaseSpecPostrenderersKustomizeImagesInput is an input type that accepts HelmReleaseSpecPostrenderersKustomizeImagesArgs and HelmReleaseSpecPostrenderersKustomizeImagesOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostrenderersKustomizeImagesInput` via:
//
//          HelmReleaseSpecPostrenderersKustomizeImagesArgs{...}
type HelmReleaseSpecPostrenderersKustomizeImagesInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostrenderersKustomizeImagesOutput() HelmReleaseSpecPostrenderersKustomizeImagesOutput
	ToHelmReleaseSpecPostrenderersKustomizeImagesOutputWithContext(context.Context) HelmReleaseSpecPostrenderersKustomizeImagesOutput
}

// Image contains an image name, a new name, a new tag or digest, which will replace the original name and tag.
type HelmReleaseSpecPostrenderersKustomizeImagesArgs struct {
	// Digest is the value used to replace the original image tag. If digest is present NewTag value is ignored.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// Name is a tag-less image name.
	Name pulumi.StringInput `pulumi:"name"`
	// NewName is the value used to replace the original name.
	NewName pulumi.StringPtrInput `pulumi:"newName"`
	// NewTag is the value used to replace the original tag.
	NewTag pulumi.StringPtrInput `pulumi:"newTag"`
}

func (HelmReleaseSpecPostrenderersKustomizeImagesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostrenderersKustomizeImages)(nil)).Elem()
}

func (i HelmReleaseSpecPostrenderersKustomizeImagesArgs) ToHelmReleaseSpecPostrenderersKustomizeImagesOutput() HelmReleaseSpecPostrenderersKustomizeImagesOutput {
	return i.ToHelmReleaseSpecPostrenderersKustomizeImagesOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostrenderersKustomizeImagesArgs) ToHelmReleaseSpecPostrenderersKustomizeImagesOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizeImagesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostrenderersKustomizeImagesOutput)
}

// HelmReleaseSpecPostrenderersKustomizeImagesArrayInput is an input type that accepts HelmReleaseSpecPostrenderersKustomizeImagesArray and HelmReleaseSpecPostrenderersKustomizeImagesArrayOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostrenderersKustomizeImagesArrayInput` via:
//
//          HelmReleaseSpecPostrenderersKustomizeImagesArray{ HelmReleaseSpecPostrenderersKustomizeImagesArgs{...} }
type HelmReleaseSpecPostrenderersKustomizeImagesArrayInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostrenderersKustomizeImagesArrayOutput() HelmReleaseSpecPostrenderersKustomizeImagesArrayOutput
	ToHelmReleaseSpecPostrenderersKustomizeImagesArrayOutputWithContext(context.Context) HelmReleaseSpecPostrenderersKustomizeImagesArrayOutput
}

type HelmReleaseSpecPostrenderersKustomizeImagesArray []HelmReleaseSpecPostrenderersKustomizeImagesInput

func (HelmReleaseSpecPostrenderersKustomizeImagesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecPostrenderersKustomizeImages)(nil)).Elem()
}

func (i HelmReleaseSpecPostrenderersKustomizeImagesArray) ToHelmReleaseSpecPostrenderersKustomizeImagesArrayOutput() HelmReleaseSpecPostrenderersKustomizeImagesArrayOutput {
	return i.ToHelmReleaseSpecPostrenderersKustomizeImagesArrayOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostrenderersKustomizeImagesArray) ToHelmReleaseSpecPostrenderersKustomizeImagesArrayOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizeImagesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostrenderersKustomizeImagesArrayOutput)
}

// Image contains an image name, a new name, a new tag or digest, which will replace the original name and tag.
type HelmReleaseSpecPostrenderersKustomizeImagesOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostrenderersKustomizeImagesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostrenderersKustomizeImages)(nil)).Elem()
}

func (o HelmReleaseSpecPostrenderersKustomizeImagesOutput) ToHelmReleaseSpecPostrenderersKustomizeImagesOutput() HelmReleaseSpecPostrenderersKustomizeImagesOutput {
	return o
}

func (o HelmReleaseSpecPostrenderersKustomizeImagesOutput) ToHelmReleaseSpecPostrenderersKustomizeImagesOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizeImagesOutput {
	return o
}

// Digest is the value used to replace the original image tag. If digest is present NewTag value is ignored.
func (o HelmReleaseSpecPostrenderersKustomizeImagesOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomizeImages) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// Name is a tag-less image name.
func (o HelmReleaseSpecPostrenderersKustomizeImagesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomizeImages) string { return v.Name }).(pulumi.StringOutput)
}

// NewName is the value used to replace the original name.
func (o HelmReleaseSpecPostrenderersKustomizeImagesOutput) NewName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomizeImages) *string { return v.NewName }).(pulumi.StringPtrOutput)
}

// NewTag is the value used to replace the original tag.
func (o HelmReleaseSpecPostrenderersKustomizeImagesOutput) NewTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomizeImages) *string { return v.NewTag }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecPostrenderersKustomizeImagesArrayOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostrenderersKustomizeImagesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecPostrenderersKustomizeImages)(nil)).Elem()
}

func (o HelmReleaseSpecPostrenderersKustomizeImagesArrayOutput) ToHelmReleaseSpecPostrenderersKustomizeImagesArrayOutput() HelmReleaseSpecPostrenderersKustomizeImagesArrayOutput {
	return o
}

func (o HelmReleaseSpecPostrenderersKustomizeImagesArrayOutput) ToHelmReleaseSpecPostrenderersKustomizeImagesArrayOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizeImagesArrayOutput {
	return o
}

func (o HelmReleaseSpecPostrenderersKustomizeImagesArrayOutput) Index(i pulumi.IntInput) HelmReleaseSpecPostrenderersKustomizeImagesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmReleaseSpecPostrenderersKustomizeImages {
		return vs[0].([]HelmReleaseSpecPostrenderersKustomizeImages)[vs[1].(int)]
	}).(HelmReleaseSpecPostrenderersKustomizeImagesOutput)
}

// Patch contains an inline StrategicMerge or JSON6902 patch, and the target the patch should be applied to.
type HelmReleaseSpecPostrenderersKustomizePatches struct {
	// Patch contains an inline StrategicMerge patch or an inline JSON6902 patch with an array of operation objects.
	Patch *string `pulumi:"patch"`
	// Target points to the resources that the patch document should be applied to.
	Target *HelmReleaseSpecPostrenderersKustomizePatchesTarget `pulumi:"target"`
}

// HelmReleaseSpecPostrenderersKustomizePatchesInput is an input type that accepts HelmReleaseSpecPostrenderersKustomizePatchesArgs and HelmReleaseSpecPostrenderersKustomizePatchesOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostrenderersKustomizePatchesInput` via:
//
//          HelmReleaseSpecPostrenderersKustomizePatchesArgs{...}
type HelmReleaseSpecPostrenderersKustomizePatchesInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostrenderersKustomizePatchesOutput() HelmReleaseSpecPostrenderersKustomizePatchesOutput
	ToHelmReleaseSpecPostrenderersKustomizePatchesOutputWithContext(context.Context) HelmReleaseSpecPostrenderersKustomizePatchesOutput
}

// Patch contains an inline StrategicMerge or JSON6902 patch, and the target the patch should be applied to.
type HelmReleaseSpecPostrenderersKustomizePatchesArgs struct {
	// Patch contains an inline StrategicMerge patch or an inline JSON6902 patch with an array of operation objects.
	Patch pulumi.StringPtrInput `pulumi:"patch"`
	// Target points to the resources that the patch document should be applied to.
	Target HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrInput `pulumi:"target"`
}

func (HelmReleaseSpecPostrenderersKustomizePatchesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostrenderersKustomizePatches)(nil)).Elem()
}

func (i HelmReleaseSpecPostrenderersKustomizePatchesArgs) ToHelmReleaseSpecPostrenderersKustomizePatchesOutput() HelmReleaseSpecPostrenderersKustomizePatchesOutput {
	return i.ToHelmReleaseSpecPostrenderersKustomizePatchesOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostrenderersKustomizePatchesArgs) ToHelmReleaseSpecPostrenderersKustomizePatchesOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizePatchesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostrenderersKustomizePatchesOutput)
}

// HelmReleaseSpecPostrenderersKustomizePatchesArrayInput is an input type that accepts HelmReleaseSpecPostrenderersKustomizePatchesArray and HelmReleaseSpecPostrenderersKustomizePatchesArrayOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostrenderersKustomizePatchesArrayInput` via:
//
//          HelmReleaseSpecPostrenderersKustomizePatchesArray{ HelmReleaseSpecPostrenderersKustomizePatchesArgs{...} }
type HelmReleaseSpecPostrenderersKustomizePatchesArrayInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostrenderersKustomizePatchesArrayOutput() HelmReleaseSpecPostrenderersKustomizePatchesArrayOutput
	ToHelmReleaseSpecPostrenderersKustomizePatchesArrayOutputWithContext(context.Context) HelmReleaseSpecPostrenderersKustomizePatchesArrayOutput
}

type HelmReleaseSpecPostrenderersKustomizePatchesArray []HelmReleaseSpecPostrenderersKustomizePatchesInput

func (HelmReleaseSpecPostrenderersKustomizePatchesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecPostrenderersKustomizePatches)(nil)).Elem()
}

func (i HelmReleaseSpecPostrenderersKustomizePatchesArray) ToHelmReleaseSpecPostrenderersKustomizePatchesArrayOutput() HelmReleaseSpecPostrenderersKustomizePatchesArrayOutput {
	return i.ToHelmReleaseSpecPostrenderersKustomizePatchesArrayOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostrenderersKustomizePatchesArray) ToHelmReleaseSpecPostrenderersKustomizePatchesArrayOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizePatchesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostrenderersKustomizePatchesArrayOutput)
}

// Patch contains an inline StrategicMerge or JSON6902 patch, and the target the patch should be applied to.
type HelmReleaseSpecPostrenderersKustomizePatchesOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostrenderersKustomizePatchesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostrenderersKustomizePatches)(nil)).Elem()
}

func (o HelmReleaseSpecPostrenderersKustomizePatchesOutput) ToHelmReleaseSpecPostrenderersKustomizePatchesOutput() HelmReleaseSpecPostrenderersKustomizePatchesOutput {
	return o
}

func (o HelmReleaseSpecPostrenderersKustomizePatchesOutput) ToHelmReleaseSpecPostrenderersKustomizePatchesOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizePatchesOutput {
	return o
}

// Patch contains an inline StrategicMerge patch or an inline JSON6902 patch with an array of operation objects.
func (o HelmReleaseSpecPostrenderersKustomizePatchesOutput) Patch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomizePatches) *string { return v.Patch }).(pulumi.StringPtrOutput)
}

// Target points to the resources that the patch document should be applied to.
func (o HelmReleaseSpecPostrenderersKustomizePatchesOutput) Target() HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomizePatches) *HelmReleaseSpecPostrenderersKustomizePatchesTarget {
		return v.Target
	}).(HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput)
}

type HelmReleaseSpecPostrenderersKustomizePatchesArrayOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostrenderersKustomizePatchesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecPostrenderersKustomizePatches)(nil)).Elem()
}

func (o HelmReleaseSpecPostrenderersKustomizePatchesArrayOutput) ToHelmReleaseSpecPostrenderersKustomizePatchesArrayOutput() HelmReleaseSpecPostrenderersKustomizePatchesArrayOutput {
	return o
}

func (o HelmReleaseSpecPostrenderersKustomizePatchesArrayOutput) ToHelmReleaseSpecPostrenderersKustomizePatchesArrayOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizePatchesArrayOutput {
	return o
}

func (o HelmReleaseSpecPostrenderersKustomizePatchesArrayOutput) Index(i pulumi.IntInput) HelmReleaseSpecPostrenderersKustomizePatchesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmReleaseSpecPostrenderersKustomizePatches {
		return vs[0].([]HelmReleaseSpecPostrenderersKustomizePatches)[vs[1].(int)]
	}).(HelmReleaseSpecPostrenderersKustomizePatchesOutput)
}

// Target points to the resources that the patch document should be applied to.
type HelmReleaseSpecPostrenderersKustomizePatchesTarget struct {
	// AnnotationSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource annotations.
	AnnotationSelector *string `pulumi:"annotationSelector"`
	// Group is the API group to select resources from. Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Group *string `pulumi:"group"`
	// Kind of the API Group to select resources from. Together with Group and Version it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Kind *string `pulumi:"kind"`
	// LabelSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource labels.
	LabelSelector *string `pulumi:"labelSelector"`
	// Name to match resources with.
	Name *string `pulumi:"name"`
	// Namespace to select resources from.
	Namespace *string `pulumi:"namespace"`
	// Version of the API Group to select resources from. Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Version *string `pulumi:"version"`
}

// HelmReleaseSpecPostrenderersKustomizePatchesTargetInput is an input type that accepts HelmReleaseSpecPostrenderersKustomizePatchesTargetArgs and HelmReleaseSpecPostrenderersKustomizePatchesTargetOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostrenderersKustomizePatchesTargetInput` via:
//
//          HelmReleaseSpecPostrenderersKustomizePatchesTargetArgs{...}
type HelmReleaseSpecPostrenderersKustomizePatchesTargetInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostrenderersKustomizePatchesTargetOutput() HelmReleaseSpecPostrenderersKustomizePatchesTargetOutput
	ToHelmReleaseSpecPostrenderersKustomizePatchesTargetOutputWithContext(context.Context) HelmReleaseSpecPostrenderersKustomizePatchesTargetOutput
}

// Target points to the resources that the patch document should be applied to.
type HelmReleaseSpecPostrenderersKustomizePatchesTargetArgs struct {
	// AnnotationSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource annotations.
	AnnotationSelector pulumi.StringPtrInput `pulumi:"annotationSelector"`
	// Group is the API group to select resources from. Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind of the API Group to select resources from. Together with Group and Version it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// LabelSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource labels.
	LabelSelector pulumi.StringPtrInput `pulumi:"labelSelector"`
	// Name to match resources with.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace to select resources from.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Version of the API Group to select resources from. Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (HelmReleaseSpecPostrenderersKustomizePatchesTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostrenderersKustomizePatchesTarget)(nil)).Elem()
}

func (i HelmReleaseSpecPostrenderersKustomizePatchesTargetArgs) ToHelmReleaseSpecPostrenderersKustomizePatchesTargetOutput() HelmReleaseSpecPostrenderersKustomizePatchesTargetOutput {
	return i.ToHelmReleaseSpecPostrenderersKustomizePatchesTargetOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostrenderersKustomizePatchesTargetArgs) ToHelmReleaseSpecPostrenderersKustomizePatchesTargetOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizePatchesTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostrenderersKustomizePatchesTargetOutput)
}

func (i HelmReleaseSpecPostrenderersKustomizePatchesTargetArgs) ToHelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput() HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput {
	return i.ToHelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostrenderersKustomizePatchesTargetArgs) ToHelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostrenderersKustomizePatchesTargetOutput).ToHelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutputWithContext(ctx)
}

// HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrInput is an input type that accepts HelmReleaseSpecPostrenderersKustomizePatchesTargetArgs, HelmReleaseSpecPostrenderersKustomizePatchesTargetPtr and HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrInput` via:
//
//          HelmReleaseSpecPostrenderersKustomizePatchesTargetArgs{...}
//
//  or:
//
//          nil
type HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput() HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput
	ToHelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutputWithContext(context.Context) HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput
}

type helmReleaseSpecPostrenderersKustomizePatchesTargetPtrType HelmReleaseSpecPostrenderersKustomizePatchesTargetArgs

func HelmReleaseSpecPostrenderersKustomizePatchesTargetPtr(v *HelmReleaseSpecPostrenderersKustomizePatchesTargetArgs) HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrInput {
	return (*helmReleaseSpecPostrenderersKustomizePatchesTargetPtrType)(v)
}

func (*helmReleaseSpecPostrenderersKustomizePatchesTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecPostrenderersKustomizePatchesTarget)(nil)).Elem()
}

func (i *helmReleaseSpecPostrenderersKustomizePatchesTargetPtrType) ToHelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput() HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput {
	return i.ToHelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecPostrenderersKustomizePatchesTargetPtrType) ToHelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput)
}

// Target points to the resources that the patch document should be applied to.
type HelmReleaseSpecPostrenderersKustomizePatchesTargetOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostrenderersKustomizePatchesTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostrenderersKustomizePatchesTarget)(nil)).Elem()
}

func (o HelmReleaseSpecPostrenderersKustomizePatchesTargetOutput) ToHelmReleaseSpecPostrenderersKustomizePatchesTargetOutput() HelmReleaseSpecPostrenderersKustomizePatchesTargetOutput {
	return o
}

func (o HelmReleaseSpecPostrenderersKustomizePatchesTargetOutput) ToHelmReleaseSpecPostrenderersKustomizePatchesTargetOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizePatchesTargetOutput {
	return o
}

func (o HelmReleaseSpecPostrenderersKustomizePatchesTargetOutput) ToHelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput() HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput {
	return o.ToHelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecPostrenderersKustomizePatchesTargetOutput) ToHelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecPostrenderersKustomizePatchesTarget) *HelmReleaseSpecPostrenderersKustomizePatchesTarget {
		return &v
	}).(HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput)
}

// AnnotationSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource annotations.
func (o HelmReleaseSpecPostrenderersKustomizePatchesTargetOutput) AnnotationSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomizePatchesTarget) *string { return v.AnnotationSelector }).(pulumi.StringPtrOutput)
}

// Group is the API group to select resources from. Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostrenderersKustomizePatchesTargetOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomizePatchesTarget) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind of the API Group to select resources from. Together with Group and Version it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostrenderersKustomizePatchesTargetOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomizePatchesTarget) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// LabelSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource labels.
func (o HelmReleaseSpecPostrenderersKustomizePatchesTargetOutput) LabelSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomizePatchesTarget) *string { return v.LabelSelector }).(pulumi.StringPtrOutput)
}

// Name to match resources with.
func (o HelmReleaseSpecPostrenderersKustomizePatchesTargetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomizePatchesTarget) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace to select resources from.
func (o HelmReleaseSpecPostrenderersKustomizePatchesTargetOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomizePatchesTarget) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Version of the API Group to select resources from. Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostrenderersKustomizePatchesTargetOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomizePatchesTarget) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecPostrenderersKustomizePatchesTarget)(nil)).Elem()
}

func (o HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput) ToHelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput() HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput {
	return o
}

func (o HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput) ToHelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput {
	return o
}

func (o HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput) Elem() HelmReleaseSpecPostrenderersKustomizePatchesTargetOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostrenderersKustomizePatchesTarget) HelmReleaseSpecPostrenderersKustomizePatchesTarget {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecPostrenderersKustomizePatchesTarget
		return ret
	}).(HelmReleaseSpecPostrenderersKustomizePatchesTargetOutput)
}

// AnnotationSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource annotations.
func (o HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput) AnnotationSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostrenderersKustomizePatchesTarget) *string {
		if v == nil {
			return nil
		}
		return v.AnnotationSelector
	}).(pulumi.StringPtrOutput)
}

// Group is the API group to select resources from. Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostrenderersKustomizePatchesTarget) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Kind of the API Group to select resources from. Together with Group and Version it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostrenderersKustomizePatchesTarget) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// LabelSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource labels.
func (o HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput) LabelSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostrenderersKustomizePatchesTarget) *string {
		if v == nil {
			return nil
		}
		return v.LabelSelector
	}).(pulumi.StringPtrOutput)
}

// Name to match resources with.
func (o HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostrenderersKustomizePatchesTarget) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace to select resources from.
func (o HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostrenderersKustomizePatchesTarget) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Version of the API Group to select resources from. Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostrenderersKustomizePatchesTarget) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// JSON6902Patch contains a JSON6902 patch and the target the patch should be applied to.
type HelmReleaseSpecPostrenderersKustomizePatchesjson6902 struct {
	// Patch contains the JSON6902 patch document with an array of operation objects.
	Patch []HelmReleaseSpecPostrenderersKustomizePatchesjson6902Patch `pulumi:"patch"`
	// Target points to the resources that the patch document should be applied to.
	Target HelmReleaseSpecPostrenderersKustomizePatchesjson6902Target `pulumi:"target"`
}

// HelmReleaseSpecPostrenderersKustomizePatchesjson6902Input is an input type that accepts HelmReleaseSpecPostrenderersKustomizePatchesjson6902Args and HelmReleaseSpecPostrenderersKustomizePatchesjson6902Output values.
// You can construct a concrete instance of `HelmReleaseSpecPostrenderersKustomizePatchesjson6902Input` via:
//
//          HelmReleaseSpecPostrenderersKustomizePatchesjson6902Args{...}
type HelmReleaseSpecPostrenderersKustomizePatchesjson6902Input interface {
	pulumi.Input

	ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902Output() HelmReleaseSpecPostrenderersKustomizePatchesjson6902Output
	ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902OutputWithContext(context.Context) HelmReleaseSpecPostrenderersKustomizePatchesjson6902Output
}

// JSON6902Patch contains a JSON6902 patch and the target the patch should be applied to.
type HelmReleaseSpecPostrenderersKustomizePatchesjson6902Args struct {
	// Patch contains the JSON6902 patch document with an array of operation objects.
	Patch HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArrayInput `pulumi:"patch"`
	// Target points to the resources that the patch document should be applied to.
	Target HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetInput `pulumi:"target"`
}

func (HelmReleaseSpecPostrenderersKustomizePatchesjson6902Args) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostrenderersKustomizePatchesjson6902)(nil)).Elem()
}

func (i HelmReleaseSpecPostrenderersKustomizePatchesjson6902Args) ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902Output() HelmReleaseSpecPostrenderersKustomizePatchesjson6902Output {
	return i.ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902OutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostrenderersKustomizePatchesjson6902Args) ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902OutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizePatchesjson6902Output {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostrenderersKustomizePatchesjson6902Output)
}

// HelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayInput is an input type that accepts HelmReleaseSpecPostrenderersKustomizePatchesjson6902Array and HelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayInput` via:
//
//          HelmReleaseSpecPostrenderersKustomizePatchesjson6902Array{ HelmReleaseSpecPostrenderersKustomizePatchesjson6902Args{...} }
type HelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayOutput() HelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayOutput
	ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayOutputWithContext(context.Context) HelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayOutput
}

type HelmReleaseSpecPostrenderersKustomizePatchesjson6902Array []HelmReleaseSpecPostrenderersKustomizePatchesjson6902Input

func (HelmReleaseSpecPostrenderersKustomizePatchesjson6902Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecPostrenderersKustomizePatchesjson6902)(nil)).Elem()
}

func (i HelmReleaseSpecPostrenderersKustomizePatchesjson6902Array) ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayOutput() HelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayOutput {
	return i.ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostrenderersKustomizePatchesjson6902Array) ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayOutput)
}

// JSON6902Patch contains a JSON6902 patch and the target the patch should be applied to.
type HelmReleaseSpecPostrenderersKustomizePatchesjson6902Output struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostrenderersKustomizePatchesjson6902Output) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostrenderersKustomizePatchesjson6902)(nil)).Elem()
}

func (o HelmReleaseSpecPostrenderersKustomizePatchesjson6902Output) ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902Output() HelmReleaseSpecPostrenderersKustomizePatchesjson6902Output {
	return o
}

func (o HelmReleaseSpecPostrenderersKustomizePatchesjson6902Output) ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902OutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizePatchesjson6902Output {
	return o
}

// Patch contains the JSON6902 patch document with an array of operation objects.
func (o HelmReleaseSpecPostrenderersKustomizePatchesjson6902Output) Patch() HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomizePatchesjson6902) []HelmReleaseSpecPostrenderersKustomizePatchesjson6902Patch {
		return v.Patch
	}).(HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArrayOutput)
}

// Target points to the resources that the patch document should be applied to.
func (o HelmReleaseSpecPostrenderersKustomizePatchesjson6902Output) Target() HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomizePatchesjson6902) HelmReleaseSpecPostrenderersKustomizePatchesjson6902Target {
		return v.Target
	}).(HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetOutput)
}

type HelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecPostrenderersKustomizePatchesjson6902)(nil)).Elem()
}

func (o HelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayOutput) ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayOutput() HelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayOutput {
	return o
}

func (o HelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayOutput) ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayOutput {
	return o
}

func (o HelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayOutput) Index(i pulumi.IntInput) HelmReleaseSpecPostrenderersKustomizePatchesjson6902Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmReleaseSpecPostrenderersKustomizePatchesjson6902 {
		return vs[0].([]HelmReleaseSpecPostrenderersKustomizePatchesjson6902)[vs[1].(int)]
	}).(HelmReleaseSpecPostrenderersKustomizePatchesjson6902Output)
}

// JSON6902 is a JSON6902 operation object. https://datatracker.ietf.org/doc/html/rfc6902#section-4
type HelmReleaseSpecPostrenderersKustomizePatchesjson6902Patch struct {
	// From contains a JSON-pointer value that references a location within the target document where the operation is performed. The meaning of the value depends on the value of Op, and is NOT taken into account by all operations.
	From *string `pulumi:"from"`
	// Op indicates the operation to perform. Its value MUST be one of "add", "remove", "replace", "move", "copy", or "test". https://datatracker.ietf.org/doc/html/rfc6902#section-4
	Op string `pulumi:"op"`
	// Path contains the JSON-pointer value that references a location within the target document where the operation is performed. The meaning of the value depends on the value of Op.
	Path string `pulumi:"path"`
	// Value contains a valid JSON structure. The meaning of the value depends on the value of Op, and is NOT taken into account by all operations.
	Value map[string]interface{} `pulumi:"value"`
}

// HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchInput is an input type that accepts HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArgs and HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchInput` via:
//
//          HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArgs{...}
type HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchOutput() HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchOutput
	ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchOutputWithContext(context.Context) HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchOutput
}

// JSON6902 is a JSON6902 operation object. https://datatracker.ietf.org/doc/html/rfc6902#section-4
type HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArgs struct {
	// From contains a JSON-pointer value that references a location within the target document where the operation is performed. The meaning of the value depends on the value of Op, and is NOT taken into account by all operations.
	From pulumi.StringPtrInput `pulumi:"from"`
	// Op indicates the operation to perform. Its value MUST be one of "add", "remove", "replace", "move", "copy", or "test". https://datatracker.ietf.org/doc/html/rfc6902#section-4
	Op pulumi.StringInput `pulumi:"op"`
	// Path contains the JSON-pointer value that references a location within the target document where the operation is performed. The meaning of the value depends on the value of Op.
	Path pulumi.StringInput `pulumi:"path"`
	// Value contains a valid JSON structure. The meaning of the value depends on the value of Op, and is NOT taken into account by all operations.
	Value pulumi.MapInput `pulumi:"value"`
}

func (HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostrenderersKustomizePatchesjson6902Patch)(nil)).Elem()
}

func (i HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArgs) ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchOutput() HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchOutput {
	return i.ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArgs) ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchOutput)
}

// HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArrayInput is an input type that accepts HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArray and HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArrayOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArrayInput` via:
//
//          HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArray{ HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArgs{...} }
type HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArrayInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArrayOutput() HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArrayOutput
	ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArrayOutputWithContext(context.Context) HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArrayOutput
}

type HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArray []HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchInput

func (HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecPostrenderersKustomizePatchesjson6902Patch)(nil)).Elem()
}

func (i HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArray) ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArrayOutput() HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArrayOutput {
	return i.ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArrayOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArray) ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArrayOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArrayOutput)
}

// JSON6902 is a JSON6902 operation object. https://datatracker.ietf.org/doc/html/rfc6902#section-4
type HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostrenderersKustomizePatchesjson6902Patch)(nil)).Elem()
}

func (o HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchOutput) ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchOutput() HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchOutput {
	return o
}

func (o HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchOutput) ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchOutput {
	return o
}

// From contains a JSON-pointer value that references a location within the target document where the operation is performed. The meaning of the value depends on the value of Op, and is NOT taken into account by all operations.
func (o HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomizePatchesjson6902Patch) *string { return v.From }).(pulumi.StringPtrOutput)
}

// Op indicates the operation to perform. Its value MUST be one of "add", "remove", "replace", "move", "copy", or "test". https://datatracker.ietf.org/doc/html/rfc6902#section-4
func (o HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchOutput) Op() pulumi.StringOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomizePatchesjson6902Patch) string { return v.Op }).(pulumi.StringOutput)
}

// Path contains the JSON-pointer value that references a location within the target document where the operation is performed. The meaning of the value depends on the value of Op.
func (o HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomizePatchesjson6902Patch) string { return v.Path }).(pulumi.StringOutput)
}

// Value contains a valid JSON structure. The meaning of the value depends on the value of Op, and is NOT taken into account by all operations.
func (o HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchOutput) Value() pulumi.MapOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomizePatchesjson6902Patch) map[string]interface{} {
		return v.Value
	}).(pulumi.MapOutput)
}

type HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArrayOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecPostrenderersKustomizePatchesjson6902Patch)(nil)).Elem()
}

func (o HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArrayOutput) ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArrayOutput() HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArrayOutput {
	return o
}

func (o HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArrayOutput) ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArrayOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArrayOutput {
	return o
}

func (o HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArrayOutput) Index(i pulumi.IntInput) HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmReleaseSpecPostrenderersKustomizePatchesjson6902Patch {
		return vs[0].([]HelmReleaseSpecPostrenderersKustomizePatchesjson6902Patch)[vs[1].(int)]
	}).(HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchOutput)
}

// Target points to the resources that the patch document should be applied to.
type HelmReleaseSpecPostrenderersKustomizePatchesjson6902Target struct {
	// AnnotationSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource annotations.
	AnnotationSelector *string `pulumi:"annotationSelector"`
	// Group is the API group to select resources from. Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Group *string `pulumi:"group"`
	// Kind of the API Group to select resources from. Together with Group and Version it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Kind *string `pulumi:"kind"`
	// LabelSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource labels.
	LabelSelector *string `pulumi:"labelSelector"`
	// Name to match resources with.
	Name *string `pulumi:"name"`
	// Namespace to select resources from.
	Namespace *string `pulumi:"namespace"`
	// Version of the API Group to select resources from. Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Version *string `pulumi:"version"`
}

// HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetInput is an input type that accepts HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetArgs and HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetInput` via:
//
//          HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetArgs{...}
type HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetOutput() HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetOutput
	ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetOutputWithContext(context.Context) HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetOutput
}

// Target points to the resources that the patch document should be applied to.
type HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetArgs struct {
	// AnnotationSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource annotations.
	AnnotationSelector pulumi.StringPtrInput `pulumi:"annotationSelector"`
	// Group is the API group to select resources from. Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind of the API Group to select resources from. Together with Group and Version it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// LabelSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource labels.
	LabelSelector pulumi.StringPtrInput `pulumi:"labelSelector"`
	// Name to match resources with.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace to select resources from.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Version of the API Group to select resources from. Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostrenderersKustomizePatchesjson6902Target)(nil)).Elem()
}

func (i HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetArgs) ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetOutput() HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetOutput {
	return i.ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetArgs) ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetOutput)
}

// Target points to the resources that the patch document should be applied to.
type HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostrenderersKustomizePatchesjson6902Target)(nil)).Elem()
}

func (o HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetOutput) ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetOutput() HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetOutput {
	return o
}

func (o HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetOutput) ToHelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetOutputWithContext(ctx context.Context) HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetOutput {
	return o
}

// AnnotationSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource annotations.
func (o HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetOutput) AnnotationSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomizePatchesjson6902Target) *string {
		return v.AnnotationSelector
	}).(pulumi.StringPtrOutput)
}

// Group is the API group to select resources from. Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomizePatchesjson6902Target) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind of the API Group to select resources from. Together with Group and Version it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomizePatchesjson6902Target) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// LabelSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource labels.
func (o HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetOutput) LabelSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomizePatchesjson6902Target) *string { return v.LabelSelector }).(pulumi.StringPtrOutput)
}

// Name to match resources with.
func (o HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomizePatchesjson6902Target) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace to select resources from.
func (o HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomizePatchesjson6902Target) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Version of the API Group to select resources from. Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostrenderersKustomizePatchesjson6902Target) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// Rollback holds the configuration for Helm rollback actions for this HelmRelease.
type HelmReleaseSpecRollback struct {
	// CleanupOnFail allows deletion of new resources created during the Helm rollback action when it fails.
	CleanupOnFail *bool `pulumi:"cleanupOnFail"`
	// DisableHooks prevents hooks from running during the Helm rollback action.
	DisableHooks *bool `pulumi:"disableHooks"`
	// DisableWait disables the waiting for resources to be ready after a Helm rollback has been performed.
	DisableWait *bool `pulumi:"disableWait"`
	// DisableWaitForJobs disables waiting for jobs to complete after a Helm rollback has been performed.
	DisableWaitForJobs *bool `pulumi:"disableWaitForJobs"`
	// Force forces resource updates through a replacement strategy.
	Force *bool `pulumi:"force"`
	// Recreate performs pod restarts for the resource if applicable.
	Recreate *bool `pulumi:"recreate"`
	// Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm rollback action. Defaults to 'HelmReleaseSpec.Timeout'.
	Timeout *string `pulumi:"timeout"`
}

// HelmReleaseSpecRollbackInput is an input type that accepts HelmReleaseSpecRollbackArgs and HelmReleaseSpecRollbackOutput values.
// You can construct a concrete instance of `HelmReleaseSpecRollbackInput` via:
//
//          HelmReleaseSpecRollbackArgs{...}
type HelmReleaseSpecRollbackInput interface {
	pulumi.Input

	ToHelmReleaseSpecRollbackOutput() HelmReleaseSpecRollbackOutput
	ToHelmReleaseSpecRollbackOutputWithContext(context.Context) HelmReleaseSpecRollbackOutput
}

// Rollback holds the configuration for Helm rollback actions for this HelmRelease.
type HelmReleaseSpecRollbackArgs struct {
	// CleanupOnFail allows deletion of new resources created during the Helm rollback action when it fails.
	CleanupOnFail pulumi.BoolPtrInput `pulumi:"cleanupOnFail"`
	// DisableHooks prevents hooks from running during the Helm rollback action.
	DisableHooks pulumi.BoolPtrInput `pulumi:"disableHooks"`
	// DisableWait disables the waiting for resources to be ready after a Helm rollback has been performed.
	DisableWait pulumi.BoolPtrInput `pulumi:"disableWait"`
	// DisableWaitForJobs disables waiting for jobs to complete after a Helm rollback has been performed.
	DisableWaitForJobs pulumi.BoolPtrInput `pulumi:"disableWaitForJobs"`
	// Force forces resource updates through a replacement strategy.
	Force pulumi.BoolPtrInput `pulumi:"force"`
	// Recreate performs pod restarts for the resource if applicable.
	Recreate pulumi.BoolPtrInput `pulumi:"recreate"`
	// Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm rollback action. Defaults to 'HelmReleaseSpec.Timeout'.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (HelmReleaseSpecRollbackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecRollback)(nil)).Elem()
}

func (i HelmReleaseSpecRollbackArgs) ToHelmReleaseSpecRollbackOutput() HelmReleaseSpecRollbackOutput {
	return i.ToHelmReleaseSpecRollbackOutputWithContext(context.Background())
}

func (i HelmReleaseSpecRollbackArgs) ToHelmReleaseSpecRollbackOutputWithContext(ctx context.Context) HelmReleaseSpecRollbackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecRollbackOutput)
}

func (i HelmReleaseSpecRollbackArgs) ToHelmReleaseSpecRollbackPtrOutput() HelmReleaseSpecRollbackPtrOutput {
	return i.ToHelmReleaseSpecRollbackPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecRollbackArgs) ToHelmReleaseSpecRollbackPtrOutputWithContext(ctx context.Context) HelmReleaseSpecRollbackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecRollbackOutput).ToHelmReleaseSpecRollbackPtrOutputWithContext(ctx)
}

// HelmReleaseSpecRollbackPtrInput is an input type that accepts HelmReleaseSpecRollbackArgs, HelmReleaseSpecRollbackPtr and HelmReleaseSpecRollbackPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecRollbackPtrInput` via:
//
//          HelmReleaseSpecRollbackArgs{...}
//
//  or:
//
//          nil
type HelmReleaseSpecRollbackPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecRollbackPtrOutput() HelmReleaseSpecRollbackPtrOutput
	ToHelmReleaseSpecRollbackPtrOutputWithContext(context.Context) HelmReleaseSpecRollbackPtrOutput
}

type helmReleaseSpecRollbackPtrType HelmReleaseSpecRollbackArgs

func HelmReleaseSpecRollbackPtr(v *HelmReleaseSpecRollbackArgs) HelmReleaseSpecRollbackPtrInput {
	return (*helmReleaseSpecRollbackPtrType)(v)
}

func (*helmReleaseSpecRollbackPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecRollback)(nil)).Elem()
}

func (i *helmReleaseSpecRollbackPtrType) ToHelmReleaseSpecRollbackPtrOutput() HelmReleaseSpecRollbackPtrOutput {
	return i.ToHelmReleaseSpecRollbackPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecRollbackPtrType) ToHelmReleaseSpecRollbackPtrOutputWithContext(ctx context.Context) HelmReleaseSpecRollbackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecRollbackPtrOutput)
}

// Rollback holds the configuration for Helm rollback actions for this HelmRelease.
type HelmReleaseSpecRollbackOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecRollbackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecRollback)(nil)).Elem()
}

func (o HelmReleaseSpecRollbackOutput) ToHelmReleaseSpecRollbackOutput() HelmReleaseSpecRollbackOutput {
	return o
}

func (o HelmReleaseSpecRollbackOutput) ToHelmReleaseSpecRollbackOutputWithContext(ctx context.Context) HelmReleaseSpecRollbackOutput {
	return o
}

func (o HelmReleaseSpecRollbackOutput) ToHelmReleaseSpecRollbackPtrOutput() HelmReleaseSpecRollbackPtrOutput {
	return o.ToHelmReleaseSpecRollbackPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecRollbackOutput) ToHelmReleaseSpecRollbackPtrOutputWithContext(ctx context.Context) HelmReleaseSpecRollbackPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecRollback) *HelmReleaseSpecRollback {
		return &v
	}).(HelmReleaseSpecRollbackPtrOutput)
}

// CleanupOnFail allows deletion of new resources created during the Helm rollback action when it fails.
func (o HelmReleaseSpecRollbackOutput) CleanupOnFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecRollback) *bool { return v.CleanupOnFail }).(pulumi.BoolPtrOutput)
}

// DisableHooks prevents hooks from running during the Helm rollback action.
func (o HelmReleaseSpecRollbackOutput) DisableHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecRollback) *bool { return v.DisableHooks }).(pulumi.BoolPtrOutput)
}

// DisableWait disables the waiting for resources to be ready after a Helm rollback has been performed.
func (o HelmReleaseSpecRollbackOutput) DisableWait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecRollback) *bool { return v.DisableWait }).(pulumi.BoolPtrOutput)
}

// DisableWaitForJobs disables waiting for jobs to complete after a Helm rollback has been performed.
func (o HelmReleaseSpecRollbackOutput) DisableWaitForJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecRollback) *bool { return v.DisableWaitForJobs }).(pulumi.BoolPtrOutput)
}

// Force forces resource updates through a replacement strategy.
func (o HelmReleaseSpecRollbackOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecRollback) *bool { return v.Force }).(pulumi.BoolPtrOutput)
}

// Recreate performs pod restarts for the resource if applicable.
func (o HelmReleaseSpecRollbackOutput) Recreate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecRollback) *bool { return v.Recreate }).(pulumi.BoolPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm rollback action. Defaults to 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecRollbackOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecRollback) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecRollbackPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecRollbackPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecRollback)(nil)).Elem()
}

func (o HelmReleaseSpecRollbackPtrOutput) ToHelmReleaseSpecRollbackPtrOutput() HelmReleaseSpecRollbackPtrOutput {
	return o
}

func (o HelmReleaseSpecRollbackPtrOutput) ToHelmReleaseSpecRollbackPtrOutputWithContext(ctx context.Context) HelmReleaseSpecRollbackPtrOutput {
	return o
}

func (o HelmReleaseSpecRollbackPtrOutput) Elem() HelmReleaseSpecRollbackOutput {
	return o.ApplyT(func(v *HelmReleaseSpecRollback) HelmReleaseSpecRollback {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecRollback
		return ret
	}).(HelmReleaseSpecRollbackOutput)
}

// CleanupOnFail allows deletion of new resources created during the Helm rollback action when it fails.
func (o HelmReleaseSpecRollbackPtrOutput) CleanupOnFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecRollback) *bool {
		if v == nil {
			return nil
		}
		return v.CleanupOnFail
	}).(pulumi.BoolPtrOutput)
}

// DisableHooks prevents hooks from running during the Helm rollback action.
func (o HelmReleaseSpecRollbackPtrOutput) DisableHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecRollback) *bool {
		if v == nil {
			return nil
		}
		return v.DisableHooks
	}).(pulumi.BoolPtrOutput)
}

// DisableWait disables the waiting for resources to be ready after a Helm rollback has been performed.
func (o HelmReleaseSpecRollbackPtrOutput) DisableWait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecRollback) *bool {
		if v == nil {
			return nil
		}
		return v.DisableWait
	}).(pulumi.BoolPtrOutput)
}

// DisableWaitForJobs disables waiting for jobs to complete after a Helm rollback has been performed.
func (o HelmReleaseSpecRollbackPtrOutput) DisableWaitForJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecRollback) *bool {
		if v == nil {
			return nil
		}
		return v.DisableWaitForJobs
	}).(pulumi.BoolPtrOutput)
}

// Force forces resource updates through a replacement strategy.
func (o HelmReleaseSpecRollbackPtrOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecRollback) *bool {
		if v == nil {
			return nil
		}
		return v.Force
	}).(pulumi.BoolPtrOutput)
}

// Recreate performs pod restarts for the resource if applicable.
func (o HelmReleaseSpecRollbackPtrOutput) Recreate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecRollback) *bool {
		if v == nil {
			return nil
		}
		return v.Recreate
	}).(pulumi.BoolPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm rollback action. Defaults to 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecRollbackPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecRollback) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Test holds the configuration for Helm test actions for this HelmRelease.
type HelmReleaseSpecTest struct {
	// Enable enables Helm test actions for this HelmRelease after an Helm install or upgrade action has been performed.
	Enable *bool `pulumi:"enable"`
	// IgnoreFailures tells the controller to skip remediation when the Helm tests are run but fail. Can be overwritten for tests run after install or upgrade actions in 'Install.IgnoreTestFailures' and 'Upgrade.IgnoreTestFailures'.
	IgnoreFailures *bool `pulumi:"ignoreFailures"`
	// Timeout is the time to wait for any individual Kubernetes operation during the performance of a Helm test action. Defaults to 'HelmReleaseSpec.Timeout'.
	Timeout *string `pulumi:"timeout"`
}

// HelmReleaseSpecTestInput is an input type that accepts HelmReleaseSpecTestArgs and HelmReleaseSpecTestOutput values.
// You can construct a concrete instance of `HelmReleaseSpecTestInput` via:
//
//          HelmReleaseSpecTestArgs{...}
type HelmReleaseSpecTestInput interface {
	pulumi.Input

	ToHelmReleaseSpecTestOutput() HelmReleaseSpecTestOutput
	ToHelmReleaseSpecTestOutputWithContext(context.Context) HelmReleaseSpecTestOutput
}

// Test holds the configuration for Helm test actions for this HelmRelease.
type HelmReleaseSpecTestArgs struct {
	// Enable enables Helm test actions for this HelmRelease after an Helm install or upgrade action has been performed.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
	// IgnoreFailures tells the controller to skip remediation when the Helm tests are run but fail. Can be overwritten for tests run after install or upgrade actions in 'Install.IgnoreTestFailures' and 'Upgrade.IgnoreTestFailures'.
	IgnoreFailures pulumi.BoolPtrInput `pulumi:"ignoreFailures"`
	// Timeout is the time to wait for any individual Kubernetes operation during the performance of a Helm test action. Defaults to 'HelmReleaseSpec.Timeout'.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (HelmReleaseSpecTestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecTest)(nil)).Elem()
}

func (i HelmReleaseSpecTestArgs) ToHelmReleaseSpecTestOutput() HelmReleaseSpecTestOutput {
	return i.ToHelmReleaseSpecTestOutputWithContext(context.Background())
}

func (i HelmReleaseSpecTestArgs) ToHelmReleaseSpecTestOutputWithContext(ctx context.Context) HelmReleaseSpecTestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecTestOutput)
}

func (i HelmReleaseSpecTestArgs) ToHelmReleaseSpecTestPtrOutput() HelmReleaseSpecTestPtrOutput {
	return i.ToHelmReleaseSpecTestPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecTestArgs) ToHelmReleaseSpecTestPtrOutputWithContext(ctx context.Context) HelmReleaseSpecTestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecTestOutput).ToHelmReleaseSpecTestPtrOutputWithContext(ctx)
}

// HelmReleaseSpecTestPtrInput is an input type that accepts HelmReleaseSpecTestArgs, HelmReleaseSpecTestPtr and HelmReleaseSpecTestPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecTestPtrInput` via:
//
//          HelmReleaseSpecTestArgs{...}
//
//  or:
//
//          nil
type HelmReleaseSpecTestPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecTestPtrOutput() HelmReleaseSpecTestPtrOutput
	ToHelmReleaseSpecTestPtrOutputWithContext(context.Context) HelmReleaseSpecTestPtrOutput
}

type helmReleaseSpecTestPtrType HelmReleaseSpecTestArgs

func HelmReleaseSpecTestPtr(v *HelmReleaseSpecTestArgs) HelmReleaseSpecTestPtrInput {
	return (*helmReleaseSpecTestPtrType)(v)
}

func (*helmReleaseSpecTestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecTest)(nil)).Elem()
}

func (i *helmReleaseSpecTestPtrType) ToHelmReleaseSpecTestPtrOutput() HelmReleaseSpecTestPtrOutput {
	return i.ToHelmReleaseSpecTestPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecTestPtrType) ToHelmReleaseSpecTestPtrOutputWithContext(ctx context.Context) HelmReleaseSpecTestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecTestPtrOutput)
}

// Test holds the configuration for Helm test actions for this HelmRelease.
type HelmReleaseSpecTestOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecTestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecTest)(nil)).Elem()
}

func (o HelmReleaseSpecTestOutput) ToHelmReleaseSpecTestOutput() HelmReleaseSpecTestOutput {
	return o
}

func (o HelmReleaseSpecTestOutput) ToHelmReleaseSpecTestOutputWithContext(ctx context.Context) HelmReleaseSpecTestOutput {
	return o
}

func (o HelmReleaseSpecTestOutput) ToHelmReleaseSpecTestPtrOutput() HelmReleaseSpecTestPtrOutput {
	return o.ToHelmReleaseSpecTestPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecTestOutput) ToHelmReleaseSpecTestPtrOutputWithContext(ctx context.Context) HelmReleaseSpecTestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecTest) *HelmReleaseSpecTest {
		return &v
	}).(HelmReleaseSpecTestPtrOutput)
}

// Enable enables Helm test actions for this HelmRelease after an Helm install or upgrade action has been performed.
func (o HelmReleaseSpecTestOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecTest) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// IgnoreFailures tells the controller to skip remediation when the Helm tests are run but fail. Can be overwritten for tests run after install or upgrade actions in 'Install.IgnoreTestFailures' and 'Upgrade.IgnoreTestFailures'.
func (o HelmReleaseSpecTestOutput) IgnoreFailures() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecTest) *bool { return v.IgnoreFailures }).(pulumi.BoolPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation during the performance of a Helm test action. Defaults to 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecTestOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecTest) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecTestPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecTestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecTest)(nil)).Elem()
}

func (o HelmReleaseSpecTestPtrOutput) ToHelmReleaseSpecTestPtrOutput() HelmReleaseSpecTestPtrOutput {
	return o
}

func (o HelmReleaseSpecTestPtrOutput) ToHelmReleaseSpecTestPtrOutputWithContext(ctx context.Context) HelmReleaseSpecTestPtrOutput {
	return o
}

func (o HelmReleaseSpecTestPtrOutput) Elem() HelmReleaseSpecTestOutput {
	return o.ApplyT(func(v *HelmReleaseSpecTest) HelmReleaseSpecTest {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecTest
		return ret
	}).(HelmReleaseSpecTestOutput)
}

// Enable enables Helm test actions for this HelmRelease after an Helm install or upgrade action has been performed.
func (o HelmReleaseSpecTestPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecTest) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// IgnoreFailures tells the controller to skip remediation when the Helm tests are run but fail. Can be overwritten for tests run after install or upgrade actions in 'Install.IgnoreTestFailures' and 'Upgrade.IgnoreTestFailures'.
func (o HelmReleaseSpecTestPtrOutput) IgnoreFailures() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecTest) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreFailures
	}).(pulumi.BoolPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation during the performance of a Helm test action. Defaults to 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecTestPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecTest) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Uninstall holds the configuration for Helm uninstall actions for this HelmRelease.
type HelmReleaseSpecUninstall struct {
	// DisableHooks prevents hooks from running during the Helm rollback action.
	DisableHooks *bool `pulumi:"disableHooks"`
	// DisableWait disables waiting for all the resources to be deleted after a Helm uninstall is performed.
	DisableWait *bool `pulumi:"disableWait"`
	// KeepHistory tells Helm to remove all associated resources and mark the release as deleted, but retain the release history.
	KeepHistory *bool `pulumi:"keepHistory"`
	// Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm uninstall action. Defaults to 'HelmReleaseSpec.Timeout'.
	Timeout *string `pulumi:"timeout"`
}

// HelmReleaseSpecUninstallInput is an input type that accepts HelmReleaseSpecUninstallArgs and HelmReleaseSpecUninstallOutput values.
// You can construct a concrete instance of `HelmReleaseSpecUninstallInput` via:
//
//          HelmReleaseSpecUninstallArgs{...}
type HelmReleaseSpecUninstallInput interface {
	pulumi.Input

	ToHelmReleaseSpecUninstallOutput() HelmReleaseSpecUninstallOutput
	ToHelmReleaseSpecUninstallOutputWithContext(context.Context) HelmReleaseSpecUninstallOutput
}

// Uninstall holds the configuration for Helm uninstall actions for this HelmRelease.
type HelmReleaseSpecUninstallArgs struct {
	// DisableHooks prevents hooks from running during the Helm rollback action.
	DisableHooks pulumi.BoolPtrInput `pulumi:"disableHooks"`
	// DisableWait disables waiting for all the resources to be deleted after a Helm uninstall is performed.
	DisableWait pulumi.BoolPtrInput `pulumi:"disableWait"`
	// KeepHistory tells Helm to remove all associated resources and mark the release as deleted, but retain the release history.
	KeepHistory pulumi.BoolPtrInput `pulumi:"keepHistory"`
	// Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm uninstall action. Defaults to 'HelmReleaseSpec.Timeout'.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (HelmReleaseSpecUninstallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecUninstall)(nil)).Elem()
}

func (i HelmReleaseSpecUninstallArgs) ToHelmReleaseSpecUninstallOutput() HelmReleaseSpecUninstallOutput {
	return i.ToHelmReleaseSpecUninstallOutputWithContext(context.Background())
}

func (i HelmReleaseSpecUninstallArgs) ToHelmReleaseSpecUninstallOutputWithContext(ctx context.Context) HelmReleaseSpecUninstallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecUninstallOutput)
}

func (i HelmReleaseSpecUninstallArgs) ToHelmReleaseSpecUninstallPtrOutput() HelmReleaseSpecUninstallPtrOutput {
	return i.ToHelmReleaseSpecUninstallPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecUninstallArgs) ToHelmReleaseSpecUninstallPtrOutputWithContext(ctx context.Context) HelmReleaseSpecUninstallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecUninstallOutput).ToHelmReleaseSpecUninstallPtrOutputWithContext(ctx)
}

// HelmReleaseSpecUninstallPtrInput is an input type that accepts HelmReleaseSpecUninstallArgs, HelmReleaseSpecUninstallPtr and HelmReleaseSpecUninstallPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecUninstallPtrInput` via:
//
//          HelmReleaseSpecUninstallArgs{...}
//
//  or:
//
//          nil
type HelmReleaseSpecUninstallPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecUninstallPtrOutput() HelmReleaseSpecUninstallPtrOutput
	ToHelmReleaseSpecUninstallPtrOutputWithContext(context.Context) HelmReleaseSpecUninstallPtrOutput
}

type helmReleaseSpecUninstallPtrType HelmReleaseSpecUninstallArgs

func HelmReleaseSpecUninstallPtr(v *HelmReleaseSpecUninstallArgs) HelmReleaseSpecUninstallPtrInput {
	return (*helmReleaseSpecUninstallPtrType)(v)
}

func (*helmReleaseSpecUninstallPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecUninstall)(nil)).Elem()
}

func (i *helmReleaseSpecUninstallPtrType) ToHelmReleaseSpecUninstallPtrOutput() HelmReleaseSpecUninstallPtrOutput {
	return i.ToHelmReleaseSpecUninstallPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecUninstallPtrType) ToHelmReleaseSpecUninstallPtrOutputWithContext(ctx context.Context) HelmReleaseSpecUninstallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecUninstallPtrOutput)
}

// Uninstall holds the configuration for Helm uninstall actions for this HelmRelease.
type HelmReleaseSpecUninstallOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecUninstallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecUninstall)(nil)).Elem()
}

func (o HelmReleaseSpecUninstallOutput) ToHelmReleaseSpecUninstallOutput() HelmReleaseSpecUninstallOutput {
	return o
}

func (o HelmReleaseSpecUninstallOutput) ToHelmReleaseSpecUninstallOutputWithContext(ctx context.Context) HelmReleaseSpecUninstallOutput {
	return o
}

func (o HelmReleaseSpecUninstallOutput) ToHelmReleaseSpecUninstallPtrOutput() HelmReleaseSpecUninstallPtrOutput {
	return o.ToHelmReleaseSpecUninstallPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecUninstallOutput) ToHelmReleaseSpecUninstallPtrOutputWithContext(ctx context.Context) HelmReleaseSpecUninstallPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecUninstall) *HelmReleaseSpecUninstall {
		return &v
	}).(HelmReleaseSpecUninstallPtrOutput)
}

// DisableHooks prevents hooks from running during the Helm rollback action.
func (o HelmReleaseSpecUninstallOutput) DisableHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUninstall) *bool { return v.DisableHooks }).(pulumi.BoolPtrOutput)
}

// DisableWait disables waiting for all the resources to be deleted after a Helm uninstall is performed.
func (o HelmReleaseSpecUninstallOutput) DisableWait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUninstall) *bool { return v.DisableWait }).(pulumi.BoolPtrOutput)
}

// KeepHistory tells Helm to remove all associated resources and mark the release as deleted, but retain the release history.
func (o HelmReleaseSpecUninstallOutput) KeepHistory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUninstall) *bool { return v.KeepHistory }).(pulumi.BoolPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm uninstall action. Defaults to 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecUninstallOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUninstall) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecUninstallPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecUninstallPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecUninstall)(nil)).Elem()
}

func (o HelmReleaseSpecUninstallPtrOutput) ToHelmReleaseSpecUninstallPtrOutput() HelmReleaseSpecUninstallPtrOutput {
	return o
}

func (o HelmReleaseSpecUninstallPtrOutput) ToHelmReleaseSpecUninstallPtrOutputWithContext(ctx context.Context) HelmReleaseSpecUninstallPtrOutput {
	return o
}

func (o HelmReleaseSpecUninstallPtrOutput) Elem() HelmReleaseSpecUninstallOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUninstall) HelmReleaseSpecUninstall {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecUninstall
		return ret
	}).(HelmReleaseSpecUninstallOutput)
}

// DisableHooks prevents hooks from running during the Helm rollback action.
func (o HelmReleaseSpecUninstallPtrOutput) DisableHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUninstall) *bool {
		if v == nil {
			return nil
		}
		return v.DisableHooks
	}).(pulumi.BoolPtrOutput)
}

// DisableWait disables waiting for all the resources to be deleted after a Helm uninstall is performed.
func (o HelmReleaseSpecUninstallPtrOutput) DisableWait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUninstall) *bool {
		if v == nil {
			return nil
		}
		return v.DisableWait
	}).(pulumi.BoolPtrOutput)
}

// KeepHistory tells Helm to remove all associated resources and mark the release as deleted, but retain the release history.
func (o HelmReleaseSpecUninstallPtrOutput) KeepHistory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUninstall) *bool {
		if v == nil {
			return nil
		}
		return v.KeepHistory
	}).(pulumi.BoolPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm uninstall action. Defaults to 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecUninstallPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUninstall) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Upgrade holds the configuration for Helm upgrade actions for this HelmRelease.
type HelmReleaseSpecUpgrade struct {
	// CleanupOnFail allows deletion of new resources created during the Helm upgrade action when it fails.
	CleanupOnFail *bool `pulumi:"cleanupOnFail"`
	// CRDs upgrade CRDs from the Helm Chart's crds directory according to the CRD upgrade policy provided here. Valid values are `Skip`, `Create` or `CreateReplace`. Default is `Skip` and if omitted CRDs are neither installed nor upgraded.
	//  Skip: do neither install nor replace (update) any CRDs.
	//  Create: new CRDs are created, existing CRDs are neither updated nor deleted.
	//  CreateReplace: new CRDs are created, existing CRDs are updated (replaced) but not deleted.
	//  By default, CRDs are not applied during Helm upgrade action. With this option users can opt-in to CRD upgrade, which is not (yet) natively supported by Helm. https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
	Crds *string `pulumi:"crds"`
	// DisableHooks prevents hooks from running during the Helm upgrade action.
	DisableHooks *bool `pulumi:"disableHooks"`
	// DisableOpenAPIValidation prevents the Helm upgrade action from validating rendered templates against the Kubernetes OpenAPI Schema.
	DisableOpenAPIValidation *bool `pulumi:"disableOpenAPIValidation"`
	// DisableWait disables the waiting for resources to be ready after a Helm upgrade has been performed.
	DisableWait *bool `pulumi:"disableWait"`
	// DisableWaitForJobs disables waiting for jobs to complete after a Helm upgrade has been performed.
	DisableWaitForJobs *bool `pulumi:"disableWaitForJobs"`
	// Force forces resource updates through a replacement strategy.
	Force *bool `pulumi:"force"`
	// PreserveValues will make Helm reuse the last release's values and merge in overrides from 'Values'. Setting this flag makes the HelmRelease non-declarative.
	PreserveValues *bool `pulumi:"preserveValues"`
	// Remediation holds the remediation configuration for when the Helm upgrade action for the HelmRelease fails. The default is to not perform any action.
	Remediation *HelmReleaseSpecUpgradeRemediation `pulumi:"remediation"`
	// Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm upgrade action. Defaults to 'HelmReleaseSpec.Timeout'.
	Timeout *string `pulumi:"timeout"`
}

// HelmReleaseSpecUpgradeInput is an input type that accepts HelmReleaseSpecUpgradeArgs and HelmReleaseSpecUpgradeOutput values.
// You can construct a concrete instance of `HelmReleaseSpecUpgradeInput` via:
//
//          HelmReleaseSpecUpgradeArgs{...}
type HelmReleaseSpecUpgradeInput interface {
	pulumi.Input

	ToHelmReleaseSpecUpgradeOutput() HelmReleaseSpecUpgradeOutput
	ToHelmReleaseSpecUpgradeOutputWithContext(context.Context) HelmReleaseSpecUpgradeOutput
}

// Upgrade holds the configuration for Helm upgrade actions for this HelmRelease.
type HelmReleaseSpecUpgradeArgs struct {
	// CleanupOnFail allows deletion of new resources created during the Helm upgrade action when it fails.
	CleanupOnFail pulumi.BoolPtrInput `pulumi:"cleanupOnFail"`
	// CRDs upgrade CRDs from the Helm Chart's crds directory according to the CRD upgrade policy provided here. Valid values are `Skip`, `Create` or `CreateReplace`. Default is `Skip` and if omitted CRDs are neither installed nor upgraded.
	//  Skip: do neither install nor replace (update) any CRDs.
	//  Create: new CRDs are created, existing CRDs are neither updated nor deleted.
	//  CreateReplace: new CRDs are created, existing CRDs are updated (replaced) but not deleted.
	//  By default, CRDs are not applied during Helm upgrade action. With this option users can opt-in to CRD upgrade, which is not (yet) natively supported by Helm. https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
	Crds pulumi.StringPtrInput `pulumi:"crds"`
	// DisableHooks prevents hooks from running during the Helm upgrade action.
	DisableHooks pulumi.BoolPtrInput `pulumi:"disableHooks"`
	// DisableOpenAPIValidation prevents the Helm upgrade action from validating rendered templates against the Kubernetes OpenAPI Schema.
	DisableOpenAPIValidation pulumi.BoolPtrInput `pulumi:"disableOpenAPIValidation"`
	// DisableWait disables the waiting for resources to be ready after a Helm upgrade has been performed.
	DisableWait pulumi.BoolPtrInput `pulumi:"disableWait"`
	// DisableWaitForJobs disables waiting for jobs to complete after a Helm upgrade has been performed.
	DisableWaitForJobs pulumi.BoolPtrInput `pulumi:"disableWaitForJobs"`
	// Force forces resource updates through a replacement strategy.
	Force pulumi.BoolPtrInput `pulumi:"force"`
	// PreserveValues will make Helm reuse the last release's values and merge in overrides from 'Values'. Setting this flag makes the HelmRelease non-declarative.
	PreserveValues pulumi.BoolPtrInput `pulumi:"preserveValues"`
	// Remediation holds the remediation configuration for when the Helm upgrade action for the HelmRelease fails. The default is to not perform any action.
	Remediation HelmReleaseSpecUpgradeRemediationPtrInput `pulumi:"remediation"`
	// Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm upgrade action. Defaults to 'HelmReleaseSpec.Timeout'.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (HelmReleaseSpecUpgradeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecUpgrade)(nil)).Elem()
}

func (i HelmReleaseSpecUpgradeArgs) ToHelmReleaseSpecUpgradeOutput() HelmReleaseSpecUpgradeOutput {
	return i.ToHelmReleaseSpecUpgradeOutputWithContext(context.Background())
}

func (i HelmReleaseSpecUpgradeArgs) ToHelmReleaseSpecUpgradeOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecUpgradeOutput)
}

func (i HelmReleaseSpecUpgradeArgs) ToHelmReleaseSpecUpgradePtrOutput() HelmReleaseSpecUpgradePtrOutput {
	return i.ToHelmReleaseSpecUpgradePtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecUpgradeArgs) ToHelmReleaseSpecUpgradePtrOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecUpgradeOutput).ToHelmReleaseSpecUpgradePtrOutputWithContext(ctx)
}

// HelmReleaseSpecUpgradePtrInput is an input type that accepts HelmReleaseSpecUpgradeArgs, HelmReleaseSpecUpgradePtr and HelmReleaseSpecUpgradePtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecUpgradePtrInput` via:
//
//          HelmReleaseSpecUpgradeArgs{...}
//
//  or:
//
//          nil
type HelmReleaseSpecUpgradePtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecUpgradePtrOutput() HelmReleaseSpecUpgradePtrOutput
	ToHelmReleaseSpecUpgradePtrOutputWithContext(context.Context) HelmReleaseSpecUpgradePtrOutput
}

type helmReleaseSpecUpgradePtrType HelmReleaseSpecUpgradeArgs

func HelmReleaseSpecUpgradePtr(v *HelmReleaseSpecUpgradeArgs) HelmReleaseSpecUpgradePtrInput {
	return (*helmReleaseSpecUpgradePtrType)(v)
}

func (*helmReleaseSpecUpgradePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecUpgrade)(nil)).Elem()
}

func (i *helmReleaseSpecUpgradePtrType) ToHelmReleaseSpecUpgradePtrOutput() HelmReleaseSpecUpgradePtrOutput {
	return i.ToHelmReleaseSpecUpgradePtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecUpgradePtrType) ToHelmReleaseSpecUpgradePtrOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecUpgradePtrOutput)
}

// Upgrade holds the configuration for Helm upgrade actions for this HelmRelease.
type HelmReleaseSpecUpgradeOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecUpgradeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecUpgrade)(nil)).Elem()
}

func (o HelmReleaseSpecUpgradeOutput) ToHelmReleaseSpecUpgradeOutput() HelmReleaseSpecUpgradeOutput {
	return o
}

func (o HelmReleaseSpecUpgradeOutput) ToHelmReleaseSpecUpgradeOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradeOutput {
	return o
}

func (o HelmReleaseSpecUpgradeOutput) ToHelmReleaseSpecUpgradePtrOutput() HelmReleaseSpecUpgradePtrOutput {
	return o.ToHelmReleaseSpecUpgradePtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecUpgradeOutput) ToHelmReleaseSpecUpgradePtrOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecUpgrade) *HelmReleaseSpecUpgrade {
		return &v
	}).(HelmReleaseSpecUpgradePtrOutput)
}

// CleanupOnFail allows deletion of new resources created during the Helm upgrade action when it fails.
func (o HelmReleaseSpecUpgradeOutput) CleanupOnFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgrade) *bool { return v.CleanupOnFail }).(pulumi.BoolPtrOutput)
}

// CRDs upgrade CRDs from the Helm Chart's crds directory according to the CRD upgrade policy provided here. Valid values are `Skip`, `Create` or `CreateReplace`. Default is `Skip` and if omitted CRDs are neither installed nor upgraded.
//  Skip: do neither install nor replace (update) any CRDs.
//  Create: new CRDs are created, existing CRDs are neither updated nor deleted.
//  CreateReplace: new CRDs are created, existing CRDs are updated (replaced) but not deleted.
//  By default, CRDs are not applied during Helm upgrade action. With this option users can opt-in to CRD upgrade, which is not (yet) natively supported by Helm. https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
func (o HelmReleaseSpecUpgradeOutput) Crds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgrade) *string { return v.Crds }).(pulumi.StringPtrOutput)
}

// DisableHooks prevents hooks from running during the Helm upgrade action.
func (o HelmReleaseSpecUpgradeOutput) DisableHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgrade) *bool { return v.DisableHooks }).(pulumi.BoolPtrOutput)
}

// DisableOpenAPIValidation prevents the Helm upgrade action from validating rendered templates against the Kubernetes OpenAPI Schema.
func (o HelmReleaseSpecUpgradeOutput) DisableOpenAPIValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgrade) *bool { return v.DisableOpenAPIValidation }).(pulumi.BoolPtrOutput)
}

// DisableWait disables the waiting for resources to be ready after a Helm upgrade has been performed.
func (o HelmReleaseSpecUpgradeOutput) DisableWait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgrade) *bool { return v.DisableWait }).(pulumi.BoolPtrOutput)
}

// DisableWaitForJobs disables waiting for jobs to complete after a Helm upgrade has been performed.
func (o HelmReleaseSpecUpgradeOutput) DisableWaitForJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgrade) *bool { return v.DisableWaitForJobs }).(pulumi.BoolPtrOutput)
}

// Force forces resource updates through a replacement strategy.
func (o HelmReleaseSpecUpgradeOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgrade) *bool { return v.Force }).(pulumi.BoolPtrOutput)
}

// PreserveValues will make Helm reuse the last release's values and merge in overrides from 'Values'. Setting this flag makes the HelmRelease non-declarative.
func (o HelmReleaseSpecUpgradeOutput) PreserveValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgrade) *bool { return v.PreserveValues }).(pulumi.BoolPtrOutput)
}

// Remediation holds the remediation configuration for when the Helm upgrade action for the HelmRelease fails. The default is to not perform any action.
func (o HelmReleaseSpecUpgradeOutput) Remediation() HelmReleaseSpecUpgradeRemediationPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgrade) *HelmReleaseSpecUpgradeRemediation { return v.Remediation }).(HelmReleaseSpecUpgradeRemediationPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm upgrade action. Defaults to 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecUpgradeOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgrade) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecUpgradePtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecUpgradePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecUpgrade)(nil)).Elem()
}

func (o HelmReleaseSpecUpgradePtrOutput) ToHelmReleaseSpecUpgradePtrOutput() HelmReleaseSpecUpgradePtrOutput {
	return o
}

func (o HelmReleaseSpecUpgradePtrOutput) ToHelmReleaseSpecUpgradePtrOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradePtrOutput {
	return o
}

func (o HelmReleaseSpecUpgradePtrOutput) Elem() HelmReleaseSpecUpgradeOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgrade) HelmReleaseSpecUpgrade {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecUpgrade
		return ret
	}).(HelmReleaseSpecUpgradeOutput)
}

// CleanupOnFail allows deletion of new resources created during the Helm upgrade action when it fails.
func (o HelmReleaseSpecUpgradePtrOutput) CleanupOnFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgrade) *bool {
		if v == nil {
			return nil
		}
		return v.CleanupOnFail
	}).(pulumi.BoolPtrOutput)
}

// CRDs upgrade CRDs from the Helm Chart's crds directory according to the CRD upgrade policy provided here. Valid values are `Skip`, `Create` or `CreateReplace`. Default is `Skip` and if omitted CRDs are neither installed nor upgraded.
//  Skip: do neither install nor replace (update) any CRDs.
//  Create: new CRDs are created, existing CRDs are neither updated nor deleted.
//  CreateReplace: new CRDs are created, existing CRDs are updated (replaced) but not deleted.
//  By default, CRDs are not applied during Helm upgrade action. With this option users can opt-in to CRD upgrade, which is not (yet) natively supported by Helm. https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
func (o HelmReleaseSpecUpgradePtrOutput) Crds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgrade) *string {
		if v == nil {
			return nil
		}
		return v.Crds
	}).(pulumi.StringPtrOutput)
}

// DisableHooks prevents hooks from running during the Helm upgrade action.
func (o HelmReleaseSpecUpgradePtrOutput) DisableHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgrade) *bool {
		if v == nil {
			return nil
		}
		return v.DisableHooks
	}).(pulumi.BoolPtrOutput)
}

// DisableOpenAPIValidation prevents the Helm upgrade action from validating rendered templates against the Kubernetes OpenAPI Schema.
func (o HelmReleaseSpecUpgradePtrOutput) DisableOpenAPIValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgrade) *bool {
		if v == nil {
			return nil
		}
		return v.DisableOpenAPIValidation
	}).(pulumi.BoolPtrOutput)
}

// DisableWait disables the waiting for resources to be ready after a Helm upgrade has been performed.
func (o HelmReleaseSpecUpgradePtrOutput) DisableWait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgrade) *bool {
		if v == nil {
			return nil
		}
		return v.DisableWait
	}).(pulumi.BoolPtrOutput)
}

// DisableWaitForJobs disables waiting for jobs to complete after a Helm upgrade has been performed.
func (o HelmReleaseSpecUpgradePtrOutput) DisableWaitForJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgrade) *bool {
		if v == nil {
			return nil
		}
		return v.DisableWaitForJobs
	}).(pulumi.BoolPtrOutput)
}

// Force forces resource updates through a replacement strategy.
func (o HelmReleaseSpecUpgradePtrOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgrade) *bool {
		if v == nil {
			return nil
		}
		return v.Force
	}).(pulumi.BoolPtrOutput)
}

// PreserveValues will make Helm reuse the last release's values and merge in overrides from 'Values'. Setting this flag makes the HelmRelease non-declarative.
func (o HelmReleaseSpecUpgradePtrOutput) PreserveValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgrade) *bool {
		if v == nil {
			return nil
		}
		return v.PreserveValues
	}).(pulumi.BoolPtrOutput)
}

// Remediation holds the remediation configuration for when the Helm upgrade action for the HelmRelease fails. The default is to not perform any action.
func (o HelmReleaseSpecUpgradePtrOutput) Remediation() HelmReleaseSpecUpgradeRemediationPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgrade) *HelmReleaseSpecUpgradeRemediation {
		if v == nil {
			return nil
		}
		return v.Remediation
	}).(HelmReleaseSpecUpgradeRemediationPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm upgrade action. Defaults to 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecUpgradePtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgrade) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Remediation holds the remediation configuration for when the Helm upgrade action for the HelmRelease fails. The default is to not perform any action.
type HelmReleaseSpecUpgradeRemediation struct {
	// IgnoreTestFailures tells the controller to skip remediation when the Helm tests are run after an upgrade action but fail. Defaults to 'Test.IgnoreFailures'.
	IgnoreTestFailures *bool `pulumi:"ignoreTestFailures"`
	// RemediateLastFailure tells the controller to remediate the last failure, when no retries remain. Defaults to 'false' unless 'Retries' is greater than 0.
	RemediateLastFailure *bool `pulumi:"remediateLastFailure"`
	// Retries is the number of retries that should be attempted on failures before bailing. Remediation, using 'Strategy', is performed between each attempt. Defaults to '0', a negative integer equals to unlimited retries.
	Retries *int `pulumi:"retries"`
	// Strategy to use for failure remediation. Defaults to 'rollback'.
	Strategy *string `pulumi:"strategy"`
}

// HelmReleaseSpecUpgradeRemediationInput is an input type that accepts HelmReleaseSpecUpgradeRemediationArgs and HelmReleaseSpecUpgradeRemediationOutput values.
// You can construct a concrete instance of `HelmReleaseSpecUpgradeRemediationInput` via:
//
//          HelmReleaseSpecUpgradeRemediationArgs{...}
type HelmReleaseSpecUpgradeRemediationInput interface {
	pulumi.Input

	ToHelmReleaseSpecUpgradeRemediationOutput() HelmReleaseSpecUpgradeRemediationOutput
	ToHelmReleaseSpecUpgradeRemediationOutputWithContext(context.Context) HelmReleaseSpecUpgradeRemediationOutput
}

// Remediation holds the remediation configuration for when the Helm upgrade action for the HelmRelease fails. The default is to not perform any action.
type HelmReleaseSpecUpgradeRemediationArgs struct {
	// IgnoreTestFailures tells the controller to skip remediation when the Helm tests are run after an upgrade action but fail. Defaults to 'Test.IgnoreFailures'.
	IgnoreTestFailures pulumi.BoolPtrInput `pulumi:"ignoreTestFailures"`
	// RemediateLastFailure tells the controller to remediate the last failure, when no retries remain. Defaults to 'false' unless 'Retries' is greater than 0.
	RemediateLastFailure pulumi.BoolPtrInput `pulumi:"remediateLastFailure"`
	// Retries is the number of retries that should be attempted on failures before bailing. Remediation, using 'Strategy', is performed between each attempt. Defaults to '0', a negative integer equals to unlimited retries.
	Retries pulumi.IntPtrInput `pulumi:"retries"`
	// Strategy to use for failure remediation. Defaults to 'rollback'.
	Strategy pulumi.StringPtrInput `pulumi:"strategy"`
}

func (HelmReleaseSpecUpgradeRemediationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecUpgradeRemediation)(nil)).Elem()
}

func (i HelmReleaseSpecUpgradeRemediationArgs) ToHelmReleaseSpecUpgradeRemediationOutput() HelmReleaseSpecUpgradeRemediationOutput {
	return i.ToHelmReleaseSpecUpgradeRemediationOutputWithContext(context.Background())
}

func (i HelmReleaseSpecUpgradeRemediationArgs) ToHelmReleaseSpecUpgradeRemediationOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradeRemediationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecUpgradeRemediationOutput)
}

func (i HelmReleaseSpecUpgradeRemediationArgs) ToHelmReleaseSpecUpgradeRemediationPtrOutput() HelmReleaseSpecUpgradeRemediationPtrOutput {
	return i.ToHelmReleaseSpecUpgradeRemediationPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecUpgradeRemediationArgs) ToHelmReleaseSpecUpgradeRemediationPtrOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradeRemediationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecUpgradeRemediationOutput).ToHelmReleaseSpecUpgradeRemediationPtrOutputWithContext(ctx)
}

// HelmReleaseSpecUpgradeRemediationPtrInput is an input type that accepts HelmReleaseSpecUpgradeRemediationArgs, HelmReleaseSpecUpgradeRemediationPtr and HelmReleaseSpecUpgradeRemediationPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecUpgradeRemediationPtrInput` via:
//
//          HelmReleaseSpecUpgradeRemediationArgs{...}
//
//  or:
//
//          nil
type HelmReleaseSpecUpgradeRemediationPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecUpgradeRemediationPtrOutput() HelmReleaseSpecUpgradeRemediationPtrOutput
	ToHelmReleaseSpecUpgradeRemediationPtrOutputWithContext(context.Context) HelmReleaseSpecUpgradeRemediationPtrOutput
}

type helmReleaseSpecUpgradeRemediationPtrType HelmReleaseSpecUpgradeRemediationArgs

func HelmReleaseSpecUpgradeRemediationPtr(v *HelmReleaseSpecUpgradeRemediationArgs) HelmReleaseSpecUpgradeRemediationPtrInput {
	return (*helmReleaseSpecUpgradeRemediationPtrType)(v)
}

func (*helmReleaseSpecUpgradeRemediationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecUpgradeRemediation)(nil)).Elem()
}

func (i *helmReleaseSpecUpgradeRemediationPtrType) ToHelmReleaseSpecUpgradeRemediationPtrOutput() HelmReleaseSpecUpgradeRemediationPtrOutput {
	return i.ToHelmReleaseSpecUpgradeRemediationPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecUpgradeRemediationPtrType) ToHelmReleaseSpecUpgradeRemediationPtrOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradeRemediationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecUpgradeRemediationPtrOutput)
}

// Remediation holds the remediation configuration for when the Helm upgrade action for the HelmRelease fails. The default is to not perform any action.
type HelmReleaseSpecUpgradeRemediationOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecUpgradeRemediationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecUpgradeRemediation)(nil)).Elem()
}

func (o HelmReleaseSpecUpgradeRemediationOutput) ToHelmReleaseSpecUpgradeRemediationOutput() HelmReleaseSpecUpgradeRemediationOutput {
	return o
}

func (o HelmReleaseSpecUpgradeRemediationOutput) ToHelmReleaseSpecUpgradeRemediationOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradeRemediationOutput {
	return o
}

func (o HelmReleaseSpecUpgradeRemediationOutput) ToHelmReleaseSpecUpgradeRemediationPtrOutput() HelmReleaseSpecUpgradeRemediationPtrOutput {
	return o.ToHelmReleaseSpecUpgradeRemediationPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecUpgradeRemediationOutput) ToHelmReleaseSpecUpgradeRemediationPtrOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradeRemediationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecUpgradeRemediation) *HelmReleaseSpecUpgradeRemediation {
		return &v
	}).(HelmReleaseSpecUpgradeRemediationPtrOutput)
}

// IgnoreTestFailures tells the controller to skip remediation when the Helm tests are run after an upgrade action but fail. Defaults to 'Test.IgnoreFailures'.
func (o HelmReleaseSpecUpgradeRemediationOutput) IgnoreTestFailures() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgradeRemediation) *bool { return v.IgnoreTestFailures }).(pulumi.BoolPtrOutput)
}

// RemediateLastFailure tells the controller to remediate the last failure, when no retries remain. Defaults to 'false' unless 'Retries' is greater than 0.
func (o HelmReleaseSpecUpgradeRemediationOutput) RemediateLastFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgradeRemediation) *bool { return v.RemediateLastFailure }).(pulumi.BoolPtrOutput)
}

// Retries is the number of retries that should be attempted on failures before bailing. Remediation, using 'Strategy', is performed between each attempt. Defaults to '0', a negative integer equals to unlimited retries.
func (o HelmReleaseSpecUpgradeRemediationOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgradeRemediation) *int { return v.Retries }).(pulumi.IntPtrOutput)
}

// Strategy to use for failure remediation. Defaults to 'rollback'.
func (o HelmReleaseSpecUpgradeRemediationOutput) Strategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgradeRemediation) *string { return v.Strategy }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecUpgradeRemediationPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecUpgradeRemediationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecUpgradeRemediation)(nil)).Elem()
}

func (o HelmReleaseSpecUpgradeRemediationPtrOutput) ToHelmReleaseSpecUpgradeRemediationPtrOutput() HelmReleaseSpecUpgradeRemediationPtrOutput {
	return o
}

func (o HelmReleaseSpecUpgradeRemediationPtrOutput) ToHelmReleaseSpecUpgradeRemediationPtrOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradeRemediationPtrOutput {
	return o
}

func (o HelmReleaseSpecUpgradeRemediationPtrOutput) Elem() HelmReleaseSpecUpgradeRemediationOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgradeRemediation) HelmReleaseSpecUpgradeRemediation {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecUpgradeRemediation
		return ret
	}).(HelmReleaseSpecUpgradeRemediationOutput)
}

// IgnoreTestFailures tells the controller to skip remediation when the Helm tests are run after an upgrade action but fail. Defaults to 'Test.IgnoreFailures'.
func (o HelmReleaseSpecUpgradeRemediationPtrOutput) IgnoreTestFailures() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgradeRemediation) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreTestFailures
	}).(pulumi.BoolPtrOutput)
}

// RemediateLastFailure tells the controller to remediate the last failure, when no retries remain. Defaults to 'false' unless 'Retries' is greater than 0.
func (o HelmReleaseSpecUpgradeRemediationPtrOutput) RemediateLastFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgradeRemediation) *bool {
		if v == nil {
			return nil
		}
		return v.RemediateLastFailure
	}).(pulumi.BoolPtrOutput)
}

// Retries is the number of retries that should be attempted on failures before bailing. Remediation, using 'Strategy', is performed between each attempt. Defaults to '0', a negative integer equals to unlimited retries.
func (o HelmReleaseSpecUpgradeRemediationPtrOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgradeRemediation) *int {
		if v == nil {
			return nil
		}
		return v.Retries
	}).(pulumi.IntPtrOutput)
}

// Strategy to use for failure remediation. Defaults to 'rollback'.
func (o HelmReleaseSpecUpgradeRemediationPtrOutput) Strategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgradeRemediation) *string {
		if v == nil {
			return nil
		}
		return v.Strategy
	}).(pulumi.StringPtrOutput)
}

// ValuesReference contains a reference to a resource containing Helm values, and optionally the key they can be found at.
type HelmReleaseSpecValuesfrom struct {
	// Kind of the values referent, valid values are ('Secret', 'ConfigMap').
	Kind string `pulumi:"kind"`
	// Name of the values referent. Should reside in the same namespace as the referring resource.
	Name string `pulumi:"name"`
	// Optional marks this ValuesReference as optional. When set, a not found error for the values reference is ignored, but any ValuesKey, TargetPath or transient error will still result in a reconciliation failure.
	Optional *bool `pulumi:"optional"`
	// TargetPath is the YAML dot notation path the value should be merged at. When set, the ValuesKey is expected to be a single flat value. Defaults to 'None', which results in the values getting merged at the root.
	TargetPath *string `pulumi:"targetPath"`
	// ValuesKey is the data key where the values.yaml or a specific value can be found at. Defaults to 'values.yaml'. When set, must be a valid Data Key, consisting of alphanumeric characters, '-', '_' or '.'.
	ValuesKey *string `pulumi:"valuesKey"`
}

// HelmReleaseSpecValuesfromInput is an input type that accepts HelmReleaseSpecValuesfromArgs and HelmReleaseSpecValuesfromOutput values.
// You can construct a concrete instance of `HelmReleaseSpecValuesfromInput` via:
//
//          HelmReleaseSpecValuesfromArgs{...}
type HelmReleaseSpecValuesfromInput interface {
	pulumi.Input

	ToHelmReleaseSpecValuesfromOutput() HelmReleaseSpecValuesfromOutput
	ToHelmReleaseSpecValuesfromOutputWithContext(context.Context) HelmReleaseSpecValuesfromOutput
}

// ValuesReference contains a reference to a resource containing Helm values, and optionally the key they can be found at.
type HelmReleaseSpecValuesfromArgs struct {
	// Kind of the values referent, valid values are ('Secret', 'ConfigMap').
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name of the values referent. Should reside in the same namespace as the referring resource.
	Name pulumi.StringInput `pulumi:"name"`
	// Optional marks this ValuesReference as optional. When set, a not found error for the values reference is ignored, but any ValuesKey, TargetPath or transient error will still result in a reconciliation failure.
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
	// TargetPath is the YAML dot notation path the value should be merged at. When set, the ValuesKey is expected to be a single flat value. Defaults to 'None', which results in the values getting merged at the root.
	TargetPath pulumi.StringPtrInput `pulumi:"targetPath"`
	// ValuesKey is the data key where the values.yaml or a specific value can be found at. Defaults to 'values.yaml'. When set, must be a valid Data Key, consisting of alphanumeric characters, '-', '_' or '.'.
	ValuesKey pulumi.StringPtrInput `pulumi:"valuesKey"`
}

func (HelmReleaseSpecValuesfromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecValuesfrom)(nil)).Elem()
}

func (i HelmReleaseSpecValuesfromArgs) ToHelmReleaseSpecValuesfromOutput() HelmReleaseSpecValuesfromOutput {
	return i.ToHelmReleaseSpecValuesfromOutputWithContext(context.Background())
}

func (i HelmReleaseSpecValuesfromArgs) ToHelmReleaseSpecValuesfromOutputWithContext(ctx context.Context) HelmReleaseSpecValuesfromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecValuesfromOutput)
}

// HelmReleaseSpecValuesfromArrayInput is an input type that accepts HelmReleaseSpecValuesfromArray and HelmReleaseSpecValuesfromArrayOutput values.
// You can construct a concrete instance of `HelmReleaseSpecValuesfromArrayInput` via:
//
//          HelmReleaseSpecValuesfromArray{ HelmReleaseSpecValuesfromArgs{...} }
type HelmReleaseSpecValuesfromArrayInput interface {
	pulumi.Input

	ToHelmReleaseSpecValuesfromArrayOutput() HelmReleaseSpecValuesfromArrayOutput
	ToHelmReleaseSpecValuesfromArrayOutputWithContext(context.Context) HelmReleaseSpecValuesfromArrayOutput
}

type HelmReleaseSpecValuesfromArray []HelmReleaseSpecValuesfromInput

func (HelmReleaseSpecValuesfromArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecValuesfrom)(nil)).Elem()
}

func (i HelmReleaseSpecValuesfromArray) ToHelmReleaseSpecValuesfromArrayOutput() HelmReleaseSpecValuesfromArrayOutput {
	return i.ToHelmReleaseSpecValuesfromArrayOutputWithContext(context.Background())
}

func (i HelmReleaseSpecValuesfromArray) ToHelmReleaseSpecValuesfromArrayOutputWithContext(ctx context.Context) HelmReleaseSpecValuesfromArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecValuesfromArrayOutput)
}

// ValuesReference contains a reference to a resource containing Helm values, and optionally the key they can be found at.
type HelmReleaseSpecValuesfromOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecValuesfromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecValuesfrom)(nil)).Elem()
}

func (o HelmReleaseSpecValuesfromOutput) ToHelmReleaseSpecValuesfromOutput() HelmReleaseSpecValuesfromOutput {
	return o
}

func (o HelmReleaseSpecValuesfromOutput) ToHelmReleaseSpecValuesfromOutputWithContext(ctx context.Context) HelmReleaseSpecValuesfromOutput {
	return o
}

// Kind of the values referent, valid values are ('Secret', 'ConfigMap').
func (o HelmReleaseSpecValuesfromOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v HelmReleaseSpecValuesfrom) string { return v.Kind }).(pulumi.StringOutput)
}

// Name of the values referent. Should reside in the same namespace as the referring resource.
func (o HelmReleaseSpecValuesfromOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HelmReleaseSpecValuesfrom) string { return v.Name }).(pulumi.StringOutput)
}

// Optional marks this ValuesReference as optional. When set, a not found error for the values reference is ignored, but any ValuesKey, TargetPath or transient error will still result in a reconciliation failure.
func (o HelmReleaseSpecValuesfromOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecValuesfrom) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

// TargetPath is the YAML dot notation path the value should be merged at. When set, the ValuesKey is expected to be a single flat value. Defaults to 'None', which results in the values getting merged at the root.
func (o HelmReleaseSpecValuesfromOutput) TargetPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecValuesfrom) *string { return v.TargetPath }).(pulumi.StringPtrOutput)
}

// ValuesKey is the data key where the values.yaml or a specific value can be found at. Defaults to 'values.yaml'. When set, must be a valid Data Key, consisting of alphanumeric characters, '-', '_' or '.'.
func (o HelmReleaseSpecValuesfromOutput) ValuesKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecValuesfrom) *string { return v.ValuesKey }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecValuesfromArrayOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecValuesfromArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecValuesfrom)(nil)).Elem()
}

func (o HelmReleaseSpecValuesfromArrayOutput) ToHelmReleaseSpecValuesfromArrayOutput() HelmReleaseSpecValuesfromArrayOutput {
	return o
}

func (o HelmReleaseSpecValuesfromArrayOutput) ToHelmReleaseSpecValuesfromArrayOutputWithContext(ctx context.Context) HelmReleaseSpecValuesfromArrayOutput {
	return o
}

func (o HelmReleaseSpecValuesfromArrayOutput) Index(i pulumi.IntInput) HelmReleaseSpecValuesfromOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmReleaseSpecValuesfrom {
		return vs[0].([]HelmReleaseSpecValuesfrom)[vs[1].(int)]
	}).(HelmReleaseSpecValuesfromOutput)
}

// HelmReleaseStatus defines the observed state of a HelmRelease.
type HelmReleaseStatus struct {
	// Conditions holds the conditions for the HelmRelease.
	Conditions []HelmReleaseStatusConditions `pulumi:"conditions"`
	// Failures is the reconciliation failure count against the latest desired state. It is reset after a successful reconciliation.
	Failures *int `pulumi:"failures"`
	// HelmChart is the namespaced name of the HelmChart resource created by the controller for the HelmRelease.
	HelmChart *string `pulumi:"helmChart"`
	// InstallFailures is the install failure count against the latest desired state. It is reset after a successful reconciliation.
	InstallFailures *int `pulumi:"installFailures"`
	// LastAppliedRevision is the revision of the last successfully applied source.
	LastAppliedRevision *string `pulumi:"lastAppliedRevision"`
	// LastAttemptedRevision is the revision of the last reconciliation attempt.
	LastAttemptedRevision *string `pulumi:"lastAttemptedRevision"`
	// LastAttemptedValuesChecksum is the SHA1 checksum of the values of the last reconciliation attempt.
	LastAttemptedValuesChecksum *string `pulumi:"lastAttemptedValuesChecksum"`
	// LastHandledReconcileAt holds the value of the most recent reconcile request value, so a change of the annotation value can be detected.
	LastHandledReconcileAt *string `pulumi:"lastHandledReconcileAt"`
	// LastReleaseRevision is the revision of the last successful Helm release.
	LastReleaseRevision *int `pulumi:"lastReleaseRevision"`
	// ObservedGeneration is the last observed generation.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// UpgradeFailures is the upgrade failure count against the latest desired state. It is reset after a successful reconciliation.
	UpgradeFailures *int `pulumi:"upgradeFailures"`
}

// HelmReleaseStatusInput is an input type that accepts HelmReleaseStatusArgs and HelmReleaseStatusOutput values.
// You can construct a concrete instance of `HelmReleaseStatusInput` via:
//
//          HelmReleaseStatusArgs{...}
type HelmReleaseStatusInput interface {
	pulumi.Input

	ToHelmReleaseStatusOutput() HelmReleaseStatusOutput
	ToHelmReleaseStatusOutputWithContext(context.Context) HelmReleaseStatusOutput
}

// HelmReleaseStatus defines the observed state of a HelmRelease.
type HelmReleaseStatusArgs struct {
	// Conditions holds the conditions for the HelmRelease.
	Conditions HelmReleaseStatusConditionsArrayInput `pulumi:"conditions"`
	// Failures is the reconciliation failure count against the latest desired state. It is reset after a successful reconciliation.
	Failures pulumi.IntPtrInput `pulumi:"failures"`
	// HelmChart is the namespaced name of the HelmChart resource created by the controller for the HelmRelease.
	HelmChart pulumi.StringPtrInput `pulumi:"helmChart"`
	// InstallFailures is the install failure count against the latest desired state. It is reset after a successful reconciliation.
	InstallFailures pulumi.IntPtrInput `pulumi:"installFailures"`
	// LastAppliedRevision is the revision of the last successfully applied source.
	LastAppliedRevision pulumi.StringPtrInput `pulumi:"lastAppliedRevision"`
	// LastAttemptedRevision is the revision of the last reconciliation attempt.
	LastAttemptedRevision pulumi.StringPtrInput `pulumi:"lastAttemptedRevision"`
	// LastAttemptedValuesChecksum is the SHA1 checksum of the values of the last reconciliation attempt.
	LastAttemptedValuesChecksum pulumi.StringPtrInput `pulumi:"lastAttemptedValuesChecksum"`
	// LastHandledReconcileAt holds the value of the most recent reconcile request value, so a change of the annotation value can be detected.
	LastHandledReconcileAt pulumi.StringPtrInput `pulumi:"lastHandledReconcileAt"`
	// LastReleaseRevision is the revision of the last successful Helm release.
	LastReleaseRevision pulumi.IntPtrInput `pulumi:"lastReleaseRevision"`
	// ObservedGeneration is the last observed generation.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// UpgradeFailures is the upgrade failure count against the latest desired state. It is reset after a successful reconciliation.
	UpgradeFailures pulumi.IntPtrInput `pulumi:"upgradeFailures"`
}

func (HelmReleaseStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseStatus)(nil)).Elem()
}

func (i HelmReleaseStatusArgs) ToHelmReleaseStatusOutput() HelmReleaseStatusOutput {
	return i.ToHelmReleaseStatusOutputWithContext(context.Background())
}

func (i HelmReleaseStatusArgs) ToHelmReleaseStatusOutputWithContext(ctx context.Context) HelmReleaseStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseStatusOutput)
}

func (i HelmReleaseStatusArgs) ToHelmReleaseStatusPtrOutput() HelmReleaseStatusPtrOutput {
	return i.ToHelmReleaseStatusPtrOutputWithContext(context.Background())
}

func (i HelmReleaseStatusArgs) ToHelmReleaseStatusPtrOutputWithContext(ctx context.Context) HelmReleaseStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseStatusOutput).ToHelmReleaseStatusPtrOutputWithContext(ctx)
}

// HelmReleaseStatusPtrInput is an input type that accepts HelmReleaseStatusArgs, HelmReleaseStatusPtr and HelmReleaseStatusPtrOutput values.
// You can construct a concrete instance of `HelmReleaseStatusPtrInput` via:
//
//          HelmReleaseStatusArgs{...}
//
//  or:
//
//          nil
type HelmReleaseStatusPtrInput interface {
	pulumi.Input

	ToHelmReleaseStatusPtrOutput() HelmReleaseStatusPtrOutput
	ToHelmReleaseStatusPtrOutputWithContext(context.Context) HelmReleaseStatusPtrOutput
}

type helmReleaseStatusPtrType HelmReleaseStatusArgs

func HelmReleaseStatusPtr(v *HelmReleaseStatusArgs) HelmReleaseStatusPtrInput {
	return (*helmReleaseStatusPtrType)(v)
}

func (*helmReleaseStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseStatus)(nil)).Elem()
}

func (i *helmReleaseStatusPtrType) ToHelmReleaseStatusPtrOutput() HelmReleaseStatusPtrOutput {
	return i.ToHelmReleaseStatusPtrOutputWithContext(context.Background())
}

func (i *helmReleaseStatusPtrType) ToHelmReleaseStatusPtrOutputWithContext(ctx context.Context) HelmReleaseStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseStatusPtrOutput)
}

// HelmReleaseStatus defines the observed state of a HelmRelease.
type HelmReleaseStatusOutput struct{ *pulumi.OutputState }

func (HelmReleaseStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseStatus)(nil)).Elem()
}

func (o HelmReleaseStatusOutput) ToHelmReleaseStatusOutput() HelmReleaseStatusOutput {
	return o
}

func (o HelmReleaseStatusOutput) ToHelmReleaseStatusOutputWithContext(ctx context.Context) HelmReleaseStatusOutput {
	return o
}

func (o HelmReleaseStatusOutput) ToHelmReleaseStatusPtrOutput() HelmReleaseStatusPtrOutput {
	return o.ToHelmReleaseStatusPtrOutputWithContext(context.Background())
}

func (o HelmReleaseStatusOutput) ToHelmReleaseStatusPtrOutputWithContext(ctx context.Context) HelmReleaseStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseStatus) *HelmReleaseStatus {
		return &v
	}).(HelmReleaseStatusPtrOutput)
}

// Conditions holds the conditions for the HelmRelease.
func (o HelmReleaseStatusOutput) Conditions() HelmReleaseStatusConditionsArrayOutput {
	return o.ApplyT(func(v HelmReleaseStatus) []HelmReleaseStatusConditions { return v.Conditions }).(HelmReleaseStatusConditionsArrayOutput)
}

// Failures is the reconciliation failure count against the latest desired state. It is reset after a successful reconciliation.
func (o HelmReleaseStatusOutput) Failures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatus) *int { return v.Failures }).(pulumi.IntPtrOutput)
}

// HelmChart is the namespaced name of the HelmChart resource created by the controller for the HelmRelease.
func (o HelmReleaseStatusOutput) HelmChart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatus) *string { return v.HelmChart }).(pulumi.StringPtrOutput)
}

// InstallFailures is the install failure count against the latest desired state. It is reset after a successful reconciliation.
func (o HelmReleaseStatusOutput) InstallFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatus) *int { return v.InstallFailures }).(pulumi.IntPtrOutput)
}

// LastAppliedRevision is the revision of the last successfully applied source.
func (o HelmReleaseStatusOutput) LastAppliedRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatus) *string { return v.LastAppliedRevision }).(pulumi.StringPtrOutput)
}

// LastAttemptedRevision is the revision of the last reconciliation attempt.
func (o HelmReleaseStatusOutput) LastAttemptedRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatus) *string { return v.LastAttemptedRevision }).(pulumi.StringPtrOutput)
}

// LastAttemptedValuesChecksum is the SHA1 checksum of the values of the last reconciliation attempt.
func (o HelmReleaseStatusOutput) LastAttemptedValuesChecksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatus) *string { return v.LastAttemptedValuesChecksum }).(pulumi.StringPtrOutput)
}

// LastHandledReconcileAt holds the value of the most recent reconcile request value, so a change of the annotation value can be detected.
func (o HelmReleaseStatusOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatus) *string { return v.LastHandledReconcileAt }).(pulumi.StringPtrOutput)
}

// LastReleaseRevision is the revision of the last successful Helm release.
func (o HelmReleaseStatusOutput) LastReleaseRevision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatus) *int { return v.LastReleaseRevision }).(pulumi.IntPtrOutput)
}

// ObservedGeneration is the last observed generation.
func (o HelmReleaseStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// UpgradeFailures is the upgrade failure count against the latest desired state. It is reset after a successful reconciliation.
func (o HelmReleaseStatusOutput) UpgradeFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatus) *int { return v.UpgradeFailures }).(pulumi.IntPtrOutput)
}

type HelmReleaseStatusPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseStatus)(nil)).Elem()
}

func (o HelmReleaseStatusPtrOutput) ToHelmReleaseStatusPtrOutput() HelmReleaseStatusPtrOutput {
	return o
}

func (o HelmReleaseStatusPtrOutput) ToHelmReleaseStatusPtrOutputWithContext(ctx context.Context) HelmReleaseStatusPtrOutput {
	return o
}

func (o HelmReleaseStatusPtrOutput) Elem() HelmReleaseStatusOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) HelmReleaseStatus {
		if v != nil {
			return *v
		}
		var ret HelmReleaseStatus
		return ret
	}).(HelmReleaseStatusOutput)
}

// Conditions holds the conditions for the HelmRelease.
func (o HelmReleaseStatusPtrOutput) Conditions() HelmReleaseStatusConditionsArrayOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) []HelmReleaseStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(HelmReleaseStatusConditionsArrayOutput)
}

// Failures is the reconciliation failure count against the latest desired state. It is reset after a successful reconciliation.
func (o HelmReleaseStatusPtrOutput) Failures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) *int {
		if v == nil {
			return nil
		}
		return v.Failures
	}).(pulumi.IntPtrOutput)
}

// HelmChart is the namespaced name of the HelmChart resource created by the controller for the HelmRelease.
func (o HelmReleaseStatusPtrOutput) HelmChart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.HelmChart
	}).(pulumi.StringPtrOutput)
}

// InstallFailures is the install failure count against the latest desired state. It is reset after a successful reconciliation.
func (o HelmReleaseStatusPtrOutput) InstallFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) *int {
		if v == nil {
			return nil
		}
		return v.InstallFailures
	}).(pulumi.IntPtrOutput)
}

// LastAppliedRevision is the revision of the last successfully applied source.
func (o HelmReleaseStatusPtrOutput) LastAppliedRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastAppliedRevision
	}).(pulumi.StringPtrOutput)
}

// LastAttemptedRevision is the revision of the last reconciliation attempt.
func (o HelmReleaseStatusPtrOutput) LastAttemptedRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastAttemptedRevision
	}).(pulumi.StringPtrOutput)
}

// LastAttemptedValuesChecksum is the SHA1 checksum of the values of the last reconciliation attempt.
func (o HelmReleaseStatusPtrOutput) LastAttemptedValuesChecksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastAttemptedValuesChecksum
	}).(pulumi.StringPtrOutput)
}

// LastHandledReconcileAt holds the value of the most recent reconcile request value, so a change of the annotation value can be detected.
func (o HelmReleaseStatusPtrOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledReconcileAt
	}).(pulumi.StringPtrOutput)
}

// LastReleaseRevision is the revision of the last successful Helm release.
func (o HelmReleaseStatusPtrOutput) LastReleaseRevision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) *int {
		if v == nil {
			return nil
		}
		return v.LastReleaseRevision
	}).(pulumi.IntPtrOutput)
}

// ObservedGeneration is the last observed generation.
func (o HelmReleaseStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// UpgradeFailures is the upgrade failure count against the latest desired state. It is reset after a successful reconciliation.
func (o HelmReleaseStatusPtrOutput) UpgradeFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) *int {
		if v == nil {
			return nil
		}
		return v.UpgradeFailures
	}).(pulumi.IntPtrOutput)
}

// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example,
//  	type FooStatus struct{ 	    // Represents the observations of a foo's current state. 	    // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" 	    // +patchMergeKey=type 	    // +patchStrategy=merge 	    // +listType=map 	    // +listMapKey=type 	    Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`
//  	    // other fields 	}
type HelmReleaseStatusConditions struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition. This may be an empty string.
	Message string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
	Reason string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
	Type string `pulumi:"type"`
}

// HelmReleaseStatusConditionsInput is an input type that accepts HelmReleaseStatusConditionsArgs and HelmReleaseStatusConditionsOutput values.
// You can construct a concrete instance of `HelmReleaseStatusConditionsInput` via:
//
//          HelmReleaseStatusConditionsArgs{...}
type HelmReleaseStatusConditionsInput interface {
	pulumi.Input

	ToHelmReleaseStatusConditionsOutput() HelmReleaseStatusConditionsOutput
	ToHelmReleaseStatusConditionsOutputWithContext(context.Context) HelmReleaseStatusConditionsOutput
}

// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example,
//  	type FooStatus struct{ 	    // Represents the observations of a foo's current state. 	    // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" 	    // +patchMergeKey=type 	    // +patchStrategy=merge 	    // +listType=map 	    // +listMapKey=type 	    Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`
//  	    // other fields 	}
type HelmReleaseStatusConditionsArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition. This may be an empty string.
	Message pulumi.StringInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
	Reason pulumi.StringInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
	Type pulumi.StringInput `pulumi:"type"`
}

func (HelmReleaseStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseStatusConditions)(nil)).Elem()
}

func (i HelmReleaseStatusConditionsArgs) ToHelmReleaseStatusConditionsOutput() HelmReleaseStatusConditionsOutput {
	return i.ToHelmReleaseStatusConditionsOutputWithContext(context.Background())
}

func (i HelmReleaseStatusConditionsArgs) ToHelmReleaseStatusConditionsOutputWithContext(ctx context.Context) HelmReleaseStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseStatusConditionsOutput)
}

// HelmReleaseStatusConditionsArrayInput is an input type that accepts HelmReleaseStatusConditionsArray and HelmReleaseStatusConditionsArrayOutput values.
// You can construct a concrete instance of `HelmReleaseStatusConditionsArrayInput` via:
//
//          HelmReleaseStatusConditionsArray{ HelmReleaseStatusConditionsArgs{...} }
type HelmReleaseStatusConditionsArrayInput interface {
	pulumi.Input

	ToHelmReleaseStatusConditionsArrayOutput() HelmReleaseStatusConditionsArrayOutput
	ToHelmReleaseStatusConditionsArrayOutputWithContext(context.Context) HelmReleaseStatusConditionsArrayOutput
}

type HelmReleaseStatusConditionsArray []HelmReleaseStatusConditionsInput

func (HelmReleaseStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseStatusConditions)(nil)).Elem()
}

func (i HelmReleaseStatusConditionsArray) ToHelmReleaseStatusConditionsArrayOutput() HelmReleaseStatusConditionsArrayOutput {
	return i.ToHelmReleaseStatusConditionsArrayOutputWithContext(context.Background())
}

func (i HelmReleaseStatusConditionsArray) ToHelmReleaseStatusConditionsArrayOutputWithContext(ctx context.Context) HelmReleaseStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseStatusConditionsArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example,
//  	type FooStatus struct{ 	    // Represents the observations of a foo's current state. 	    // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" 	    // +patchMergeKey=type 	    // +patchStrategy=merge 	    // +listType=map 	    // +listMapKey=type 	    Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`
//  	    // other fields 	}
type HelmReleaseStatusConditionsOutput struct{ *pulumi.OutputState }

func (HelmReleaseStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseStatusConditions)(nil)).Elem()
}

func (o HelmReleaseStatusConditionsOutput) ToHelmReleaseStatusConditionsOutput() HelmReleaseStatusConditionsOutput {
	return o
}

func (o HelmReleaseStatusConditionsOutput) ToHelmReleaseStatusConditionsOutputWithContext(ctx context.Context) HelmReleaseStatusConditionsOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o HelmReleaseStatusConditionsOutput) LastTransitionTime() pulumi.StringOutput {
	return o.ApplyT(func(v HelmReleaseStatusConditions) string { return v.LastTransitionTime }).(pulumi.StringOutput)
}

// message is a human readable message indicating details about the transition. This may be an empty string.
func (o HelmReleaseStatusConditionsOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v HelmReleaseStatusConditions) string { return v.Message }).(pulumi.StringOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
func (o HelmReleaseStatusConditionsOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusConditions) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
func (o HelmReleaseStatusConditionsOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v HelmReleaseStatusConditions) string { return v.Reason }).(pulumi.StringOutput)
}

// status of the condition, one of True, False, Unknown.
func (o HelmReleaseStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v HelmReleaseStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
func (o HelmReleaseStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HelmReleaseStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type HelmReleaseStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (HelmReleaseStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseStatusConditions)(nil)).Elem()
}

func (o HelmReleaseStatusConditionsArrayOutput) ToHelmReleaseStatusConditionsArrayOutput() HelmReleaseStatusConditionsArrayOutput {
	return o
}

func (o HelmReleaseStatusConditionsArrayOutput) ToHelmReleaseStatusConditionsArrayOutputWithContext(ctx context.Context) HelmReleaseStatusConditionsArrayOutput {
	return o
}

func (o HelmReleaseStatusConditionsArrayOutput) Index(i pulumi.IntInput) HelmReleaseStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmReleaseStatusConditions {
		return vs[0].([]HelmReleaseStatusConditions)[vs[1].(int)]
	}).(HelmReleaseStatusConditionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecInput)(nil)).Elem(), HelmReleaseSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPtrInput)(nil)).Elem(), HelmReleaseSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartInput)(nil)).Elem(), HelmReleaseSpecChartArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartPtrInput)(nil)).Elem(), HelmReleaseSpecChartArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartSpecInput)(nil)).Elem(), HelmReleaseSpecChartSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartSpecPtrInput)(nil)).Elem(), HelmReleaseSpecChartSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartSpecSourcerefInput)(nil)).Elem(), HelmReleaseSpecChartSpecSourcerefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartSpecSourcerefPtrInput)(nil)).Elem(), HelmReleaseSpecChartSpecSourcerefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecDependsonInput)(nil)).Elem(), HelmReleaseSpecDependsonArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecDependsonArrayInput)(nil)).Elem(), HelmReleaseSpecDependsonArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecInstallInput)(nil)).Elem(), HelmReleaseSpecInstallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecInstallPtrInput)(nil)).Elem(), HelmReleaseSpecInstallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecInstallRemediationInput)(nil)).Elem(), HelmReleaseSpecInstallRemediationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecInstallRemediationPtrInput)(nil)).Elem(), HelmReleaseSpecInstallRemediationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecKubeconfigInput)(nil)).Elem(), HelmReleaseSpecKubeconfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecKubeconfigPtrInput)(nil)).Elem(), HelmReleaseSpecKubeconfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecKubeconfigSecretrefInput)(nil)).Elem(), HelmReleaseSpecKubeconfigSecretrefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecKubeconfigSecretrefPtrInput)(nil)).Elem(), HelmReleaseSpecKubeconfigSecretrefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostrenderersInput)(nil)).Elem(), HelmReleaseSpecPostrenderersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostrenderersArrayInput)(nil)).Elem(), HelmReleaseSpecPostrenderersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostrenderersKustomizeInput)(nil)).Elem(), HelmReleaseSpecPostrenderersKustomizeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostrenderersKustomizePtrInput)(nil)).Elem(), HelmReleaseSpecPostrenderersKustomizeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostrenderersKustomizeImagesInput)(nil)).Elem(), HelmReleaseSpecPostrenderersKustomizeImagesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostrenderersKustomizeImagesArrayInput)(nil)).Elem(), HelmReleaseSpecPostrenderersKustomizeImagesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostrenderersKustomizePatchesInput)(nil)).Elem(), HelmReleaseSpecPostrenderersKustomizePatchesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostrenderersKustomizePatchesArrayInput)(nil)).Elem(), HelmReleaseSpecPostrenderersKustomizePatchesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostrenderersKustomizePatchesTargetInput)(nil)).Elem(), HelmReleaseSpecPostrenderersKustomizePatchesTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrInput)(nil)).Elem(), HelmReleaseSpecPostrenderersKustomizePatchesTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostrenderersKustomizePatchesjson6902Input)(nil)).Elem(), HelmReleaseSpecPostrenderersKustomizePatchesjson6902Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayInput)(nil)).Elem(), HelmReleaseSpecPostrenderersKustomizePatchesjson6902Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchInput)(nil)).Elem(), HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArrayInput)(nil)).Elem(), HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetInput)(nil)).Elem(), HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecRollbackInput)(nil)).Elem(), HelmReleaseSpecRollbackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecRollbackPtrInput)(nil)).Elem(), HelmReleaseSpecRollbackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecTestInput)(nil)).Elem(), HelmReleaseSpecTestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecTestPtrInput)(nil)).Elem(), HelmReleaseSpecTestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecUninstallInput)(nil)).Elem(), HelmReleaseSpecUninstallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecUninstallPtrInput)(nil)).Elem(), HelmReleaseSpecUninstallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecUpgradeInput)(nil)).Elem(), HelmReleaseSpecUpgradeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecUpgradePtrInput)(nil)).Elem(), HelmReleaseSpecUpgradeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecUpgradeRemediationInput)(nil)).Elem(), HelmReleaseSpecUpgradeRemediationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecUpgradeRemediationPtrInput)(nil)).Elem(), HelmReleaseSpecUpgradeRemediationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecValuesfromInput)(nil)).Elem(), HelmReleaseSpecValuesfromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecValuesfromArrayInput)(nil)).Elem(), HelmReleaseSpecValuesfromArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseStatusInput)(nil)).Elem(), HelmReleaseStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseStatusPtrInput)(nil)).Elem(), HelmReleaseStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseStatusConditionsInput)(nil)).Elem(), HelmReleaseStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseStatusConditionsArrayInput)(nil)).Elem(), HelmReleaseStatusConditionsArray{})
	pulumi.RegisterOutputType(HelmReleaseSpecOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartSpecOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartSpecPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartSpecSourcerefOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartSpecSourcerefPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecDependsonOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecDependsonArrayOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecInstallOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecInstallPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecInstallRemediationOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecInstallRemediationPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecKubeconfigOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecKubeconfigPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecKubeconfigSecretrefOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecKubeconfigSecretrefPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostrenderersOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostrenderersArrayOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostrenderersKustomizeOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostrenderersKustomizePtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostrenderersKustomizeImagesOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostrenderersKustomizeImagesArrayOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostrenderersKustomizePatchesOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostrenderersKustomizePatchesArrayOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostrenderersKustomizePatchesTargetOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostrenderersKustomizePatchesTargetPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostrenderersKustomizePatchesjson6902Output{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostrenderersKustomizePatchesjson6902ArrayOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostrenderersKustomizePatchesjson6902PatchArrayOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostrenderersKustomizePatchesjson6902TargetOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecRollbackOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecRollbackPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecTestOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecTestPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecUninstallOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecUninstallPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecUpgradeOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecUpgradePtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecUpgradeRemediationOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecUpgradeRemediationPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecValuesfromOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecValuesfromArrayOutput{})
	pulumi.RegisterOutputType(HelmReleaseStatusOutput{})
	pulumi.RegisterOutputType(HelmReleaseStatusPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseStatusConditionsOutput{})
	pulumi.RegisterOutputType(HelmReleaseStatusConditionsArrayOutput{})
}
