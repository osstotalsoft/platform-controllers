/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "totalsoft.ro/platform-controllers/pkg/apis/provisioning/v1alpha1"
)

// AzureVirtualDesktopLister helps list AzureVirtualDesktops.
// All objects returned here must be treated as read-only.
type AzureVirtualDesktopLister interface {
	// List lists all AzureVirtualDesktops in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AzureVirtualDesktop, err error)
	// AzureVirtualDesktops returns an object that can list and get AzureVirtualDesktops.
	AzureVirtualDesktops(namespace string) AzureVirtualDesktopNamespaceLister
	AzureVirtualDesktopListerExpansion
}

// azureVirtualDesktopLister implements the AzureVirtualDesktopLister interface.
type azureVirtualDesktopLister struct {
	indexer cache.Indexer
}

// NewAzureVirtualDesktopLister returns a new AzureVirtualDesktopLister.
func NewAzureVirtualDesktopLister(indexer cache.Indexer) AzureVirtualDesktopLister {
	return &azureVirtualDesktopLister{indexer: indexer}
}

// List lists all AzureVirtualDesktops in the indexer.
func (s *azureVirtualDesktopLister) List(selector labels.Selector) (ret []*v1alpha1.AzureVirtualDesktop, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AzureVirtualDesktop))
	})
	return ret, err
}

// AzureVirtualDesktops returns an object that can list and get AzureVirtualDesktops.
func (s *azureVirtualDesktopLister) AzureVirtualDesktops(namespace string) AzureVirtualDesktopNamespaceLister {
	return azureVirtualDesktopNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AzureVirtualDesktopNamespaceLister helps list and get AzureVirtualDesktops.
// All objects returned here must be treated as read-only.
type AzureVirtualDesktopNamespaceLister interface {
	// List lists all AzureVirtualDesktops in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AzureVirtualDesktop, err error)
	// Get retrieves the AzureVirtualDesktop from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AzureVirtualDesktop, error)
	AzureVirtualDesktopNamespaceListerExpansion
}

// azureVirtualDesktopNamespaceLister implements the AzureVirtualDesktopNamespaceLister
// interface.
type azureVirtualDesktopNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AzureVirtualDesktops in the indexer for a given namespace.
func (s azureVirtualDesktopNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AzureVirtualDesktop, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AzureVirtualDesktop))
	})
	return ret, err
}

// Get retrieves the AzureVirtualDesktop from the indexer for a given namespace and name.
func (s azureVirtualDesktopNamespaceLister) Get(name string) (*v1alpha1.AzureVirtualDesktop, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("azurevirtualdesktop"), name)
	}
	return obj.(*v1alpha1.AzureVirtualDesktop), nil
}
