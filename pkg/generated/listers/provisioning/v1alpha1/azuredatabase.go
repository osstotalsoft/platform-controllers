/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "totalsoft.ro/platform-controllers/pkg/apis/provisioning/v1alpha1"
)

// AzureDatabaseLister helps list AzureDatabases.
// All objects returned here must be treated as read-only.
type AzureDatabaseLister interface {
	// List lists all AzureDatabases in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AzureDatabase, err error)
	// AzureDatabases returns an object that can list and get AzureDatabases.
	AzureDatabases(namespace string) AzureDatabaseNamespaceLister
	AzureDatabaseListerExpansion
}

// azureDatabaseLister implements the AzureDatabaseLister interface.
type azureDatabaseLister struct {
	indexer cache.Indexer
}

// NewAzureDatabaseLister returns a new AzureDatabaseLister.
func NewAzureDatabaseLister(indexer cache.Indexer) AzureDatabaseLister {
	return &azureDatabaseLister{indexer: indexer}
}

// List lists all AzureDatabases in the indexer.
func (s *azureDatabaseLister) List(selector labels.Selector) (ret []*v1alpha1.AzureDatabase, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AzureDatabase))
	})
	return ret, err
}

// AzureDatabases returns an object that can list and get AzureDatabases.
func (s *azureDatabaseLister) AzureDatabases(namespace string) AzureDatabaseNamespaceLister {
	return azureDatabaseNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AzureDatabaseNamespaceLister helps list and get AzureDatabases.
// All objects returned here must be treated as read-only.
type AzureDatabaseNamespaceLister interface {
	// List lists all AzureDatabases in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AzureDatabase, err error)
	// Get retrieves the AzureDatabase from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AzureDatabase, error)
	AzureDatabaseNamespaceListerExpansion
}

// azureDatabaseNamespaceLister implements the AzureDatabaseNamespaceLister
// interface.
type azureDatabaseNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AzureDatabases in the indexer for a given namespace.
func (s azureDatabaseNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AzureDatabase, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AzureDatabase))
	})
	return ret, err
}

// Get retrieves the AzureDatabase from the indexer for a given namespace and name.
func (s azureDatabaseNamespaceLister) Get(name string) (*v1alpha1.AzureDatabase, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("azuredatabase"), name)
	}
	return obj.(*v1alpha1.AzureDatabase), nil
}
