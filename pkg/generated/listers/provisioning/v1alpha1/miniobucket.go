/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "totalsoft.ro/platform-controllers/pkg/apis/provisioning/v1alpha1"
)

// MinioBucketLister helps list MinioBuckets.
// All objects returned here must be treated as read-only.
type MinioBucketLister interface {
	// List lists all MinioBuckets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MinioBucket, err error)
	// MinioBuckets returns an object that can list and get MinioBuckets.
	MinioBuckets(namespace string) MinioBucketNamespaceLister
	MinioBucketListerExpansion
}

// minioBucketLister implements the MinioBucketLister interface.
type minioBucketLister struct {
	indexer cache.Indexer
}

// NewMinioBucketLister returns a new MinioBucketLister.
func NewMinioBucketLister(indexer cache.Indexer) MinioBucketLister {
	return &minioBucketLister{indexer: indexer}
}

// List lists all MinioBuckets in the indexer.
func (s *minioBucketLister) List(selector labels.Selector) (ret []*v1alpha1.MinioBucket, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MinioBucket))
	})
	return ret, err
}

// MinioBuckets returns an object that can list and get MinioBuckets.
func (s *minioBucketLister) MinioBuckets(namespace string) MinioBucketNamespaceLister {
	return minioBucketNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MinioBucketNamespaceLister helps list and get MinioBuckets.
// All objects returned here must be treated as read-only.
type MinioBucketNamespaceLister interface {
	// List lists all MinioBuckets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MinioBucket, err error)
	// Get retrieves the MinioBucket from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MinioBucket, error)
	MinioBucketNamespaceListerExpansion
}

// minioBucketNamespaceLister implements the MinioBucketNamespaceLister
// interface.
type minioBucketNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MinioBuckets in the indexer for a given namespace.
func (s minioBucketNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MinioBucket, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MinioBucket))
	})
	return ret, err
}

// Get retrieves the MinioBucket from the indexer for a given namespace and name.
func (s minioBucketNamespaceLister) Get(name string) (*v1alpha1.MinioBucket, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("miniobucket"), name)
	}
	return obj.(*v1alpha1.MinioBucket), nil
}
