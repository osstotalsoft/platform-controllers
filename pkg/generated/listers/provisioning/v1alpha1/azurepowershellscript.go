/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "totalsoft.ro/platform-controllers/pkg/apis/provisioning/v1alpha1"
)

// AzurePowerShellScriptLister helps list AzurePowerShellScripts.
// All objects returned here must be treated as read-only.
type AzurePowerShellScriptLister interface {
	// List lists all AzurePowerShellScripts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AzurePowerShellScript, err error)
	// AzurePowerShellScripts returns an object that can list and get AzurePowerShellScripts.
	AzurePowerShellScripts(namespace string) AzurePowerShellScriptNamespaceLister
	AzurePowerShellScriptListerExpansion
}

// azurePowerShellScriptLister implements the AzurePowerShellScriptLister interface.
type azurePowerShellScriptLister struct {
	indexer cache.Indexer
}

// NewAzurePowerShellScriptLister returns a new AzurePowerShellScriptLister.
func NewAzurePowerShellScriptLister(indexer cache.Indexer) AzurePowerShellScriptLister {
	return &azurePowerShellScriptLister{indexer: indexer}
}

// List lists all AzurePowerShellScripts in the indexer.
func (s *azurePowerShellScriptLister) List(selector labels.Selector) (ret []*v1alpha1.AzurePowerShellScript, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AzurePowerShellScript))
	})
	return ret, err
}

// AzurePowerShellScripts returns an object that can list and get AzurePowerShellScripts.
func (s *azurePowerShellScriptLister) AzurePowerShellScripts(namespace string) AzurePowerShellScriptNamespaceLister {
	return azurePowerShellScriptNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AzurePowerShellScriptNamespaceLister helps list and get AzurePowerShellScripts.
// All objects returned here must be treated as read-only.
type AzurePowerShellScriptNamespaceLister interface {
	// List lists all AzurePowerShellScripts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AzurePowerShellScript, err error)
	// Get retrieves the AzurePowerShellScript from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AzurePowerShellScript, error)
	AzurePowerShellScriptNamespaceListerExpansion
}

// azurePowerShellScriptNamespaceLister implements the AzurePowerShellScriptNamespaceLister
// interface.
type azurePowerShellScriptNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AzurePowerShellScripts in the indexer for a given namespace.
func (s azurePowerShellScriptNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AzurePowerShellScript, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AzurePowerShellScript))
	})
	return ret, err
}

// Get retrieves the AzurePowerShellScript from the indexer for a given namespace and name.
func (s azurePowerShellScriptNamespaceLister) Get(name string) (*v1alpha1.AzurePowerShellScript, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("azurepowershellscript"), name)
	}
	return obj.(*v1alpha1.AzurePowerShellScript), nil
}
