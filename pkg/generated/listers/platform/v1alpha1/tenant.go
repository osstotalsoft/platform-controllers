/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "totalsoft.ro/platform-controllers/pkg/apis/platform/v1alpha1"
)

// TenantLister helps list Tenants.
// All objects returned here must be treated as read-only.
type TenantLister interface {
	// List lists all Tenants in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Tenant, err error)
	// Tenants returns an object that can list and get Tenants.
	Tenants(namespace string) TenantNamespaceLister
	TenantListerExpansion
}

// tenantLister implements the TenantLister interface.
type tenantLister struct {
	indexer cache.Indexer
}

// NewTenantLister returns a new TenantLister.
func NewTenantLister(indexer cache.Indexer) TenantLister {
	return &tenantLister{indexer: indexer}
}

// List lists all Tenants in the indexer.
func (s *tenantLister) List(selector labels.Selector) (ret []*v1alpha1.Tenant, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Tenant))
	})
	return ret, err
}

// Tenants returns an object that can list and get Tenants.
func (s *tenantLister) Tenants(namespace string) TenantNamespaceLister {
	return tenantNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TenantNamespaceLister helps list and get Tenants.
// All objects returned here must be treated as read-only.
type TenantNamespaceLister interface {
	// List lists all Tenants in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Tenant, err error)
	// Get retrieves the Tenant from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Tenant, error)
	TenantNamespaceListerExpansion
}

// tenantNamespaceLister implements the TenantNamespaceLister
// interface.
type tenantNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Tenants in the indexer for a given namespace.
func (s tenantNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Tenant, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Tenant))
	})
	return ret, err
}

// Get retrieves the Tenant from the indexer for a given namespace and name.
func (s tenantNamespaceLister) Get(name string) (*v1alpha1.Tenant, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tenant"), name)
	}
	return obj.(*v1alpha1.Tenant), nil
}
