/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "totalsoft.ro/platform-controllers/pkg/apis/orchestrator/v1alpha1"
)

// DomainConfiguratorLister helps list DomainConfigurators.
// All objects returned here must be treated as read-only.
type DomainConfiguratorLister interface {
	// List lists all DomainConfigurators in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DomainConfigurator, err error)
	// DomainConfigurators returns an object that can list and get DomainConfigurators.
	DomainConfigurators(namespace string) DomainConfiguratorNamespaceLister
	DomainConfiguratorListerExpansion
}

// domainConfiguratorLister implements the DomainConfiguratorLister interface.
type domainConfiguratorLister struct {
	indexer cache.Indexer
}

// NewDomainConfiguratorLister returns a new DomainConfiguratorLister.
func NewDomainConfiguratorLister(indexer cache.Indexer) DomainConfiguratorLister {
	return &domainConfiguratorLister{indexer: indexer}
}

// List lists all DomainConfigurators in the indexer.
func (s *domainConfiguratorLister) List(selector labels.Selector) (ret []*v1alpha1.DomainConfigurator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DomainConfigurator))
	})
	return ret, err
}

// DomainConfigurators returns an object that can list and get DomainConfigurators.
func (s *domainConfiguratorLister) DomainConfigurators(namespace string) DomainConfiguratorNamespaceLister {
	return domainConfiguratorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DomainConfiguratorNamespaceLister helps list and get DomainConfigurators.
// All objects returned here must be treated as read-only.
type DomainConfiguratorNamespaceLister interface {
	// List lists all DomainConfigurators in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DomainConfigurator, err error)
	// Get retrieves the DomainConfigurator from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DomainConfigurator, error)
	DomainConfiguratorNamespaceListerExpansion
}

// domainConfiguratorNamespaceLister implements the DomainConfiguratorNamespaceLister
// interface.
type domainConfiguratorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DomainConfigurators in the indexer for a given namespace.
func (s domainConfiguratorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DomainConfigurator, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DomainConfigurator))
	})
	return ret, err
}

// Get retrieves the DomainConfigurator from the indexer for a given namespace and name.
func (s domainConfiguratorNamespaceLister) Get(name string) (*v1alpha1.DomainConfigurator, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("domainconfigurator"), name)
	}
	return obj.(*v1alpha1.DomainConfigurator), nil
}
