/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "totalsoft.ro/platform-controllers/pkg/apis/configuration/v1alpha1"
)

// ConfigurationDomainLister helps list ConfigurationDomains.
// All objects returned here must be treated as read-only.
type ConfigurationDomainLister interface {
	// List lists all ConfigurationDomains in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigurationDomain, err error)
	// ConfigurationDomains returns an object that can list and get ConfigurationDomains.
	ConfigurationDomains(namespace string) ConfigurationDomainNamespaceLister
	ConfigurationDomainListerExpansion
}

// configurationDomainLister implements the ConfigurationDomainLister interface.
type configurationDomainLister struct {
	indexer cache.Indexer
}

// NewConfigurationDomainLister returns a new ConfigurationDomainLister.
func NewConfigurationDomainLister(indexer cache.Indexer) ConfigurationDomainLister {
	return &configurationDomainLister{indexer: indexer}
}

// List lists all ConfigurationDomains in the indexer.
func (s *configurationDomainLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigurationDomain, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigurationDomain))
	})
	return ret, err
}

// ConfigurationDomains returns an object that can list and get ConfigurationDomains.
func (s *configurationDomainLister) ConfigurationDomains(namespace string) ConfigurationDomainNamespaceLister {
	return configurationDomainNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConfigurationDomainNamespaceLister helps list and get ConfigurationDomains.
// All objects returned here must be treated as read-only.
type ConfigurationDomainNamespaceLister interface {
	// List lists all ConfigurationDomains in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigurationDomain, err error)
	// Get retrieves the ConfigurationDomain from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConfigurationDomain, error)
	ConfigurationDomainNamespaceListerExpansion
}

// configurationDomainNamespaceLister implements the ConfigurationDomainNamespaceLister
// interface.
type configurationDomainNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConfigurationDomains in the indexer for a given namespace.
func (s configurationDomainNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigurationDomain, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigurationDomain))
	})
	return ret, err
}

// Get retrieves the ConfigurationDomain from the indexer for a given namespace and name.
func (s configurationDomainNamespaceLister) Get(name string) (*v1alpha1.ConfigurationDomain, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("configurationdomain"), name)
	}
	return obj.(*v1alpha1.ConfigurationDomain), nil
}
