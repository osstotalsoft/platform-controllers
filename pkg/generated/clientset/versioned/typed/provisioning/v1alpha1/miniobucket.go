/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	json "encoding/json"
	"fmt"
	"time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
	v1alpha1 "totalsoft.ro/platform-controllers/pkg/apis/provisioning/v1alpha1"
	provisioningv1alpha1 "totalsoft.ro/platform-controllers/pkg/generated/applyconfiguration/provisioning/v1alpha1"
	scheme "totalsoft.ro/platform-controllers/pkg/generated/clientset/versioned/scheme"
)

// MinioBucketsGetter has a method to return a MinioBucketInterface.
// A group's client should implement this interface.
type MinioBucketsGetter interface {
	MinioBuckets(namespace string) MinioBucketInterface
}

// MinioBucketInterface has methods to work with MinioBucket resources.
type MinioBucketInterface interface {
	Create(ctx context.Context, minioBucket *v1alpha1.MinioBucket, opts v1.CreateOptions) (*v1alpha1.MinioBucket, error)
	Update(ctx context.Context, minioBucket *v1alpha1.MinioBucket, opts v1.UpdateOptions) (*v1alpha1.MinioBucket, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.MinioBucket, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.MinioBucketList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.MinioBucket, err error)
	Apply(ctx context.Context, minioBucket *provisioningv1alpha1.MinioBucketApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.MinioBucket, err error)
	MinioBucketExpansion
}

// minioBuckets implements MinioBucketInterface
type minioBuckets struct {
	client rest.Interface
	ns     string
}

// newMinioBuckets returns a MinioBuckets
func newMinioBuckets(c *ProvisioningV1alpha1Client, namespace string) *minioBuckets {
	return &minioBuckets{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the minioBucket, and returns the corresponding minioBucket object, and an error if there is any.
func (c *minioBuckets) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.MinioBucket, err error) {
	result = &v1alpha1.MinioBucket{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("miniobuckets").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of MinioBuckets that match those selectors.
func (c *minioBuckets) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.MinioBucketList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.MinioBucketList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("miniobuckets").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested minioBuckets.
func (c *minioBuckets) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("miniobuckets").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a minioBucket and creates it.  Returns the server's representation of the minioBucket, and an error, if there is any.
func (c *minioBuckets) Create(ctx context.Context, minioBucket *v1alpha1.MinioBucket, opts v1.CreateOptions) (result *v1alpha1.MinioBucket, err error) {
	result = &v1alpha1.MinioBucket{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("miniobuckets").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(minioBucket).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a minioBucket and updates it. Returns the server's representation of the minioBucket, and an error, if there is any.
func (c *minioBuckets) Update(ctx context.Context, minioBucket *v1alpha1.MinioBucket, opts v1.UpdateOptions) (result *v1alpha1.MinioBucket, err error) {
	result = &v1alpha1.MinioBucket{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("miniobuckets").
		Name(minioBucket.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(minioBucket).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the minioBucket and deletes it. Returns an error if one occurs.
func (c *minioBuckets) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("miniobuckets").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *minioBuckets) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("miniobuckets").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched minioBucket.
func (c *minioBuckets) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.MinioBucket, err error) {
	result = &v1alpha1.MinioBucket{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("miniobuckets").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}

// Apply takes the given apply declarative configuration, applies it and returns the applied minioBucket.
func (c *minioBuckets) Apply(ctx context.Context, minioBucket *provisioningv1alpha1.MinioBucketApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.MinioBucket, err error) {
	if minioBucket == nil {
		return nil, fmt.Errorf("minioBucket provided to Apply must not be nil")
	}
	patchOpts := opts.ToPatchOptions()
	data, err := json.Marshal(minioBucket)
	if err != nil {
		return nil, err
	}
	name := minioBucket.Name
	if name == nil {
		return nil, fmt.Errorf("minioBucket.Name must be provided to Apply")
	}
	result = &v1alpha1.MinioBucket{}
	err = c.client.Patch(types.ApplyPatchType).
		Namespace(c.ns).
		Resource("miniobuckets").
		Name(*name).
		VersionedParams(&patchOpts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
