/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
	v1alpha1 "totalsoft.ro/platform-controllers/pkg/apis/provisioning/v1alpha1"
	provisioningv1alpha1 "totalsoft.ro/platform-controllers/pkg/generated/applyconfiguration/provisioning/v1alpha1"
)

// FakeMinioBuckets implements MinioBucketInterface
type FakeMinioBuckets struct {
	Fake *FakeProvisioningV1alpha1
	ns   string
}

var miniobucketsResource = v1alpha1.SchemeGroupVersion.WithResource("miniobuckets")

var miniobucketsKind = v1alpha1.SchemeGroupVersion.WithKind("MinioBucket")

// Get takes name of the minioBucket, and returns the corresponding minioBucket object, and an error if there is any.
func (c *FakeMinioBuckets) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.MinioBucket, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(miniobucketsResource, c.ns, name), &v1alpha1.MinioBucket{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.MinioBucket), err
}

// List takes label and field selectors, and returns the list of MinioBuckets that match those selectors.
func (c *FakeMinioBuckets) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.MinioBucketList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(miniobucketsResource, miniobucketsKind, c.ns, opts), &v1alpha1.MinioBucketList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.MinioBucketList{ListMeta: obj.(*v1alpha1.MinioBucketList).ListMeta}
	for _, item := range obj.(*v1alpha1.MinioBucketList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested minioBuckets.
func (c *FakeMinioBuckets) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(miniobucketsResource, c.ns, opts))

}

// Create takes the representation of a minioBucket and creates it.  Returns the server's representation of the minioBucket, and an error, if there is any.
func (c *FakeMinioBuckets) Create(ctx context.Context, minioBucket *v1alpha1.MinioBucket, opts v1.CreateOptions) (result *v1alpha1.MinioBucket, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(miniobucketsResource, c.ns, minioBucket), &v1alpha1.MinioBucket{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.MinioBucket), err
}

// Update takes the representation of a minioBucket and updates it. Returns the server's representation of the minioBucket, and an error, if there is any.
func (c *FakeMinioBuckets) Update(ctx context.Context, minioBucket *v1alpha1.MinioBucket, opts v1.UpdateOptions) (result *v1alpha1.MinioBucket, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(miniobucketsResource, c.ns, minioBucket), &v1alpha1.MinioBucket{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.MinioBucket), err
}

// Delete takes name of the minioBucket and deletes it. Returns an error if one occurs.
func (c *FakeMinioBuckets) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(miniobucketsResource, c.ns, name, opts), &v1alpha1.MinioBucket{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeMinioBuckets) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(miniobucketsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.MinioBucketList{})
	return err
}

// Patch applies the patch and returns the patched minioBucket.
func (c *FakeMinioBuckets) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.MinioBucket, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(miniobucketsResource, c.ns, name, pt, data, subresources...), &v1alpha1.MinioBucket{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.MinioBucket), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied minioBucket.
func (c *FakeMinioBuckets) Apply(ctx context.Context, minioBucket *provisioningv1alpha1.MinioBucketApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.MinioBucket, err error) {
	if minioBucket == nil {
		return nil, fmt.Errorf("minioBucket provided to Apply must not be nil")
	}
	data, err := json.Marshal(minioBucket)
	if err != nil {
		return nil, err
	}
	name := minioBucket.Name
	if name == nil {
		return nil, fmt.Errorf("minioBucket.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(miniobucketsResource, c.ns, *name, types.ApplyPatchType, data), &v1alpha1.MinioBucket{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.MinioBucket), err
}
